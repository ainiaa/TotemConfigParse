package totemconfigparse;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.TimeZone;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import jxl.Cell;
import jxl.CellType;
import jxl.DateCell;
import jxl.Sheet;
import jxl.Workbook;
import jxl.WorkbookSettings;
import jxl.read.biff.BiffException;

/**
 *
 * @author Administrator
 */
public class TotemConfigParseJFrame extends javax.swing.JFrame {

    /**
     * Creates new form TotemConfigParseJFrame
     */
    public TotemConfigParseJFrame() {
        loadSetting("./setting.properties");
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        funcbuttonGroup = new javax.swing.ButtonGroup();
        jLayeredPane = new javax.swing.JLayeredPane();
        funjPanel = new javax.swing.JPanel();
        totemjRadioButton = new javax.swing.JRadioButton();
        upgradeBuildingjRadioButton = new javax.swing.JRadioButton();
        bigPackjRadioButton = new javax.swing.JRadioButton();
        exchangejRadioButton = new javax.swing.JRadioButton();
        tigerItemInfojRadioButton = new javax.swing.JRadioButton();
        flowerlandSpinjRadioButton = new javax.swing.JRadioButton();
        keyMappingjRadioButton = new javax.swing.JRadioButton();
        adsGeneralizejRadioButton = new javax.swing.JRadioButton();
        fsGeneralizejRadioButton = new javax.swing.JRadioButton();
        sapphireExchangejRadioButton = new javax.swing.JRadioButton();
        flowerCraftjRadioButton = new javax.swing.JRadioButton();
        floralBenchUpgradejRadioButton = new javax.swing.JRadioButton();
        unockFlowerCraftjRadioButton = new javax.swing.JRadioButton();
        floralBenchGroupjRadioButton = new javax.swing.JRadioButton();
        floralBenchGroupMakeListjRadioButton = new javax.swing.JRadioButton();
        gardenExpandjRadioButton = new javax.swing.JRadioButton();
        itemExtendjRadioButton = new javax.swing.JRadioButton();
        slotInfojRadioButton = new javax.swing.JRadioButton();
        divinationInfojRadioButton = new javax.swing.JRadioButton();
        divinationExchangeInfojRadioButton = new javax.swing.JRadioButton();
        virtualCurrencyjRadioButton = new javax.swing.JRadioButton();
        divinationCommonInfojRadioButton = new javax.swing.JRadioButton();
        itemjRadioButton = new javax.swing.JRadioButton();
        simplyTaskjRadioButton = new javax.swing.JRadioButton();
        festivalActivityjRadioButton = new javax.swing.JRadioButton();
        logPopContentjRadioButton = new javax.swing.JRadioButton();
        popWindowOptjRadioButton = new javax.swing.JRadioButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        floralSculptureMakeListjRadioButton = new javax.swing.JRadioButton();
        floralSculpturejRadioButton = new javax.swing.JRadioButton();
        rewardMachinejRadioButton = new javax.swing.JRadioButton();
        floralSculptureCommonjRadioButton1 = new javax.swing.JRadioButton();
        selectConfgFilejPanel = new javax.swing.JPanel();
        configFilejLabel = new javax.swing.JLabel();
        configFilejTextField = new javax.swing.JTextField();
        configFilejButton = new javax.swing.JButton();
        outputjLabel = new javax.swing.JLabel();
        outputjTextField = new javax.swing.JTextField();
        outputjButton = new javax.swing.JButton();
        operationjPanel = new javax.swing.JPanel();
        parsejButton = new javax.swing.JButton();
        closejButton = new javax.swing.JButton();
        jMenuBar = new javax.swing.JMenuBar();
        filejMenu = new javax.swing.JMenu();
        settingjMenuItem = new javax.swing.JMenuItem();
        editjMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        funjPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("解析内容"));

        funcbuttonGroup.add(totemjRadioButton);
        totemjRadioButton.setText("图腾配置文件");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, funcbuttonGroup, org.jdesktop.beansbinding.ELProperty.create("TOTEM"), totemjRadioButton, org.jdesktop.beansbinding.BeanProperty.create("actionCommand"));
        bindingGroup.addBinding(binding);

        totemjRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                totemjRadioButtonMouseClicked(evt);
            }
        });

        funcbuttonGroup.add(upgradeBuildingjRadioButton);
        upgradeBuildingjRadioButton.setText("建筑升级");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, funcbuttonGroup, org.jdesktop.beansbinding.ELProperty.create("UPGRADE_BUILDING"), upgradeBuildingjRadioButton, org.jdesktop.beansbinding.BeanProperty.create("actionCommand"));
        bindingGroup.addBinding(binding);

        upgradeBuildingjRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                upgradeBuildingjRadioButtonMouseClicked(evt);
            }
        });

        funcbuttonGroup.add(bigPackjRadioButton);
        bigPackjRadioButton.setText("大礼包");
        bigPackjRadioButton.setActionCommand("BIGPACK");
        bigPackjRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bigPackjRadioButtonMouseClicked(evt);
            }
        });

        funcbuttonGroup.add(exchangejRadioButton);
        exchangejRadioButton.setText("兑换任务");
        exchangejRadioButton.setActionCommand("EXCHANGE");
        exchangejRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exchangejRadioButtonMouseClicked(evt);
            }
        });

        funcbuttonGroup.add(tigerItemInfojRadioButton);
        tigerItemInfojRadioButton.setText("实验室种子机");
        tigerItemInfojRadioButton.setActionCommand("TIGERITEMINFO");
        tigerItemInfojRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tigerItemInfojRadioButtonMouseClicked(evt);
            }
        });

        funcbuttonGroup.add(flowerlandSpinjRadioButton);
        flowerlandSpinjRadioButton.setText("游乐场老虎机");
        flowerlandSpinjRadioButton.setActionCommand("FLOWERLAND_SPIN");
        flowerlandSpinjRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                flowerlandSpinjRadioButtonMouseClicked(evt);
            }
        });

        funcbuttonGroup.add(keyMappingjRadioButton);
        keyMappingjRadioButton.setText("关键字映射");
        keyMappingjRadioButton.setActionCommand("KEYMAPPING");
        keyMappingjRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                keyMappingjRadioButtonMouseClicked(evt);
            }
        });

        funcbuttonGroup.add(adsGeneralizejRadioButton);
        adsGeneralizejRadioButton.setText("小语种广告推广");
        adsGeneralizejRadioButton.setActionCommand("ADSGENERALIZE");
        adsGeneralizejRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                adsGeneralizejRadioButtonMouseClicked(evt);
            }
        });

        funcbuttonGroup.add(fsGeneralizejRadioButton);
        fsGeneralizejRadioButton.setText("小语种花店推广");
        fsGeneralizejRadioButton.setActionCommand("FSGENERALIZE");
        fsGeneralizejRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fsGeneralizejRadioButtonMouseClicked(evt);
            }
        });

        funcbuttonGroup.add(sapphireExchangejRadioButton);
        sapphireExchangejRadioButton.setText("宝石兑换");
        sapphireExchangejRadioButton.setActionCommand("SAPPHIREEXCHANGE");
        sapphireExchangejRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sapphireExchangejRadioButtonMouseClicked(evt);
            }
        });

        funcbuttonGroup.add(flowerCraftjRadioButton);
        flowerCraftjRadioButton.setText("花艺品");
        flowerCraftjRadioButton.setActionCommand("FLOWERCRAFT");
        flowerCraftjRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                flowerCraftjRadioButtonMouseClicked(evt);
            }
        });

        funcbuttonGroup.add(floralBenchUpgradejRadioButton);
        floralBenchUpgradejRadioButton.setText("花艺制作台升级");
        floralBenchUpgradejRadioButton.setActionCommand("FLORALBENCHUPRADE");
        floralBenchUpgradejRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                floralBenchUpgradejRadioButtonMouseClicked(evt);
            }
        });

        funcbuttonGroup.add(unockFlowerCraftjRadioButton);
        unockFlowerCraftjRadioButton.setText("花艺解锁");
        unockFlowerCraftjRadioButton.setActionCommand("UNLOCKFLOWERCRAFT");
        unockFlowerCraftjRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                unockFlowerCraftjRadioButtonMouseClicked(evt);
            }
        });

        funcbuttonGroup.add(floralBenchGroupjRadioButton);
        floralBenchGroupjRadioButton.setText("花艺制作台分组");
        floralBenchGroupjRadioButton.setActionCommand("FLORALBENCHGROUP");
        floralBenchGroupjRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                floralBenchGroupjRadioButtonMouseClicked(evt);
            }
        });

        funcbuttonGroup.add(floralBenchGroupMakeListjRadioButton);
        floralBenchGroupMakeListjRadioButton.setText("制作台制作清单");
        floralBenchGroupMakeListjRadioButton.setActionCommand("FLORALBENCHMAKELIST");
        floralBenchGroupMakeListjRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                floralBenchGroupMakeListjRadioButtonMouseClicked(evt);
            }
        });

        funcbuttonGroup.add(gardenExpandjRadioButton);
        gardenExpandjRadioButton.setText("后花园扩地");
        gardenExpandjRadioButton.setActionCommand("GARDENEXPAND");
        gardenExpandjRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gardenExpandjRadioButtonMouseClicked(evt);
            }
        });

        funcbuttonGroup.add(itemExtendjRadioButton);
        itemExtendjRadioButton.setText("物品扩展");
        itemExtendjRadioButton.setActionCommand("ITEMEXTEND");
        itemExtendjRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itemExtendjRadioButtonMouseClicked(evt);
            }
        });

        funcbuttonGroup.add(slotInfojRadioButton);
        slotInfojRadioButton.setText("拉霸");
        slotInfojRadioButton.setActionCommand("SLOTINFO");
        slotInfojRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                slotInfojRadioButtonMouseClicked(evt);
            }
        });

        funcbuttonGroup.add(divinationInfojRadioButton);
        divinationInfojRadioButton.setText("占卜塔罗牌");
        divinationInfojRadioButton.setActionCommand("DIVINATION_INFO");
        divinationInfojRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                divinationInfojRadioButtonMouseClicked(evt);
            }
        });

        funcbuttonGroup.add(divinationExchangeInfojRadioButton);
        divinationExchangeInfojRadioButton.setText("占卜兑换");
        divinationExchangeInfojRadioButton.setActionCommand("DIVINATION_EXCHANGE_INFO");
        divinationExchangeInfojRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                divinationExchangeInfojRadioButtonMouseClicked(evt);
            }
        });

        funcbuttonGroup.add(virtualCurrencyjRadioButton);
        virtualCurrencyjRadioButton.setText("虚拟货币");
        virtualCurrencyjRadioButton.setActionCommand("VIRTUAL_CURRENCY");
        virtualCurrencyjRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                virtualCurrencyjRadioButtonMouseClicked(evt);
            }
        });

        funcbuttonGroup.add(divinationCommonInfojRadioButton);
        divinationCommonInfojRadioButton.setText("占卜通用信息");
        divinationCommonInfojRadioButton.setActionCommand("DIVINATION_COMMON_INFO");
        divinationCommonInfojRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                divinationCommonInfojRadioButtonMouseClicked(evt);
            }
        });

        funcbuttonGroup.add(itemjRadioButton);
        itemjRadioButton.setText("物品表");
        itemjRadioButton.setActionCommand("ITEM");
        itemjRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itemjRadioButtonMouseClicked(evt);
            }
        });

        funcbuttonGroup.add(simplyTaskjRadioButton);
        simplyTaskjRadioButton.setText("简易任务");
        simplyTaskjRadioButton.setActionCommand("SIMPLY_TASK");
        simplyTaskjRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                simplyTaskjRadioButtonMouseClicked(evt);
            }
        });

        funcbuttonGroup.add(festivalActivityjRadioButton);
        festivalActivityjRadioButton.setText("节日活动");
        festivalActivityjRadioButton.setActionCommand("FESTIVAL_ACTIVITY");
        festivalActivityjRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                festivalActivityjRadioButtonMouseClicked(evt);
            }
        });

        funcbuttonGroup.add(logPopContentjRadioButton);
        logPopContentjRadioButton.setText("登录弹窗内容");
        logPopContentjRadioButton.setToolTipText("");
        logPopContentjRadioButton.setActionCommand("LOGIN_POP_CONTENT");
        logPopContentjRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logPopContentjRadioButtonMouseClicked(evt);
            }
        });

        funcbuttonGroup.add(popWindowOptjRadioButton);
        popWindowOptjRadioButton.setText("弹窗优化");
        popWindowOptjRadioButton.setActionCommand("POPWINDOWOPT");
        popWindowOptjRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                popWindowOptjRadioButtonMouseClicked(evt);
            }
        });

        funcbuttonGroup.add(jRadioButton1);
        jRadioButton1.setText("金币返还");
        jRadioButton1.setActionCommand("CASCA_AWARD");
        jRadioButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jRadioButton1MouseClicked(evt);
            }
        });

        funcbuttonGroup.add(floralSculptureMakeListjRadioButton);
        floralSculptureMakeListjRadioButton.setText("花雕制作清单");
        floralSculptureMakeListjRadioButton.setActionCommand("FLORALSCULPTURECHMAKELIST");
        floralSculptureMakeListjRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                floralSculptureMakeListjRadioButtonMouseClicked(evt);
            }
        });

        funcbuttonGroup.add(floralSculpturejRadioButton);
        floralSculpturejRadioButton.setText("花雕、底座配置");
        floralSculpturejRadioButton.setActionCommand("FLORALSCULPTURE");
        floralSculpturejRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                floralSculpturejRadioButtonMouseClicked(evt);
            }
        });

        funcbuttonGroup.add(rewardMachinejRadioButton);
        rewardMachinejRadioButton.setText("免费送机器");
        rewardMachinejRadioButton.setActionCommand("FLORALSCULPTURE");
        rewardMachinejRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rewardMachinejRadioButtonMouseClicked(evt);
            }
        });

        funcbuttonGroup.add(floralSculptureCommonjRadioButton1);
        floralSculptureCommonjRadioButton1.setText("花雕产品");
        floralSculptureCommonjRadioButton1.setActionCommand("FLORALSCULPTURECOMMON");
        floralSculptureCommonjRadioButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                floralSculptureCommonjRadioButton1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout funjPanelLayout = new javax.swing.GroupLayout(funjPanel);
        funjPanel.setLayout(funjPanelLayout);
        funjPanelLayout.setHorizontalGroup(
            funjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(funjPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(funjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(totemjRadioButton)
                    .addComponent(exchangejRadioButton)
                    .addComponent(keyMappingjRadioButton)
                    .addComponent(sapphireExchangejRadioButton)
                    .addComponent(unockFlowerCraftjRadioButton)
                    .addComponent(gardenExpandjRadioButton)
                    .addComponent(divinationExchangeInfojRadioButton)
                    .addComponent(virtualCurrencyjRadioButton)
                    .addComponent(festivalActivityjRadioButton)
                    .addComponent(jRadioButton1)
                    .addComponent(floralSculptureCommonjRadioButton1))
                .addGroup(funjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rewardMachinejRadioButton)
                    .addGroup(funjPanelLayout.createSequentialGroup()
                        .addGroup(funjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(upgradeBuildingjRadioButton)
                            .addComponent(tigerItemInfojRadioButton)
                            .addComponent(adsGeneralizejRadioButton)
                            .addComponent(flowerCraftjRadioButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(funjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(floralBenchUpgradejRadioButton)
                            .addComponent(fsGeneralizejRadioButton)
                            .addComponent(flowerlandSpinjRadioButton)
                            .addComponent(bigPackjRadioButton)))
                    .addGroup(funjPanelLayout.createSequentialGroup()
                        .addGroup(funjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(floralBenchGroupjRadioButton)
                            .addComponent(divinationInfojRadioButton)
                            .addComponent(slotInfojRadioButton)
                            .addComponent(itemjRadioButton)
                            .addComponent(logPopContentjRadioButton)
                            .addComponent(floralSculptureMakeListjRadioButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(funjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(floralSculpturejRadioButton)
                            .addComponent(popWindowOptjRadioButton)
                            .addComponent(simplyTaskjRadioButton)
                            .addComponent(divinationCommonInfojRadioButton)
                            .addComponent(itemExtendjRadioButton)
                            .addComponent(floralBenchGroupMakeListjRadioButton))))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        funjPanelLayout.setVerticalGroup(
            funjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(funjPanelLayout.createSequentialGroup()
                .addGroup(funjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totemjRadioButton)
                    .addComponent(upgradeBuildingjRadioButton)
                    .addComponent(bigPackjRadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(funjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(exchangejRadioButton)
                    .addGroup(funjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tigerItemInfojRadioButton)
                        .addComponent(flowerlandSpinjRadioButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(funjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(keyMappingjRadioButton)
                    .addGroup(funjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(adsGeneralizejRadioButton)
                        .addComponent(fsGeneralizejRadioButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(funjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sapphireExchangejRadioButton)
                    .addComponent(flowerCraftjRadioButton)
                    .addComponent(floralBenchUpgradejRadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(funjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(funjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(floralBenchGroupjRadioButton)
                        .addComponent(floralBenchGroupMakeListjRadioButton))
                    .addComponent(unockFlowerCraftjRadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(funjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(funjPanelLayout.createSequentialGroup()
                        .addComponent(gardenExpandjRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(divinationExchangeInfojRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(virtualCurrencyjRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(festivalActivityjRadioButton))
                    .addGroup(funjPanelLayout.createSequentialGroup()
                        .addGroup(funjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(slotInfojRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(itemExtendjRadioButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(funjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(divinationInfojRadioButton)
                            .addComponent(divinationCommonInfojRadioButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(funjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(itemjRadioButton)
                            .addComponent(simplyTaskjRadioButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(funjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(logPopContentjRadioButton)
                            .addComponent(popWindowOptjRadioButton))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(funjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(floralSculptureMakeListjRadioButton)
                    .addComponent(floralSculpturejRadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(funjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rewardMachinejRadioButton)
                    .addComponent(floralSculptureCommonjRadioButton1))
                .addGap(0, 17, Short.MAX_VALUE))
        );

        jLayeredPane.add(funjPanel);
        funjPanel.setBounds(10, 0, 350, 300);

        selectConfgFilejPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("选择配置文件"));

        configFilejLabel.setText("配置文件：");

        configFilejTextField.setText(configBaseDir);
        configFilejTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                configFilejTextFieldMouseClicked(evt);
            }
        });

        configFilejButton.setText("浏览");
        configFilejButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                configFilejButtonMouseClicked(evt);
            }
        });

        outputjLabel.setText("输出目录：");

        outputjTextField.setText(outputDirectory);
        outputjTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                outputjTextFieldMouseClicked(evt);
            }
        });

        outputjButton.setText("浏览");
        outputjButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                outputjButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout selectConfgFilejPanelLayout = new javax.swing.GroupLayout(selectConfgFilejPanel);
        selectConfgFilejPanel.setLayout(selectConfgFilejPanelLayout);
        selectConfgFilejPanelLayout.setHorizontalGroup(
            selectConfgFilejPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectConfgFilejPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(selectConfgFilejPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(outputjLabel)
                    .addComponent(configFilejLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(selectConfgFilejPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(configFilejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(outputjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(selectConfgFilejPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(configFilejButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(outputjButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        selectConfgFilejPanelLayout.setVerticalGroup(
            selectConfgFilejPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectConfgFilejPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(selectConfgFilejPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(configFilejLabel)
                    .addComponent(configFilejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(configFilejButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(selectConfgFilejPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outputjLabel)
                    .addComponent(outputjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(outputjButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLayeredPane.add(selectConfgFilejPanel);
        selectConfgFilejPanel.setBounds(10, 310, 350, 80);

        operationjPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("操作"));

        parsejButton.setText("解析");
        parsejButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                parsejButtonMouseClicked(evt);
            }
        });

        closejButton.setText("取消");
        closejButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closejButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout operationjPanelLayout = new javax.swing.GroupLayout(operationjPanel);
        operationjPanel.setLayout(operationjPanelLayout);
        operationjPanelLayout.setHorizontalGroup(
            operationjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(operationjPanelLayout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addComponent(parsejButton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(closejButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(80, Short.MAX_VALUE))
        );
        operationjPanelLayout.setVerticalGroup(
            operationjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(operationjPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(operationjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(parsejButton)
                    .addComponent(closejButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLayeredPane.add(operationjPanel);
        operationjPanel.setBounds(10, 400, 350, 67);

        filejMenu.setText("文件");

        settingjMenuItem.setText("设置");
        settingjMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                settingjMenuItemMouseClicked(evt);
            }
        });
        filejMenu.add(settingjMenuItem);

        jMenuBar.add(filejMenu);

        editjMenu.setText("编辑");
        jMenuBar.add(editjMenu);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void parsejButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_parsejButtonMouseClicked
        //功能选择
        String func = "";
        if (funcbuttonGroup.getSelection() != null) {
            func = funcbuttonGroup.getSelection().getActionCommand();
        }

        //配置文件
        String configFilePath = configFilejTextField.getText();
        //输出路径
        String outputPath = outputjTextField.getText();

        String msg = "";
        if (func.isEmpty()) {
            msg = "请选择解析内容 ";
        } else if (configFilePath.isEmpty()) {
            msg = "请选择待解析文件(xls) ";
        } else if (outputPath.isEmpty()) {
            msg = "请选择输出路径";
        }
        if (!msg.isEmpty()) {
            JOptionPane.showMessageDialog(null, msg, "信息提示", JOptionPane.ERROR_MESSAGE);
        } else {
            if ("TOTEM".equals(func)) {//图腾相关配置
                transformTotemConfig(configFilePath, func, outputPath);
            } else if ("UPGRADE_BUILDING".equals(func)) {//建筑升级相关配置
                transformUpgradeBuildingConfig(configFilePath, func, outputPath);
            } else if ("BIGPACK".equals(func)) {//捆绑购买（大礼包）
                transformBundleingSaleConfig(configFilePath, func, outputPath);
            } else if ("FLOWERLAND_SPIN".equals(func)) {//游乐场老虎机
                transformFlowerlandSpinConfig(configFilePath, func, outputPath);
            } else if ("TIGERITEMINFO".equals(func)) {//实验室种子机
                transformTigerItemInfoConfig(configFilePath, func, outputPath);
            } else if ("EXCHANGE".equals(func)) {//兑换任务
                transformActivityExchangeConfig(configFilePath, func, outputPath);
            } else if ("KEYMAPPING".equals(func)) {//key mapping
                transformKeyMappingConfig(configFilePath, func, outputPath);
            } else if ("ADSGENERALIZE".equals(func)) {//小语种广告推广
                transformAdsGeneralizeConfig(configFilePath, func, outputPath);
            } else if ("FSGENERALIZE".equals(func)) {//小语种花店推广
                transformFsAdsGeneralizeConfig(configFilePath, func, outputPath);
            } else if ("SAPPHIREEXCHANGE".equals(func)) {//宝石兑换
                transformSapphireExchangeConfig(configFilePath, func, outputPath);
            } else if ("FLOWERCRAFT".equals(func)) {//花艺品
                transformFlowerCraftConfig(configFilePath, func, outputPath);
            } else if ("FLORALBENCHUPRADE".equals(func)) {//花艺制作台升级
                transformFloralBenchUpgradeConfig(configFilePath, func, outputPath);
            } else if ("UNLOCKFLOWERCRAFT".equals(func)) {//花艺品解锁
                transformUnlockFlowerCraftConfig(configFilePath, func, outputPath);
            } else if ("FLORALBENCHGROUP".equals(func)) {//花艺品制作台分组
                transformFloralBenchGroupConfig(configFilePath, func, outputPath);
            } else if ("FLORALBENCHMAKELIST".equals(func)) {//制作台制作清单
                transformFloralBenchMakeListConfig(configFilePath, func, outputPath);
            } else if ("GARDENEXPAND".equals(func)) {//后花园扩地
                transformGardenExpandConfig(configFilePath, func, outputPath);
            } else if ("ITEMEXTEND".equals(func)) {//物品扩展信息
                transformItemExtendConfig(configFilePath, func, outputPath);
            } else if ("SLOTINFO".equals(func)) {//拉霸
                transformSlotInfoConfig(configFilePath, func, outputPath);
            } else if ("DIVINATION_INFO".equals(func)) {//占卜塔罗牌
                transformDivinationInfoConfig(configFilePath, func, outputPath);
            } else if ("DIVINATION_EXCHANGE_INFO".equals(func)) {//占卜兑换
                transformDivinationExchangeConfig(configFilePath, func, outputPath);
            } else if ("DIVINATION_COMMON_INFO".equals(func)) {//占卜通用信息
                transformDivinationCommonInfoConfig(configFilePath, func, outputPath);
            } else if ("VIRTUAL_CURRENCY".equals(func)) {//虚拟货币
                transformVirtualCurrencyConfig(configFilePath, func, outputPath);
            } else if ("ITEM".equals(func)) {//物品表
                transformItemConfig(configFilePath, func, outputPath);
            } else if ("SIMPLY_TASK".equals(func)) {//简易任务
                transformSimplyTask(configFilePath, func, outputPath);
            } else if ("FESTIVAL_ACTIVITY".equals(func)) {//节日任务 
                transformFestivalActivity(configFilePath, func, outputPath);
            } else if ("LOGIN_POP_CONTENT".equals(func)) {//登录弹窗内容 
                transformLoginPopWindowContent(configFilePath, func, outputPath);
            } else if ("POPWINDOWOPT".equals(func)) {//弹窗优化
                transformPopWindowOptContent(configFilePath, func, outputPath);
            } else if ("CASCA_AWARD".equals(func)) {//金币返还
                transformCascaAwardContent(configFilePath, func, outputPath);
            } else if ("FLORALSCULPTURECHMAKELIST".equals(func)) {//花雕制作清单
                transformFloralSculptureMakeListConfig(configFilePath, func, outputPath);
            } else if ("FLORALSCULPTURE".equals(func)) {//花雕底座配置&花雕解锁
                transformFloralSculptureConfig(configFilePath, func, outputPath);
            } else if ("REWARD_MACHINE".equals(func)) {//免费送机器
                transformRewardMachineConfig(configFilePath, func, outputPath);
            } else if ("FLORALSCULPTURECOMMON".equals(func)) {//花雕产品
                transformFloralSculptureCommonConfig(configFilePath, func, outputPath);
            }
        }
        JOptionPane.showMessageDialog(null, "转换成功");
        this.dispose();

    }//GEN-LAST:event_parsejButtonMouseClicked

    public String[][] arrayPop(String[][] oldArrayContent) {
        int rows = oldArrayContent.length;
        int cols = oldArrayContent[0].length;
        String[][] cleanupedArrayContent = new String[rows - 1][cols];
        for (int row = 0; row < rows - 1; row++) {
            cleanupedArrayContent[row] = oldArrayContent[row + 1];
        }

        return cleanupedArrayContent;
    }

    public static String arrayImplode(String[] content, String implode) {
        String finalStr = "";
        for (int index = 0; index < content.length; index++) {
            if (index != content.length - 1 && index != 0) {
                finalStr += implode + content[index];
            } else {
                finalStr = content[index];
            }
        }

        return finalStr;
    }

    public static String[] arrayFilterByIndex(String[] oldArrayContent, String[] indexes) {
        String[] finalData = new String[indexes.length];
        int newIndex = 0;
        for (String index : indexes) {
            finalData[newIndex++] = oldArrayContent[Integer.parseInt(index)];
        }
        return finalData;
    }

    public static String[] arraySlice(String[] oldArrayContent, int startIndex) {
        int length = getMinLength(oldArrayContent, startIndex, -1);
        return arraySlice(oldArrayContent, startIndex, length);
    }

    public static int getMinLength(String[] oldArrayContent, int startIndex, int length) {
        int arrayContentLength = oldArrayContent.length;
        int minLength = 0;
        if (length < 0) {
            minLength = arrayContentLength - startIndex;
        } else if (startIndex > length) {
            minLength = 0;
        } else if (startIndex + length > arrayContentLength) {
            minLength = arrayContentLength;
        } else {
            minLength = startIndex + length;
        }
        return minLength;
    }

    public static String[] arraySlice(String[] oldArrayContent, int startIndex, int length) {
        String[] finalArrayContent = new String[length];
        if (startIndex < 0) {
            startIndex = oldArrayContent.length + startIndex;
        }
        int minLength = getMinLength(oldArrayContent, startIndex, length);
        int index = 0;
        while (startIndex < minLength) {
            finalArrayContent[index++] = oldArrayContent[startIndex++];
        }
        return finalArrayContent;
    }

    /**
     * 占卜兑换
     *
     * @param configFilePath
     * @param func
     * @param outputPath
     */
    public void transformDivinationExchangeConfig(String configFilePath, String func, String outputPath) {
        try {
            String[][] divinationExchangehCfg = parseXls(configFilePath, 0, true);

            String[][] cleanupedDivinationExchangeCfg;
            cleanupedDivinationExchangeCfg = arrayPop(divinationExchangehCfg);

            String finalCfg = buildFinalDivinationExchangeStringFromStringArray(cleanupedDivinationExchangeCfg);
            File fileOutput = new File(outputPath + "/split_config/divinationExchangeInfo.php");
            writeToFile(finalCfg, fileOutput, "UTF-8");
        } catch (IOException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class.getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        } catch (BiffException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class.getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        }
    }

    /**
     * 虚拟货币
     *
     * @param configFilePath
     * @param func
     * @param outputPath
     */
    public void transformVirtualCurrencyConfig(String configFilePath, String func, String outputPath) {
        try {
            String[][] divinationCashCfg = parseXls(configFilePath, 0, true);

            String[][] cleanupedDivinationCashCfg;
            cleanupedDivinationCashCfg = arrayPop(divinationCashCfg);

            String finalCfg = buildFinalVirtualCurrencyStringFromStringArray(cleanupedDivinationCashCfg);
            File fileOutput = new File(outputPath + "/split_config/virtualCurrency.php");
            writeToFile(finalCfg, fileOutput, "UTF-8");
        } catch (IOException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class.getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        } catch (BiffException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class.getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        }
    }

    /**
     * 占卜通用信息
     *
     * @param configFilePath
     * @param func
     * @param outputPath
     */
    public void transformDivinationCommonInfoConfig(String configFilePath, String func, String outputPath) {
        try {
            String[][] divinationCommonCfg = parseXls(configFilePath, 0, true);

            String[][] cleanupedDivinationCommonCfg;
            cleanupedDivinationCommonCfg = arrayPop(divinationCommonCfg);

            String finalCfg = buildFinalDivinationCommonInfoStringFromStringArray(cleanupedDivinationCommonCfg);
            File fileOutput = new File(outputPath + "/split_config/divinationCommonInfo.php");
            writeToFile(finalCfg, fileOutput, "UTF-8");
        } catch (IOException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class.getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        } catch (BiffException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class.getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        }
    }
    public static String[][] itemLangInfoCfg;
    public static String[][] itemBaseInfoCfg;
    public static HashMap<String, HashMap<String, String>> itemIdAndItemName;

    public String getItemName(String itemId, String lang) {
        String itemName = "";
        itemIdAndItemName = buildItemIdAndItemName();
        return itemIdAndItemName.get(itemId).get(lang);
    }

    public HashMap buildItemIdAndItemName() {
        HashMap finalInfo = new HashMap();
        HashMap itemNameInfo;
        int rows = itemLangInfoCfg.length;
        for (int rowNum = 1; rowNum < rows; rowNum++) {
            String[] itemNameInfoArray = arraySlice(itemLangInfoCfg[rowNum], 1);
            itemNameInfo = arrayCombine(itemLangs, itemNameInfoArray);
            finalInfo.put(itemLangInfoCfg[rowNum][0], itemNameInfo);
        }
        return finalInfo;
    }

    public HashMap<String, String> arrayCombine(String[] arrayKeys, String[] arrayValues) {
        HashMap<String, String> hashMap = new HashMap<String, String>();
        if (arrayKeys.length == arrayValues.length) {
            for (int i = 0; i < arrayKeys.length; i++) {
                hashMap.put(arrayKeys[i], arrayValues[i]);
            }
        }
        return hashMap;
    }

    public String[][] itemLangInfoCfg(String configFilePath) {
        try {
            int langSheetIndex = getSheetIndexBySheetName(configFilePath, "itemLang");
            itemLangInfoCfg = parseXls(configFilePath, langSheetIndex, true);
        } catch (Exception e) {
            itemLangInfoCfg = new String[0][0];
            showMessageDialogMessage(e);
        }
        return itemLangInfoCfg;
    }

    public String[] getItemLangs(String configFilePath) {
        String langs[];
        try {
            String[][] itemLangCfg = itemLangInfoCfg(configFilePath);
            String[] itemLangModelName = getModelFromStringArray(itemLangCfg);
            langs = arraySlice(itemLangModelName, 1);
        } catch (Exception e) {
            langs = new String[0];
            showMessageDialogMessage(e);
        }
        return langs;
    }

    public static String[] itemLangs;

    public String[] getItemLangFileNames(String configFilePath) {
        Map<String, String> fileNameMap = new HashMap<String, String>();
        fileNameMap.put("Chinese", "zh_tw");
        fileNameMap.put("English", "en_us");
        fileNameMap.put("German", "de_de");
        fileNameMap.put("Dutch", "nl_nl");
        fileNameMap.put("French", "fr_fr");
        fileNameMap.put("GermanSe", "de_se");
        fileNameMap.put("DutchSe", "nl_se");
        fileNameMap.put("FrenchSe", "fr_se");
        fileNameMap.put("Japanese", "ja_jp");

        String langs[] = getItemLangs(configFilePath);
        for (int index = 0; index < langs.length; index++) {
            langs[index] = fileNameMap.get(langs[index]);
        }
        itemLangs = langs;
        return langs;
    }

    public static String getItemDirctoryName(String itemId) {
        return String.valueOf(Integer.valueOf(itemId) % 16);
    }

    public String buildSingleItemStr(String[] itemBaseInfoContent) {
        String[] itemBaseModelName = getModelFromStringArray(itemBaseInfoCfg);
        String itemBaseInfoStr = "array(";
        String modelName, modelValue;
        for (int index = 0; index < itemBaseModelName.length; index++) {
            modelName = itemBaseModelName[index];
            modelValue = itemBaseInfoContent[index];
            if (!modelName.isEmpty()) {
                itemBaseInfoStr += "'" + modelName + "'=>'" + modelValue + "',";
            }
        }
        itemBaseInfoStr += ")";
        return itemBaseInfoStr;
    }

    public void transformItemConfig(String configFilePath, String func, String outputPath) {
        String[] itemFileLangs = getItemLangFileNames(configFilePath);
        try {
            int itemBaseSheetIndex = getSheetIndexBySheetName(configFilePath, "itemBase");
            itemBaseInfoCfg = parseXls(configFilePath, itemBaseSheetIndex, true);
//            String[] itemBaseModelName = getModelFromStringArray(itemBaseInfoCfg);
            long startTime = System.currentTimeMillis(); //获取开始时间

            Map itemMap = new HashMap();
            String flowerInfoStr = "<?php\r\n"
                    + "$J7CONFIG['flowerList'] = array (\r\n";//iType为 50或55
            String itemBaseStr = "<?php\r\n"
                    + "$J7CONFIG['items'] = array (\r\n";
            int typeIndex = getFirstIndexFromArray(itemBaseInfoCfg[0], "iType");
            int itemIdIndex = getFirstIndexFromArray(itemBaseInfoCfg[0], "iId");
            int sexIndex = getFirstIndexFromArray(itemBaseInfoCfg[0], "iSex");
            String iType = "";
            String iSex = "";
            for (int rowNum = 1; rowNum < itemBaseInfoCfg.length; rowNum++) {
                File tmpFileOutput;
                String itemId = itemBaseInfoCfg[rowNum][itemIdIndex];
                String dirctoryName = getItemDirctoryName(itemId);
                String singleItemStr = "<?php return ";
                String[] itemInfo = itemBaseInfoCfg[rowNum];
                String itemStr = buildSingleItemStr(itemInfo);
                singleItemStr += itemStr + ";";
                String fileName = String.format("%s/items/common/%s/%s.php", outputPath, dirctoryName, itemId);
                tmpFileOutput = new File(fileName);
                writeToFile(singleItemStr, tmpFileOutput, "UTF-8");
                iType = itemBaseInfoCfg[rowNum][typeIndex];
                iSex = itemBaseInfoCfg[rowNum][sexIndex];

                itemBaseStr += itemId + "=>    " + itemStr + ",\r\n";
                if ("50".equals(iType) || "55".equals(iType)) {//鲜花类
                    flowerInfoStr += itemId + "=>    " + itemStr + ",\r\n";
                } else if ("60".equals(iType) || "61".equals(iType) || "62".equals(iType) || "63".equals(iType) || "64".equals(iType) || "65".equals(iType)) { //npc服饰
                    buildDecorateString(itemId, iSex, iType);
                }
                itemMap.put(itemId, itemInfo);
            }
            itemBaseStr += ");";
            flowerInfoStr += ");";

            File tmpTotalLangFileOutput;
            String tmptotalLangFileName = String.format("%s/items/common.php", outputPath);
            tmpTotalLangFileOutput = new File(tmptotalLangFileName);
            writeToFile(itemBaseStr, tmpTotalLangFileOutput);

            tmptotalLangFileName = String.format("%s/items/flowerList.php", outputPath);
            tmpTotalLangFileOutput = new File(tmptotalLangFileName);
            writeToFile(flowerInfoStr, tmpTotalLangFileOutput);

            String decorateCollectStr = "<?php\r\n" + getDecorateCollectString();
            tmptotalLangFileName = String.format("%s/items/decorateList.php", outputPath);
            tmpTotalLangFileOutput = new File(tmptotalLangFileName);
            writeToFile(decorateCollectStr, tmpTotalLangFileOutput);

            long startTime2 = System.currentTimeMillis(); //获取结束时间
            //item lang 
//            for (String lang : itemFileLangs) { //这个种方式耗时 86s
//                String langItemStr = "<?php\r\n"
//                        + "$J7CONFIG['itemLang'] = array (\r\n";
//                for (int rowNum = 1; rowNum < itemBaseInfoCfg.length; rowNum++) {
//                    String itemId = itemBaseInfoCfg[rowNum][0];
//                    String itemName = getItemName(itemId, lang);
//                    itemName = itemName.trim();
//                    langItemStr += "    " + itemId + "=>    '" + itemName + "',\r\n";
//                }
//                langItemStr += ");";
//                tmptotalLangFileName = String.format("%s/items/lang/%s.php", outputPath, lang);
//                tmpTotalLangFileOutput = new File(tmptotalLangFileName);
//                writeToFile(langItemStr, tmpTotalLangFileOutput, "UTF-8");
//            }
            getItemNameString(itemFileLangs, outputPath);//这种方式耗时 1s
            long endTime = System.currentTimeMillis(); //获取结束时间
            System.out.println("use startTime2 " + (endTime - startTime2) / 1000 + "s");
            System.out.println("use startTime " + (endTime - startTime) / 1000 + "s");
        } catch (IOException e) {
            showMessageDialogMessage(e);
        } catch (BiffException e) {
            showMessageDialogMessage(e);
        }
    }

//    public static int getItemLangIndex (String lang) {
//        
//    }
    public String getItemNameString(String[] itemFileLangs, String outputPath) throws FileNotFoundException, IOException {
        String itemNameString = "";
        for (int langIndex = 1; langIndex < itemFileLangs.length; langIndex++) {
            String tmptotalLangFileName;
            File tmpTotalLangFileOutput;
            String lang = itemFileLangs[langIndex - 1];
            String langItemStr = "<?php\r\n"
                    + "$J7CONFIG['itemLang'] = array (\r\n";
            for (int rowNum = 1; rowNum < itemLangInfoCfg.length; rowNum++) {
                String itemId = itemLangInfoCfg[rowNum][0];
                String itemName = itemLangInfoCfg[rowNum][langIndex];
                itemName = itemName.trim();
                langItemStr += "    " + itemId + "=>    '" + itemName + "',\r\n";
            }
            langItemStr += ");";
            tmptotalLangFileName = String.format("%s/items/lang/%s.php", outputPath, lang);
            tmpTotalLangFileOutput = new File(tmptotalLangFileName);
            writeToFile(langItemStr, tmpTotalLangFileOutput, "UTF-8");
        }
        return itemNameString;
    }

    static String decorateWomanLapStr = "$J7CONFIG['womanLap'] = array (\r\n";//iType为 60 iSex 为 1
    static String decorateWomanEyeStr = "$J7CONFIG['womanEye'] = array (\r\n";//iType为 61 iSex 为 1
    static String decorateWomanShoeStr = "$J7CONFIG['womanShoe'] = array (\r\n";//iType为 62 iSex 为 1
    static String decorateWomanHairStr = "$J7CONFIG['womanHair'] = array (\r\n";//iType为 63 iSex 为 1
    static String decorateWomanTightStr = "$J7CONFIG['womanTight'] = array (\r\n";//iType为 64 iSex 为 1
    static String decorateWomanMouthStr = "$J7CONFIG['womanMouth'] = array (\r\n";//iType为 65 iSex 为 1
    static String decorateManLapStr = "$J7CONFIG['manLap'] = array (\r\n";//iType为 60 iSex 为 2
    static String decorateManEyeStr = "$J7CONFIG['manEye'] = array (\r\n";//iType为 61 iSex 为 2
    static String decorateManShoeStr = "$J7CONFIG['manShoe'] = array (\r\n";//iType为 62 iSex 为 2
    static String decorateManHairStr = "$J7CONFIG['manHair'] = array (\r\n";//iType为 63 iSex 为 2
    static String decorateManTightStr = "$J7CONFIG['manTight'] = array (\r\n";//iType为 64 iSex 为 2
    static String decorateManMouthStr = "$J7CONFIG['manMouth'] = array (\r\n";//iType为 65 iSex 为 2

    public static String getDecorateCollectString() {
        String decorateCollectStr = "<?php\r\n";
        decorateManLapStr += ");\r\n";
        decorateManEyeStr += ");\r\n";
        decorateManShoeStr += ");\r\n";
        decorateManHairStr += ");\r\n";
        decorateManTightStr += ");\r\n";
        decorateManMouthStr += ");\r\n";
        decorateWomanLapStr += ");\r\n";
        decorateWomanEyeStr += ");\r\n";
        decorateWomanShoeStr += ");\r\n";
        decorateWomanHairStr += ");\r\n";
        decorateWomanTightStr += ");\r\n";
        decorateWomanMouthStr += ");\r\n";
        decorateCollectStr += decorateManLapStr + decorateManEyeStr + decorateManShoeStr + decorateManHairStr + decorateManTightStr + decorateManMouthStr + decorateWomanLapStr + decorateWomanEyeStr + decorateWomanShoeStr + decorateWomanHairStr + decorateWomanTightStr + decorateWomanMouthStr;
        return decorateCollectStr;
    }

    public static void buildDecorateString(String itemId, String iSex, String iType) {
        if ("60".equals(iType)) { //npc服饰
            if ("2".equals(iSex)) {//男
                decorateManLapStr += itemId + ", ";//+ "=>    " + itemStr + ",\r\n";    
            } else if ("1".equals(iSex)) {//女
                decorateWomanLapStr += itemId + ", ";//+ "=>    " + itemStr + ",\r\n";    
            }
        } else if ("61".equals(iType)) {//npc服饰
            if ("2".equals(iSex)) {//男
                decorateManEyeStr += itemId + ", ";//+ "=>    " + itemStr + ",\r\n";
            } else if ("1".equals(iSex)) {//女
                decorateWomanEyeStr += itemId + ", ";//+ "=>    " + itemStr + ",\r\n";
            }
        } else if ("62".equals(iType)) {//npc服饰
            if ("2".equals(iSex)) {//男
                decorateManShoeStr += itemId + ", ";//+ "=>    " + itemStr + ",\r\n";
            } else if ("1".equals(iSex)) {//女
                decorateWomanShoeStr += itemId + ", ";//+ "=>    " + itemStr + ",\r\n";
            }
        } else if ("63".equals(iType)) {//npc服饰
            if ("2".equals(iSex)) {//男
                decorateManHairStr += itemId + ", ";//+ "=>    " + itemStr + ",\r\n";
            } else if ("1".equals(iSex)) {//女
                decorateWomanHairStr += itemId + ", ";//+ "=>    " + itemStr + ",\r\n";
            }
        } else if ("64".equals(iType)) {//npc服饰
            if ("2".equals(iSex)) {//男
                decorateManTightStr += itemId + ", ";//+ "=>    " + itemStr + ",\r\n";
            } else if ("1".equals(iSex)) {//女
                decorateWomanTightStr += itemId + ", ";//+ "=>    " + itemStr + ",\r\n";
            }
        } else if ("65".equals(iType)) {//npc服饰
            if ("2".equals(iSex)) {//男
                decorateManMouthStr += itemId + ", ";//+ "=>    " + itemStr + ",\r\n";;
            } else if ("1".equals(iSex)) {//女
                decorateWomanMouthStr += itemId + ", ";//+ "=>    " + itemStr + ",\r\n";
            }
        }
    }

    public static String getLineInfo() {
        StackTraceElement ste = new Throwable().getStackTrace()[1];
        return ste.getFileName() + ": Line " + ste.getLineNumber();
    }

    /**
     *
     * @return
     */
    public int getDirectoryNameByItemId() {
        int directory = 0;

        return directory;
    }

    public boolean findDuplicateItemId(String[][] content) {
        boolean findDuplicate = false;
        ArrayList itemList = new ArrayList();

        return findDuplicate;
    }

    /**
     * 占卜塔罗牌
     *
     * @param configFilePath
     * @param func
     * @param outputPath
     */
    public void transformDivinationInfoConfig(String configFilePath, String func, String outputPath) {
        try {
            int sheetIndex = getSheetIndexBySheetName(configFilePath, "cash");
            String[][] divinationCashCfg = parseXls(configFilePath, sheetIndex, true);
            sheetIndex = getSheetIndexBySheetName(configFilePath, "lottery");
            String[][] divinationLotteryCfg = parseXls(configFilePath, sheetIndex, true);
            sheetIndex = getSheetIndexBySheetName(configFilePath, "divinationInfo");
            String[][] divinationInfoCfg = parseXls(configFilePath, sheetIndex, true);
            sheetIndex = getSheetIndexBySheetName(configFilePath, "zh_tw");
            String[][] zhTwDisplayInfoCfg = parseXls(configFilePath, sheetIndex, true);
            sheetIndex = getSheetIndexBySheetName(configFilePath, "en_us");
            String[][] enUsDisplayInfoCfg = parseXls(configFilePath, sheetIndex, true);
            sheetIndex = getSheetIndexBySheetName(configFilePath, "de_de");
            String[][] deDeDisplayInfoCfg = parseXls(configFilePath, sheetIndex, true);
            sheetIndex = getSheetIndexBySheetName(configFilePath, "fr_fr");
            String[][] frFrDisplayInfoCfg = parseXls(configFilePath, sheetIndex, true);
            sheetIndex = getSheetIndexBySheetName(configFilePath, "nl_nl");
            String[][] nlNlDisplayInfoCfg = parseXls(configFilePath, sheetIndex, true);

            String[][] cleanupedDivinationCashCfg, cleanupedSlotInfoCfg, cleanupedSlotLotteryCfg, cleanupedZhTwDisplayInfoCfg, cleanupedEnUsDisplayInfoCfg, cleanupedDeDeDisplayInfoCfg, cleanupedFrFrDisplayInfoCfg, cleanupedNlNlDisplayInfoCfg;
            cleanupedDivinationCashCfg = arrayPop(divinationCashCfg);
            cleanupedSlotLotteryCfg = arrayPop(divinationLotteryCfg);
            cleanupedSlotInfoCfg = arrayPop(divinationInfoCfg);

            String finalCfg = buildFinalDivinationInfoStringFromStringArray(cleanupedDivinationCashCfg, cleanupedSlotLotteryCfg, cleanupedSlotInfoCfg);
            File fileOutput = new File(outputPath + "/split_config/divinationInfo.php");
            writeToFile(finalCfg, fileOutput, "UTF-8");

            cleanupedZhTwDisplayInfoCfg = arrayPop(zhTwDisplayInfoCfg);
            cleanupedEnUsDisplayInfoCfg = arrayPop(enUsDisplayInfoCfg);
            cleanupedDeDeDisplayInfoCfg = arrayPop(deDeDisplayInfoCfg);
            cleanupedFrFrDisplayInfoCfg = arrayPop(frFrDisplayInfoCfg);
            cleanupedNlNlDisplayInfoCfg = arrayPop(nlNlDisplayInfoCfg);

            String tmplangDisplayInfoCfg;
            File tmpFileOutput;
            tmplangDisplayInfoCfg = buildFinalDivinationDisplayInfoStringFromStringArray(cleanupedZhTwDisplayInfoCfg);
            tmpFileOutput = new File(outputPath + "/split_config/divinationInfo/zh_tw.php");
            writeToFile(tmplangDisplayInfoCfg, tmpFileOutput, "UTF-8");

            tmplangDisplayInfoCfg = buildFinalDivinationDisplayInfoStringFromStringArray(cleanupedEnUsDisplayInfoCfg);
            tmpFileOutput = new File(outputPath + "/split_config/divinationInfo/en_us.php");
            writeToFile(tmplangDisplayInfoCfg, tmpFileOutput, "UTF-8");

            tmplangDisplayInfoCfg = buildFinalDivinationDisplayInfoStringFromStringArray(cleanupedDeDeDisplayInfoCfg);
            tmpFileOutput = new File(outputPath + "/split_config/divinationInfo/de_de.php");
            writeToFile(tmplangDisplayInfoCfg, tmpFileOutput, "UTF-8");
            tmpFileOutput = new File(outputPath + "/split_config/divinationInfo/de_se.php");
            writeToFile(tmplangDisplayInfoCfg, tmpFileOutput, "UTF-8");

            tmplangDisplayInfoCfg = buildFinalDivinationDisplayInfoStringFromStringArray(cleanupedFrFrDisplayInfoCfg);
            tmpFileOutput = new File(outputPath + "/split_config/divinationInfo/fr_fr.php");
            writeToFile(tmplangDisplayInfoCfg, tmpFileOutput, "UTF-8");
            tmpFileOutput = new File(outputPath + "/split_config/divinationInfo/fr_se.php");
            writeToFile(tmplangDisplayInfoCfg, tmpFileOutput, "UTF-8");

            tmplangDisplayInfoCfg = buildFinalDivinationDisplayInfoStringFromStringArray(cleanupedNlNlDisplayInfoCfg);
            tmpFileOutput = new File(outputPath + "/split_config/divinationInfo/nl_nl.php");
            writeToFile(tmplangDisplayInfoCfg, tmpFileOutput, "UTF-8");
            tmpFileOutput = new File(outputPath + "/split_config/divinationInfo/nl_se.php");
            writeToFile(tmplangDisplayInfoCfg, tmpFileOutput, "UTF-8");

        } catch (IOException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        } catch (BiffException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        }
    }

    /**
     * 拉霸信息
     *
     * @param configFilePath
     * @param func
     * @param outputPath
     */
    public void transformSlotInfoConfig(String configFilePath, String func, String outputPath) {
        try {
            String[][] slotCashCfg = parseXls(configFilePath, 0, true);
            String[][] slotFreeCfg = parseXls(configFilePath, 1, true);
            String[][] slotGroupConditionCfg = parseXls(configFilePath, 2, true);
            String[][] slotLotteryCfg = parseXls(configFilePath, 3, true);
            String[][] slotInfoCfg = parseXls(configFilePath, 4, true);
            String[][] slotGroupCfg = parseXls(configFilePath, 5, true);

            String[][] cleanupedSlotCashCfg, cleanupedSlotFreeCfg, cleanupedSlotGroupConditionCfg, cleanupedSlotLotteryCfg, cleanupedSlotInfoCfg, cleanupedSlotGroupCfg;
            String[] model = getModelFromStringArray(slotInfoCfg);
            int freeIndexIndex = getFirstIndexFromArray(model, "freeIndex");
            int cashIndexIndex = getFirstIndexFromArray(model, "cashIndex");
            cleanupedSlotCashCfg = arrayPop(slotCashCfg);
            cleanupedSlotFreeCfg = arrayPop(slotFreeCfg);
            cleanupedSlotGroupConditionCfg = arrayPop(slotGroupConditionCfg);
            cleanupedSlotLotteryCfg = arrayPop(slotLotteryCfg);
            cleanupedSlotInfoCfg = arrayPop(slotInfoCfg);

            cleanupedSlotGroupCfg = arrayPop(slotGroupCfg);

            String finalCfg = buildFinalSlotInfoStringFromStringArray(cleanupedSlotCashCfg, cleanupedSlotFreeCfg, cleanupedSlotGroupCfg, cleanupedSlotLotteryCfg, cleanupedSlotInfoCfg, cleanupedSlotGroupConditionCfg, freeIndexIndex, cashIndexIndex);
            File fileOutput = new File(outputPath + "/split_config/slotInfo.php");
            writeToFile(finalCfg, fileOutput, "UTF-8");

        } catch (IOException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        } catch (BiffException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        }
    }

    /**
     * 节日活动
     *
     * @param configFilePath
     * @param func
     * @param outputPath
     */
    public void transformFestivalActivity(String configFilePath, String func, String outputPath) {
        try {
            String[][] festivalActivityCfg = parseXls(configFilePath, 0, true);
            String festivalActivityCfgString = buildStringFromStringArray(func, 0, festivalActivityCfg);
            festivalActivityCfgString = "<?php\r\n" + festivalActivityCfgString;
            File fileOutput = new File(outputPath + "/festival/festivalActivity.php");
            writeToFile(festivalActivityCfgString, fileOutput, "UTF-8");

            //display content generate 
            String[] displayLangs = new String[]{"zh_tw", "en_us", "nl_nl", "nl_se", "de_de", "de_se", "fr_fr", "fr_se"};
            for (String lang : displayLangs) {
                int sheetIndex = getSheetIndexBySheetName(configFilePath, lang);
                String[][] displayInfoCfg = parseXls(configFilePath, sheetIndex, true);
                String[][] cleanupedDisplayInfoCfg = arrayPop(displayInfoCfg);
                String tmplangDisplayInfoCfg;
                File tmpFileOutput;
                tmplangDisplayInfoCfg = buildFinalFestivalDisplayInfoStringFromStringArray(cleanupedDisplayInfoCfg);
                tmpFileOutput = new File(outputPath + "/festival/" + lang + ".php");
                writeToFile(tmplangDisplayInfoCfg, tmpFileOutput, "UTF-8");

            }
        } catch (IOException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        } catch (BiffException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        }
    }

    /**
     * 弹窗优化
     *
     * @param configFilePath
     * @param func
     * @param outputPath
     */
    public void transformPopWindowOptContent(String configFilePath, String func, String outputPath) {
        try {
            String[][] popWindowOptCfg = parseXls(configFilePath, 0, true);
            String popWindowOptCfgString = buildStringFromStringArray(func, 0, popWindowOptCfg);
            popWindowOptCfgString = "<?php\r\n" + popWindowOptCfgString;
            File fileOutput = new File(outputPath + "/popWindow.php");
            writeToFile(popWindowOptCfgString, fileOutput, "UTF-8");

        } catch (IOException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        } catch (BiffException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        }
    }

    /**
     * 登录弹窗内容
     *
     * @param configFilePath
     * @param func
     * @param outputPath
     */
    public void transformLoginPopWindowContent(String configFilePath, String func, String outputPath) {
        try {
            int sheetNumber = getSheetNumber(configFilePath);
            for (int sheetIndex = 0; sheetIndex < sheetNumber; sheetIndex++) {
                String sheetName = getSheetNameBySheetIndex(configFilePath, sheetIndex);
                String loginPopWindowContentLangCfg[][] = parseXls(configFilePath, sheetIndex, false);
                String loginPopWindowContentLangCfgString = "";
                loginPopWindowContentLangCfgString += buildStringFromStringArray(func, sheetIndex, loginPopWindowContentLangCfg);
                File loginPopWindowContentLangCfgFileOutput = new File(outputPath + "/resources/activity/configfile/" + sheetName + "/loginPop.xml");
                writeToFile(loginPopWindowContentLangCfgString, loginPopWindowContentLangCfgFileOutput, "UTF-8");

            }

        } catch (IOException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        } catch (BiffException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        }
    }

    /**
     * 金币返还
     *
     * @param configFilePath
     * @param func
     * @param outputPath
     */
    public void transformCascaAwardContent(String configFilePath, String func, String outputPath) {
        try {
            String[][] commonCascadeAwardCfg = parseXls(configFilePath, 0, true);
            String commonCascadeAwardCfgString = buildStringFromStringArray(func, 0, commonCascadeAwardCfg);
            commonCascadeAwardCfgString = "<?php\r\n" + commonCascadeAwardCfgString;
            File fileOutput = new File(outputPath + "/split_config/cascadeAward.php");
            writeToFile(commonCascadeAwardCfgString, fileOutput, "UTF-8");

            //display content generate 
//            String[] displayLangs = getLangs();
//            for (String lang : displayLangs) {
//                int sheetIndex = getSheetIndexBySheetName(configFilePath, lang);
//                String[][] displayInfoCfg = parseXls(configFilePath, sheetIndex, true);
//                String[][] cleanupedDisplayInfoCfg = arrayPop(displayInfoCfg);
//                String tmplangDisplayInfoCfg;
//                File tmpFileOutput;
//                tmplangDisplayInfoCfg = buildFinalCascadeAwardDisplayInfoStringFromStringArray(cleanupedDisplayInfoCfg);
//                tmpFileOutput = new File(outputPath + "/split_config/cascadeAward/" + lang + ".php");
//                writeToFile(tmplangDisplayInfoCfg, tmpFileOutput, "UTF-8");
//            }
        } catch (IOException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        } catch (BiffException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        }
    }

    public static String[] getLangs() {
        return new String[]{"zh_tw", "en_us", "nl_nl", "nl_se", "de_de", "de_se", "fr_fr", "fr_se", "ja_jp"};
    }

    /**
     * 简单任务
     *
     * @param configFilePath
     * @param func
     * @param outputPath
     */
    public void transformSimplyTask(String configFilePath, String func, String outputPath) {
        try {
            //######### 简易任务
            int sheetIndex = getSheetIndexBySheetName(configFilePath, "SimplyTaskCommon");
            String[][] SimplyTaskCommonCfg = parseXls(configFilePath, sheetIndex, true);
            String simplyTaskCommonCfgString = buildStringFromStringArray(func, sheetIndex, SimplyTaskCommonCfg);
            //普通简易任务
            simplyTaskCommonCfgString = "<?php\r\n" + simplyTaskCommonCfgString;
            //升级物品简易任务
            sheetIndex = getSheetIndexBySheetName(configFilePath, "upgradeItemCommon");
            String[][] upgradeItemSimplyTaskCommonCfg = parseXls(configFilePath, sheetIndex, true);
            simplyTaskCommonCfgString += buildStringFromStringArray("UPGRADE_ITEM_SIMPLY_TASK", sheetIndex, upgradeItemSimplyTaskCommonCfg);
            simplyTaskCommonCfgString += ");\r\n";
            File fileOutput = new File(outputPath + "/SimplyTask/SimplyTaskCommon.php");
            writeToFile(simplyTaskCommonCfgString, fileOutput, "UTF-8");

            //勋章兑换分组相关配置
            sheetIndex = getSheetIndexBySheetName(configFilePath, "convertMedal");
            String[][] convertMedalCfg = parseXls(configFilePath, sheetIndex, true);
            String convertMedalCfgString = buildStringFromStringArray("CONVER_MEDAL", sheetIndex, convertMedalCfg);
            fileOutput = new File(outputPath + "/FloralSculpture/convertMedal.php");
            writeToFile(convertMedalCfgString, fileOutput, "UTF-8");

            //################ 简易任务-步骤
            sheetIndex = getSheetIndexBySheetName(configFilePath, "SimplyTaskSingle");
            String[][] singleCfg = parseXls(configFilePath, sheetIndex, true);
            String singleCfgString = buildFinalSimplyTaskSingleInfoStringFromStringArray("SIMPLY_TASK_SINGLE", sheetIndex, singleCfg);
            fileOutput = new File(outputPath + "/SimplyTask/single.php");
            writeToFile(singleCfgString, fileOutput, "UTF-8");

            //###############  语言项相关配置
            String[] displayLangs = getLangs();
            for (String lang : displayLangs) {
                sheetIndex = getSheetIndexBySheetName(configFilePath, lang);
                String[][] displayInfoCfg = parseXls(configFilePath, sheetIndex, true);
                String[][] cleanupedDisplayInfoCfg = arrayPop(displayInfoCfg);
                String tmplangDisplayInfoCfg;
                File tmpFileOutput;
                tmplangDisplayInfoCfg = buildFinalSimplyTaskDisplayInfoStringFromStringArray(cleanupedDisplayInfoCfg);
                tmpFileOutput = new File(outputPath + "/SimplyTask/" + lang + ".php");
                writeToFile(tmplangDisplayInfoCfg, tmpFileOutput, "UTF-8");

            }

//            int sheetNumber = getSheetNumber(configFilePath);
//            for (sheetIndex = 2; sheetIndex < sheetNumber; sheetIndex++) {
//                String sheetName = getSheetNameBySheetIndex(configFilePath, sheetIndex);
//                String itemExtendLangCfg[][] = parseXls(configFilePath, sheetIndex, true);
//                String itemExtendLangCfgString = "<?php\r\n" + buildStringFromStringArray("SIMPETASKLANG", sheetIndex, itemExtendLangCfg);
//                File flowercraftLangCfgFileOutput = new File(outputPath + "/SimplyTask/" + sheetName + ".php");
//                writeToFile(itemExtendLangCfgString, flowercraftLangCfgFileOutput, "UTF-8");
//            }
            //#############
        } catch (IOException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        } catch (BiffException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        }
    }

    /**
     * 花雕底座配置&花雕解锁
     *
     * @param configFilePath
     * @param func
     * @param outputPath
     */
    public void transformFloralSculptureConfig(String configFilePath, String func, String outputPath) {
        try {
            String[][] itemExtendCfg = parseXls(configFilePath, 0, true);
            String itemExtendCfgString = buildStringFromStringArray(func, 0, itemExtendCfg);
            itemExtendCfgString = "<?php\r\n" + itemExtendCfgString;
            File fileOutput = new File(outputPath + "/FloralSculpture/convertBottom.php");
            writeToFile(itemExtendCfgString, fileOutput, "UTF-8");

        } catch (IOException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        } catch (BiffException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        }
    }

    /**
     * 免费送机器
     *
     * @param configFilePath
     * @param func
     * @param outputPath
     */
    public void transformRewardMachineConfig(String configFilePath, String func, String outputPath) {
        try {
            int sheetNumber = getSheetNumber(configFilePath);
            for (int sheetIndex = 0; sheetIndex < sheetNumber; sheetIndex++) {
                String sheetName = getSheetNameBySheetIndex(configFilePath, sheetIndex);
                sheetName = sheetName.trim();
                String rewardMachineLangCfg[][] = parseXls(configFilePath, sheetIndex, true);
                String rewardMachineLangCfgString = "<?php\r\n" + buildStringFromStringArray("REWARD_MACHINE", sheetIndex, rewardMachineLangCfg);
                File rewardMachineLangCfgFileOutput = new File(outputPath + "/split_config/rewardMachine/" + sheetName + ".php");
                writeToFile(rewardMachineLangCfgString, rewardMachineLangCfgFileOutput, "UTF-8");

            }
        } catch (IOException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        } catch (BiffException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        }
    }

    /**
     * 花雕信息
     *
     * @param configFilePath
     * @param func
     * @param outputPath
     */
    public void transformFloralSculptureCommonConfig(String configFilePath, String func, String outputPath) {
        try {
            String[][] floralSculptureCommonCfg = parseXls(configFilePath, 0, true);
            String floralSculptureCommonCfgString = buildStringFromStringArray(func, 0, floralSculptureCommonCfg);
            floralSculptureCommonCfgString = "<?php\r\n" + floralSculptureCommonCfgString;
            File fileOutput = new File(outputPath + "/FloralSculpture/floralSculptureCommon.php");
            writeToFile(floralSculptureCommonCfgString, fileOutput, "UTF-8");

        } catch (IOException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        } catch (BiffException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        }
    }

    /**
     * 物品扩展信息
     *
     * @param configFilePath
     * @param func
     * @param outputPath
     */
    public void transformItemExtendConfig(String configFilePath, String func, String outputPath) {
        try {
            String[][] itemExtendCfg = parseXls(configFilePath, 0, true);
            String itemExtendCfgString = buildStringFromStringArray(func, 0, itemExtendCfg);
            itemExtendCfgString = "<?php\r\n" + itemExtendCfgString;
            File fileOutput = new File(outputPath + "/itemExtend.php");
            writeToFile(itemExtendCfgString, fileOutput, "UTF-8");

            //###############
            int sheetNumber = getSheetNumber(configFilePath);
            for (int sheetIndex = 1; sheetIndex < sheetNumber; sheetIndex++) {
                String sheetName = getSheetNameBySheetIndex(configFilePath, sheetIndex);
                String itemExtendLangCfg[][] = parseXls(configFilePath, sheetIndex, true);
                String itemExtendLangCfgString = "<?php\r\n" + buildStringFromStringArray("ITEMEXTENDLANG", sheetIndex, itemExtendLangCfg);
                File flowercraftLangCfgFileOutput = new File(outputPath + "/split_config/itemExtend/" + sheetName + ".php");
                writeToFile(itemExtendLangCfgString, flowercraftLangCfgFileOutput, "UTF-8");

            }
            //#############

        } catch (IOException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        } catch (BiffException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        }
    }

    /**
     * 后花园扩地
     *
     * @param configFilePath
     * @param func
     * @param outputPath
     */
    public void transformGardenExpandConfig(String configFilePath, String func, String outputPath) {
        try {
            String[][] gardenExpandCfg = parseXls(configFilePath, 0, true);
            String gardenExpandCfgString = buildStringFromStringArray(func, 0, gardenExpandCfg);
            gardenExpandCfgString = "<?php\r\n" + gardenExpandCfgString;
            File fileOutput = new File(outputPath + "/Garden/expandCondition.php");
            writeToFile(gardenExpandCfgString, fileOutput, "UTF-8");

        } catch (IOException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        } catch (BiffException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        }
    }

    /**
     * 花艺制作台制作清单
     *
     * @param configFilePath
     * @param func
     * @param outputPath
     */
    public void transformFloralBenchMakeListConfig(String configFilePath, String func, String outputPath) {
        try {
            String[][] floralBenchMakeListCfg = parseXls(configFilePath, 0, true);
            String floralBenchMakeListCfgString = buildStringFromStringArray(func, 0, floralBenchMakeListCfg);
            floralBenchMakeListCfgString = "<?php\r\n" + floralBenchMakeListCfgString;
            File fileOutput = new File(outputPath + "/floriculture/floralBenchGroupMakeList.php");
            writeToFile(floralBenchMakeListCfgString, fileOutput, "UTF-8");

        } catch (IOException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        } catch (BiffException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        }
    }

    /**
     * 花艺制作台分组
     *
     * @param configFilePath
     * @param func
     * @param outputPath
     */
    public void transformFloralBenchGroupConfig(String configFilePath, String func, String outputPath) {
        try {
            String[][] floralBenchGroupCfg;
            String floralBenchGroupCfgString;
            String[][] floralBenchGroupRevertCfg;
            String floralBenchGroupRevertCfgString;

            floralBenchGroupCfg = parseXls(configFilePath, 0, true);
            floralBenchGroupCfgString = buildStringFromStringArray(func, 0, floralBenchGroupCfg);
            floralBenchGroupCfgString = "<?php\r\n" + floralBenchGroupCfgString;

            floralBenchGroupRevertCfg = parseXls(configFilePath, 1, true);
            floralBenchGroupRevertCfgString = buildStringFromStringArray("FLORALBENCHGROUPREVERT", 1, floralBenchGroupRevertCfg);

            String finalFloralBenchGroupCfgString = floralBenchGroupCfgString + "\r\n" + floralBenchGroupRevertCfgString;

            File fileOutput = new File(outputPath + "/floriculture/floralBenchGroup.php");
            writeToFile(finalFloralBenchGroupCfgString, fileOutput, "UTF-8");

        } catch (IOException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        } catch (BiffException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        }
    }

    /**
     * 花艺品解锁
     *
     * @param configFilePath
     * @param func
     * @param outputPath
     */
    public void transformUnlockFlowerCraftConfig(String configFilePath, String func, String outputPath) {
        try {
            String[][] unlockFlowerCraftCfg;
            String unlockFlowerCraftCfgString;
            unlockFlowerCraftCfg = parseXls(configFilePath, 0, true);
            unlockFlowerCraftCfgString = buildStringFromStringArray(func, 0, unlockFlowerCraftCfg);
            unlockFlowerCraftCfgString = "<?php\r\n" + unlockFlowerCraftCfgString;
            File fileOutput = new File(outputPath + "/floriculture/unlockFlowerCraft.php");
            writeToFile(unlockFlowerCraftCfgString, fileOutput, "UTF-8");

        } catch (IOException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        } catch (BiffException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        }
    }

    /**
     * 花艺制作台
     *
     * @param configFilePath
     * @param func
     * @param outputPath
     */
    public void transformFloralBenchUpgradeConfig(String configFilePath, String func, String outputPath) {
        try {
            String[][] floralBenchUpgradeCfg = parseXls(configFilePath, 0, true);
            String floralBenchUpgradeCfgString = buildStringFromStringArray(func, 0, floralBenchUpgradeCfg);
            floralBenchUpgradeCfgString = "<?php\r\n" + floralBenchUpgradeCfgString;
            File fileOutput = new File(outputPath + "/floriculture/floralBenchUpgrade.php");
            writeToFile(floralBenchUpgradeCfgString, fileOutput, "UTF-8");

        } catch (IOException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        } catch (BiffException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        }
    }

    /**
     * 花雕制作台
     *
     * @param configFilePath
     * @param func
     * @param outputPath
     */
    public void transformFloralSculptureMakeListConfig(String configFilePath, String func, String outputPath) {
        try {
            String[][] floralSculptureMakeListCfg = parseXls(configFilePath, 0, true);
            String floralSculptureMakeListCfgString = buildStringFromStringArray(func, 0, floralSculptureMakeListCfg);
            floralSculptureMakeListCfgString = "<?php\r\n" + floralSculptureMakeListCfgString;
            File fileOutput = new File(outputPath + "/FloralSculpture/floralSculptureMakeList.php");
            writeToFile(floralSculptureMakeListCfgString, fileOutput, "UTF-8");

        } catch (IOException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        } catch (BiffException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        }
    }

    /**
     * 花艺品
     *
     * @param configFilePath
     * @param func
     * @param outputPath
     */
    public void transformFlowerCraftConfig(String configFilePath, String func, String outputPath) {
        try {
            int sheetNumber = getSheetNumber(configFilePath);
            String sheetName;
            String[][] flowercraftCfg;
            String flowercraftCfgString;
            flowercraftCfg = parseXls(configFilePath, 0, true);
            flowercraftCfgString = buildStringFromStringArray(func, 0, flowercraftCfg);
            flowercraftCfgString = "<?php\r\n" + flowercraftCfgString;
            File fileOutput = new File(outputPath + "/floriculture/flowerCraftCommon.php");
            writeToFile(flowercraftCfgString, fileOutput, "UTF-8");

            for (int sheetIndex = 1; sheetIndex < sheetNumber; sheetIndex++) {
                sheetName = getSheetNameBySheetIndex(configFilePath, sheetIndex);
                String flowercraftLangCfg[][] = parseXls(configFilePath, sheetIndex, true);
                String flowercraftLangCfgString = buildStringFromStringArray("FLOWERCARFTDISPLAY", sheetIndex, flowercraftLangCfg);
                flowercraftLangCfgString = "<?php\r\n" + flowercraftLangCfgString;
                File flowercraftLangCfgFileOutput = new File(outputPath + "/floriculture/flowerCraft/" + sheetName + ".php");
                writeToFile(flowercraftLangCfgString, flowercraftLangCfgFileOutput, "UTF-8");

            }
        } catch (IOException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        } catch (BiffException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        }
    }

    /**
     * 宝石兑换
     *
     * @param configFilePath
     * @param func
     * @param outputPath
     */
    public void transformSapphireExchangeConfig(String configFilePath, String func, String outputPath) {
        try {
            int sheetNumber = getSheetNumber(configFilePath);
            String sheetName;
            String[][] sapphireExchanageCfg;
            String sapphireExchanageCfgString;
            sapphireExchanageCfg = parseXls(configFilePath, 0, true);
            sapphireExchanageCfgString = buildStringFromStringArray(func, 0, sapphireExchanageCfg);
            sapphireExchanageCfgString = "<?php\r\n" + sapphireExchanageCfgString;
            File fileOutput = new File(outputPath + "/split_config/sapphireExchangeCommon.php");
            writeToFile(sapphireExchanageCfgString, fileOutput, "UTF-8");

            for (int sheetIndex = 1; sheetIndex < sheetNumber; sheetIndex++) {
                sheetName = getSheetNameBySheetIndex(configFilePath, sheetIndex);
                String sapphireExchanageLangCfg[][] = parseXls(configFilePath, sheetIndex, true);
                String sapphireExchanageLangCfgString = buildStringFromStringArray("SAPPHIREEXCHANGEDISPLAY", sheetIndex, sapphireExchanageLangCfg);
                sapphireExchanageLangCfgString = "<?php\r\n" + sapphireExchanageLangCfgString;
                File sapphireExchanageLangCfgFileOutput = new File(outputPath + "/split_config/sapphireExchange/" + sheetName + ".php");
                writeToFile(sapphireExchanageLangCfgString, sapphireExchanageLangCfgFileOutput, "UTF-8");

            }
        } catch (IOException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        } catch (BiffException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        }
    }

    /**
     * 花店推广 (送东西)
     *
     * @param configFilePath
     * @param func
     * @param outputPath
     */
    public void transformFsAdsGeneralizeConfig(String configFilePath, String func, String outputPath) {
        try {
            int sheetNumber = getSheetNumber(configFilePath);
            String sheetName;
            String[][] adsgeneralizeCfg;
            String adsgeneralizeCfgString;
            for (int sheetIndex = 0; sheetIndex < sheetNumber; sheetIndex++) {
                sheetName = getSheetNameBySheetIndex(configFilePath, sheetIndex);
                adsgeneralizeCfg = parseXls(configFilePath, sheetIndex, true);
                adsgeneralizeCfgString = buildStringFromStringArray(func, sheetIndex, adsgeneralizeCfg);
                adsgeneralizeCfgString = "<?php\r\n" + adsgeneralizeCfgString;
                File fileOutput = new File(outputPath + "/split_config/fs_ads_generalize/" + sheetName + ".php");
                writeToFile(adsgeneralizeCfgString, fileOutput, "UTF-8");

            }

        } catch (IOException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        } catch (BiffException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        }
    }

    /**
     * 小语种推广 （跳转到第三方的网站）
     *
     * @param configFilePath
     * @param func
     * @param outputPath
     */
    public void transformAdsGeneralizeConfig(String configFilePath, String func, String outputPath) {
        try {
            int sheetNumber = getSheetNumber(configFilePath);
            String sheetName;
            String[][] adsgeneralizeCfg;
            String adsgeneralizeCfgString;
            for (int sheetIndex = 0; sheetIndex < sheetNumber; sheetIndex++) {
                sheetName = getSheetNameBySheetIndex(configFilePath, sheetIndex);
                adsgeneralizeCfg = parseXls(configFilePath, sheetIndex, true);
                adsgeneralizeCfgString = buildStringFromStringArray(func, sheetIndex, adsgeneralizeCfg);
                adsgeneralizeCfgString = "<?php\r\n" + adsgeneralizeCfgString;
                File fileOutput = new File(outputPath + "/split_config/ads_generalize/" + sheetName + ".php");
                writeToFile(adsgeneralizeCfgString, fileOutput, "UTF-8");

            }

        } catch (IOException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        } catch (BiffException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        }
    }

    public void transformKeyMappingConfig(String configFilePath, String func, String outputPath) {
        try {
            String[][] keyMappingCfg = parseXls(configFilePath, 0, true);
            String keyMappingCfgString = buildStringFromStringArray(func, 0, keyMappingCfg);
            keyMappingCfgString = "<?php\r\n" + keyMappingCfgString;
            File fileOutput = new File(outputPath + "/split_config/mapping_keys.php");
            writeToFile(keyMappingCfgString, fileOutput, "UTF-8");

        } catch (IOException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        } catch (BiffException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        }
    }

    public void transformActivityExchangeConfig(String configFilePath, String func, String outputPath) {
        try {
            String[][] activityExchangeCfg = parseXls(configFilePath, 0, true);
            String[][] exchangeTaskCfg = parseXls(configFilePath, 1, true);
            String activityExchangeCfgString = buildStringFromStringArray(func, 0, activityExchangeCfg);
            String exchangeTaskCfgString = buildStringFromStringArray(func, 1, exchangeTaskCfg);
            String finalTotemCfg = "<?php\r\n" + activityExchangeCfgString + "\r\n\r\n" + exchangeTaskCfgString;
            File fileOutput = new File(outputPath + "/split_config/activityExchange.php");
            writeToFile(finalTotemCfg, fileOutput, "UTF-8");

        } catch (IOException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        } catch (BiffException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        }
    }

    /**
     * 实验室种子机
     *
     * @param configFilePath
     * @param func
     * @param outputPath
     */
    public void transformTigerItemInfoConfig(String configFilePath, String func, String outputPath) {
        try {
            String[][] tigerItemInfoCfg = parseXls(configFilePath, 1, true);
            String tigerItemInfoCfgString = buildStringFromStringArray(func, 1, tigerItemInfoCfg);
            tigerItemInfoCfgString = "<?php\r\n" + tigerItemInfoCfgString;
            File fileOutput = new File(outputPath + "/split_config/tigerItemsInfoCommon.php");
            writeToFile(tigerItemInfoCfgString, fileOutput, "UTF-8");

            //种子机每期名称相关配置
            String[][] tigerItemPeriodTitleInfoCfg = parseXls(configFilePath, 2, false, true);
            for (int i = 1; i < tigerItemPeriodTitleInfoCfg.length; i++) {
                String lang = tigerItemPeriodTitleInfoCfg[i][0];
                File fileOutputLang = new File(outputPath + "/split_config/tigerPeriodTitle/" + lang + ".php");
                String fileOutputLangStr = "<?php\r\n$J7CONFIG['tigerPeriodTitle'] = array(\r\n";
                for (int j = 1; j < tigerItemPeriodTitleInfoCfg[i].length; j++) {
//                    System.out.println(tigerItemPeriodTitleInfoCfg[i][j] + "ggggg");
                    fileOutputLangStr += "    " + j + " => array(\r\n";
                    fileOutputLangStr += "        'displayTitle' => '" + tigerItemPeriodTitleInfoCfg[i][j] + "',\r\n";
                    fileOutputLangStr += "    ),\r\n";
                }
                fileOutputLangStr += ");\r\n";
                writeToFile(fileOutputLangStr, fileOutputLang, "UTF-8");

            }
        } catch (IOException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        } catch (BiffException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        }
    }

    /**
     * 游乐场老虎机
     *
     * @param configFilePath
     * @param func
     * @param outputPath
     */
    public void transformFlowerlandSpinConfig(String configFilePath, String func, String outputPath) {
        try {
            String[][] flowerlandSpinCfg = parseXls(configFilePath, 0, true);
            String flowerlandSpinCfgString = buildStringFromStringArray(func, 0, flowerlandSpinCfg);
            flowerlandSpinCfgString = "<?php\r\n" + flowerlandSpinCfgString;
            File fileOutput = new File(outputPath + "/split_config/flowerland_spin.php");
            writeToFile(flowerlandSpinCfgString, fileOutput, "UTF-8");

        } catch (IOException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        } catch (BiffException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        }
    }

    public void transformBundleingSaleConfig(String configFilePath, String func, String outputPath) {
        try {
            String[][] bigPackCfg = parseXls(configFilePath);
            String bigPackCfgString = buildStringFromStringArray(func, 0, bigPackCfg);
            bigPackCfgString = "<?php\r\n" + bigPackCfgString;
            File fileOutput = new File(outputPath + "/split_config/bundleingSale.php");
            writeToFile(bigPackCfgString, fileOutput, "UTF-8");

        } catch (IOException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        } catch (BiffException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        }
    }

    public void transformUpgradeBuildingConfig(String configFilePath, String func, String outputPath) {
        try {
            String[][] upgradeBuildingCfg = parseXls(configFilePath, 0, true);
            String upgradeBuildingCfgString = buildStringFromStringArray(func, 0, upgradeBuildingCfg);
            upgradeBuildingCfgString = "<?php\r\n" + upgradeBuildingCfgString;
            File fileOutput = new File(outputPath + "/upgradableBuilding/upgrading_conditions.php");
            writeToFile(upgradeBuildingCfgString, fileOutput, "UTF-8");

        } catch (IOException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        } catch (BiffException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        }
    }

    public void transformTotemConfig(String configFilePath, String func, String outputPath) {
        try {
            String[][] totemPlantCfg = parseXls(configFilePath, 0, true);
            String[][] totemOrnamentCfg = parseXls(configFilePath, 1, true);
            String totemPlantCfgString = buildStringFromStringArray(func, 0, totemPlantCfg);
            String totemOrnamentCfgString = buildStringFromStringArray(func, 1, totemOrnamentCfg);
            String totemPlantOtherInfoCfgString = "$J7CONFIG['TotemPlantOtherInfo'] = array(\r\n"
                    + "    'iType' => array(9, 12,), //图腾类植物所有iType\r\n"
                    + ");";
            String totemOrnamentOtherInfoCfgString = "$J7CONFIG['TotemOrnamentOtherInfo'] = array(\r\n"
                    + "    'iType' => array(39, 40,), //图腾装饰物所有iType\r\n"
                    + "    'defaultTimeInterval' => 24 * 60 * 60, //默认刷新生效次数时间间隔\r\n"
                    + ");";
            String finalTotemCfg = "<?php\r\n" + totemPlantCfgString
                    + "\r\n\r\n" + totemOrnamentCfgString
                    + "\r\n\r\n" + totemPlantOtherInfoCfgString
                    + "\r\n\r\n" + totemOrnamentOtherInfoCfgString;
            File fileOutput = new File(outputPath + "/TotemItem.php");
            writeToFile(finalTotemCfg, fileOutput, "UTF-8");

        } catch (IOException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        } catch (BiffException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        }
    }

    private void closejButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closejButtonMouseClicked
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_closejButtonMouseClicked

    private void settingjMenuItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_settingjMenuItemMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_settingjMenuItemMouseClicked

    private void totemjRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_totemjRadioButtonMouseClicked
        ChangeConfigFilejTextField();
    }//GEN-LAST:event_totemjRadioButtonMouseClicked

    private void upgradeBuildingjRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_upgradeBuildingjRadioButtonMouseClicked
        ChangeConfigFilejTextField();
    }//GEN-LAST:event_upgradeBuildingjRadioButtonMouseClicked

    private void bigPackjRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bigPackjRadioButtonMouseClicked
        ChangeConfigFilejTextField();
    }//GEN-LAST:event_bigPackjRadioButtonMouseClicked

    private void exchangejRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exchangejRadioButtonMouseClicked
        ChangeConfigFilejTextField();
    }//GEN-LAST:event_exchangejRadioButtonMouseClicked

    private void tigerItemInfojRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tigerItemInfojRadioButtonMouseClicked
        ChangeConfigFilejTextField();
    }//GEN-LAST:event_tigerItemInfojRadioButtonMouseClicked

    private void flowerlandSpinjRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_flowerlandSpinjRadioButtonMouseClicked
        ChangeConfigFilejTextField();
    }//GEN-LAST:event_flowerlandSpinjRadioButtonMouseClicked

    private void keyMappingjRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_keyMappingjRadioButtonMouseClicked
        ChangeConfigFilejTextField();
    }//GEN-LAST:event_keyMappingjRadioButtonMouseClicked

    private void adsGeneralizejRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_adsGeneralizejRadioButtonMouseClicked
        ChangeConfigFilejTextField();
    }//GEN-LAST:event_adsGeneralizejRadioButtonMouseClicked

    private void fsGeneralizejRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fsGeneralizejRadioButtonMouseClicked
        ChangeConfigFilejTextField();
    }//GEN-LAST:event_fsGeneralizejRadioButtonMouseClicked

    private void sapphireExchangejRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sapphireExchangejRadioButtonMouseClicked
        ChangeConfigFilejTextField();
    }//GEN-LAST:event_sapphireExchangejRadioButtonMouseClicked

    private void flowerCraftjRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_flowerCraftjRadioButtonMouseClicked
        ChangeConfigFilejTextField();
    }//GEN-LAST:event_flowerCraftjRadioButtonMouseClicked

    private void floralBenchUpgradejRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_floralBenchUpgradejRadioButtonMouseClicked
        ChangeConfigFilejTextField();
    }//GEN-LAST:event_floralBenchUpgradejRadioButtonMouseClicked

    private void unockFlowerCraftjRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_unockFlowerCraftjRadioButtonMouseClicked
        ChangeConfigFilejTextField();
    }//GEN-LAST:event_unockFlowerCraftjRadioButtonMouseClicked

    private void floralBenchGroupjRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_floralBenchGroupjRadioButtonMouseClicked
        ChangeConfigFilejTextField();
    }//GEN-LAST:event_floralBenchGroupjRadioButtonMouseClicked

    private void floralBenchGroupMakeListjRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_floralBenchGroupMakeListjRadioButtonMouseClicked
        ChangeConfigFilejTextField();
    }//GEN-LAST:event_floralBenchGroupMakeListjRadioButtonMouseClicked

    private void gardenExpandjRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gardenExpandjRadioButtonMouseClicked
        ChangeConfigFilejTextField();
    }//GEN-LAST:event_gardenExpandjRadioButtonMouseClicked

    private void itemExtendjRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemExtendjRadioButtonMouseClicked
        ChangeConfigFilejTextField();
    }//GEN-LAST:event_itemExtendjRadioButtonMouseClicked

    private void slotInfojRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_slotInfojRadioButtonMouseClicked
        ChangeConfigFilejTextField();
    }//GEN-LAST:event_slotInfojRadioButtonMouseClicked

    private void divinationInfojRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_divinationInfojRadioButtonMouseClicked
        ChangeConfigFilejTextField();
    }//GEN-LAST:event_divinationInfojRadioButtonMouseClicked

    private void divinationExchangeInfojRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_divinationExchangeInfojRadioButtonMouseClicked
        ChangeConfigFilejTextField();
    }//GEN-LAST:event_divinationExchangeInfojRadioButtonMouseClicked

    private void virtualCurrencyjRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_virtualCurrencyjRadioButtonMouseClicked
        ChangeConfigFilejTextField();
    }//GEN-LAST:event_virtualCurrencyjRadioButtonMouseClicked

    private void divinationCommonInfojRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_divinationCommonInfojRadioButtonMouseClicked
        ChangeConfigFilejTextField();
    }//GEN-LAST:event_divinationCommonInfojRadioButtonMouseClicked

    private void itemjRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemjRadioButtonMouseClicked
        ChangeConfigFilejTextField();
    }//GEN-LAST:event_itemjRadioButtonMouseClicked

    private void simplyTaskjRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_simplyTaskjRadioButtonMouseClicked
        ChangeConfigFilejTextField();
    }//GEN-LAST:event_simplyTaskjRadioButtonMouseClicked

    private void festivalActivityjRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_festivalActivityjRadioButtonMouseClicked
        ChangeConfigFilejTextField();
    }//GEN-LAST:event_festivalActivityjRadioButtonMouseClicked

    private void logPopContentjRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logPopContentjRadioButtonMouseClicked
        ChangeConfigFilejTextField();
    }//GEN-LAST:event_logPopContentjRadioButtonMouseClicked

    private void popWindowOptjRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_popWindowOptjRadioButtonMouseClicked
        ChangeConfigFilejTextField();
    }//GEN-LAST:event_popWindowOptjRadioButtonMouseClicked

    private void outputjButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_outputjButtonMouseClicked
        this.outputjTextFieldMouseClicked(evt);
    }//GEN-LAST:event_outputjButtonMouseClicked

    private void outputjTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_outputjTextFieldMouseClicked
        File f = new File(outputDirectory);
        JFileChooser jfc = new JFileChooser(f);
        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int result;
        result = jfc.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = jfc.getSelectedFile();
            outputjTextField.setText(file.getPath());
        }
    }//GEN-LAST:event_outputjTextFieldMouseClicked

    private void configFilejButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_configFilejButtonMouseClicked
        this.configFilejTextFieldMouseClicked(evt);
    }//GEN-LAST:event_configFilejButtonMouseClicked

    private void configFilejTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_configFilejTextFieldMouseClicked
        File f = new File(configBaseDir);
        JFileChooser jfc = new JFileChooser(f);
        //        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int result;
        result = jfc.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = jfc.getSelectedFile();
            configFilejTextField.setText(file.getPath());
        }
    }//GEN-LAST:event_configFilejTextFieldMouseClicked

    private void jRadioButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jRadioButton1MouseClicked
        ChangeConfigFilejTextField();
    }//GEN-LAST:event_jRadioButton1MouseClicked

    private void floralSculptureMakeListjRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_floralSculptureMakeListjRadioButtonMouseClicked
        ChangeConfigFilejTextField();
    }//GEN-LAST:event_floralSculptureMakeListjRadioButtonMouseClicked

    private void floralSculpturejRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_floralSculpturejRadioButtonMouseClicked
        ChangeConfigFilejTextField();
    }//GEN-LAST:event_floralSculpturejRadioButtonMouseClicked

    private void rewardMachinejRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rewardMachinejRadioButtonMouseClicked
        ChangeConfigFilejTextField();
    }//GEN-LAST:event_rewardMachinejRadioButtonMouseClicked

    private void floralSculptureCommonjRadioButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_floralSculptureCommonjRadioButton1MouseClicked
        ChangeConfigFilejTextField();
    }//GEN-LAST:event_floralSculptureCommonjRadioButton1MouseClicked

    private void ChangeConfigFilejTextField() {
        String key;
        if (funcbuttonGroup.getSelection() != null) {
            key = funcbuttonGroup.getSelection().getActionCommand();
            configFilejTextField.setText(configBaseDir + "/" + fileMapping.get(key));
        }
    }
    private final String[] totemItemModel = new String[]{"iId", "iExp", "iCash", "iOutputSize", "iTime", "iRate", "iLimit", "iCategory", "timeInterval"};
    private final String[] totemOrnamentModel = new String[]{"iId", "iExp", "iCash", "iOutputSize", "iTime", "iRate", "iLimit", "iCategory", "timeInterval"};
    private final String[] upgradeBuildingModel = new String[]{"", "nextLvItemId", "uGold", "jumpGold", "uCash", "unlock", "unitPrice", "times", "uLevel", "reputation", "currentLevel", "nextLevel", "needHelpedFriendCount", "skipHelpedFriendPrice", "requireItemId", "obtainType", "requireNum", "requireItemCash", "requireItemGold", "requireItemSkipable", "skipPriceCountMethod", "needDeductAfterSkipped"};
    private final String[] gardenExpandModel = new String[]{"iId", "uGold", "jumpGold", "uCash", "uSapphire", "expandInfo", "unlock", "unitPrice", "times", "jumpSapphireGold", "displayOrder", "uLevel", "requireItemId", "obtainType", "requireNum", "requireItemCash", "requireItemGold"};
    private final String[] floralBenchMakeListModel = new String[]{"group_id", "comingsoon", "theme", "flowerCraftId", "totalGold", "expendNutritionWater", "uStarLevel", "floralBenchLevel", "displayOrder", "isHiden", "requireItemId", "obtainType", "requireNum", "requireItemCash", "requireItemGold", "order"};
    private final String[] floralSculptureMakeListModel = new String[]{"group_id", "comingsoon", "theme", "floralSculptureId", "totalGold", "expendNutritionWater", "uStarLevel", "floralBenchLevel", "displayOrder", "isHiden", "requireItemId", "obtainType", "requireNum", "requireItemCash", "requireItemGold", "order"};
    private final String[] floralBenchUpgradeModel = new String[]{"", "nextLvItemId", "uGold", "uSapphire", "jumpSapphireGold", "uCash", "unlock", "unitPrice", "times", "uLevel", "requireItemId", "obtainType", "requireNum", "requireItemCash", "requireItemGold", "order"};
    private final String[] sapphireExchangeCommonModel = new String[]{"period", "itemId", "expendSapphireNumber", "exchangeNumber", "exchangeOrder"};
    private final String[] sapphireExchangeDisplayModel = new String[]{"period", "title", "description"};
    private final String[] flowerCraftModel = new String[]{"itemId", "maxStarLevel", "isUpdateUserTotalStarNum", "levelType", "extraSapphireNumber", "extraSapphireRate", "extraSapphireTips", "upgradeStarRule"};
    private final String[] floralBenchGroupModel = new String[]{"itemId", "group_id", "floral_bench_level", "upgrade_id"};
    private final String[] floralSculptureCommonModel = new String[]{"itemId", "extraCurrencyNumber", "extraCurrencyRate", "extraCurrencyTips", "currencyType"};
    private final String[] itemExtendModel = new String[]{"iId", "iCurrencyType", "iActivityStartTime", "iActivityEndTime", "iStartTime", "iEndTime", "iBelongsTo", "iNewStatusStartTime", "iNewStatusEndTime", "iExtraOutput", "iInteractionEndTime", "iIsFreeGiftStartTime", "iIsFreeGiftEndTime"};
    private final String[] floralSculptureConvertBottomModel = new String[]{"iId", "iCurrencyType", "iActivityStartTime", "iActivityEndTime", "iStartTime", "iEndTime", "iBelongsTo", "iNewStatusStartTime", "iNewStatusEndTime", "iExtraOutput", "iInteractionEndTime", "iIsFreeGiftStartTime", "iIsFreeGiftEndTime"};
    private final String[] rewardMachineModel = new String[]{"itemId", "number", "text_desc", "title", "tip", "ok_text"};
    private final String[] popWindowOptModel = new String[]{"", "id", "startTime", "endTime", "showDays", "loginTimes", "level", "itemId", "basePriority", "cutPriority", "firstLogin"};
    private final String[] flowerCraftDisplayModel = new String[]{"itemId", "description"};
    private final String[] activityExchangeModel = new String[]{"", "exchangeNum", "exchangeProLogTag", "exchangeNeedLog", "startTime", "endTime", "exchangeType", "uCash", "uExp", "requireItemId", "requireItemNumber"};
    private final String[] bundleingSaleModel = new String[]{"", "startTime", "endTime", "iOrder", "iCash", "itemId", "itemNumber"};
    private final String[] tigerItemInfoModel = new String[]{"period", "startTime", "endTime", "itemId", "weight", "number"};
    private final String[] keyMappingModel = new String[]{"", "", "start_time", "end_time", "need_log", "log_tag"};
    private final String[] divinationExchangeModel = new String[]{"id", "exhangeCountPerDay", "exhangeTimeInterval", "exchangableItemId", "requireNum", "rewardInfo"};

//    public String buildFinalBundleingSaleStringFromStringArrayx(String func, int sheetNum, String[][] content) {
//        int rows = content.length;
//        int cols = content[0].length;
//        String buildedContent = "";
//
//        return buildedContent;
//    }
    public String buildFinalCascadeAwardFromStringArray(String func, int sheetNum, String[][] cascadeAwardCfg) {
        String cascadeAwardCfgStr;
        int rowCount = cascadeAwardCfg.length;
        cascadeAwardCfgStr = "//******************************************************************************************************************\r\n"
                + "//金币返还相关配置\r\n"
                + "$J7CONFIG['cascadeAward'] = array(\r\n";
        String cascadeAwardCfgStrFormat = "    '%s' => array(\r\n"
                + "        'start_time'                 => strtotime('%s'), //开始时间\r\n"
                + "        'end_time'                   => strtotime('%s'), //结束时间\r\n"
                + "        'claim_award_start_time'     => strtotime('%s'), //领取奖励的开始时间\r\n"
                + "        'claim_award_end_time'       => strtotime('%s'), //领取奖励的结束时间\r\n"
                + "        'item_claim_award_condition' => array(%s), //PS 返回flash的时候 为一个数字 而不是一个数组\r\n"
                + "        'item_award'                 => array(%s), //果醬泡芙塔 奖励物品 PS 返回flash的时候 为一个数字 而不是一个数组\r\n"
                + "        'gold_claim_award_condition' => array(%s), //小熊先生餐車Lv5 PS 返回flash的时候 为一个数字 而不是一个数组\r\n"
                + "        'item_list'                  => '%s', //给flash的 方便他们做新手引导\r\n"
                + "        'cascade_activity_item_list' => '%s', //关联活动免费送的可升级的物品列表 给flash的 方便他们做新手引导\r\n"
                + "        'return_gold_rate'           => %s, //返还金块百分比\r\n"
                + "        'item_claim_award_key'       => '%s',\r\n"
                + "        'expended_gold_key'          => '%s',\r\n"
                + "        'gold_claim_award_key'       => '%s',\r\n"
                + "        'type'                       => '%s',//任务type 0：金币返还，1：party\r\n"
                + "    ),\r\n";

        String itemClaimAwardKey = "_icas";//
        String expendedGoldKey = "_egc";//
        String goldClaimAwardKey = "_gcas";//
        for (int row = 1; row < rowCount; row++) {
            String cascadeAwardName = cascadeAwardCfg[row][0];
            if (!cascadeAwardName.isEmpty()) {//不是空行
                String startTime = cascadeAwardCfg[row][1];
                String cascadeAwardNameShort = getInitials(cascadeAwardName) + "_" + getTimeString(timeStringTotimeStamp(startTime), "yyMMdd");    //妈蛋 java的是微妙  php的是秒数
                String endTime = cascadeAwardCfg[row][2];
                String claimAwardStartTime = cascadeAwardCfg[row][3];
                String claimAwardEndTime = cascadeAwardCfg[row][4];
                String itemClaimAwardCondition = cascadeAwardCfg[row][5];
                String itemAward = cascadeAwardCfg[row][6];
                String goldClaimAwardCondition = cascadeAwardCfg[row][7];
                String itemList = cascadeAwardCfg[row][8];
                String cascadeActivityItemList = cascadeAwardCfg[row][9];
                String returnGoldRate = cascadeAwardCfg[row][10];
                String type = cascadeAwardCfg[row][11];
                String currentItemClaimAwardKey = cascadeAwardNameShort + itemClaimAwardKey;
                String currentExpendedGoldKey = cascadeAwardNameShort + expendedGoldKey;
                String currentGoldClaimAwardKey = cascadeAwardNameShort + goldClaimAwardKey;

                cascadeAwardCfgStr += String.format(cascadeAwardCfgStrFormat, cascadeAwardName, startTime,
                        endTime, claimAwardStartTime, claimAwardEndTime, itemClaimAwardCondition, itemAward,
                        goldClaimAwardCondition, itemList, cascadeActivityItemList, returnGoldRate, currentItemClaimAwardKey, currentExpendedGoldKey, currentGoldClaimAwardKey, type);
            } else {//遇到一个空行直接返回了。。。
                break;
            }

        }
        cascadeAwardCfgStr += ");\r\n"
                + "//##################################################################################################################\r\n";
        return cascadeAwardCfgStr;
    }

    /**
     * 将时间字符串转换为时间戳
     *
     * @param timeString
     * @return
     */
    public static long timeStringTotimeStamp(String timeString) {
        return timeStringTotimeStamp(timeString, "yyyy-MM-dd HH:mm:ss");
    }

    /**
     * 将时间字符串转换为时间戳
     *
     * @param timeString
     * @param format
     * @return
     */
    public static long timeStringTotimeStamp(String timeString, String format) {
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(format);
        Date date;
        long timeStamp = 0;
        try {
            date = simpleDateFormat.parse(timeString);
            timeStamp = date.getTime();

        } catch (ParseException ex) {
            Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

        return timeStamp;
    }

    public static String getInitials(String s) {
        return getInitials(s, true);
    }

    public static String getInitials(String s, boolean withFirstLetter) {
        if (s == null) {
            return null;
        }
        StringBuilder sb = new StringBuilder(s.length());
        boolean upperCase = false;

        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c == '_') {
                upperCase = true;
            } else if (upperCase) {
                sb.append(Character.toUpperCase(c));
                upperCase = false;
            } else {
                sb.append(c);
            }
        }
        s = sb.toString();
        sb = new StringBuilder();

        if (withFirstLetter) {
//            System.out.println("s.charAt(0):" + s.charAt(0));
            sb.append(s.charAt(0));
        }

        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (Character.isUpperCase(c)) {
                sb.append(Character.toLowerCase(c));
            }
        }
        return sb.toString();
    }

    public String buildFinalFestivalActivityFromStringArray(String func, int sheetNum, String[][] festivalActivityCfg) {
        String festivalActivityCfgStr;
        int rowCount = festivalActivityCfg.length;
        festivalActivityCfgStr = "//##################################################################################################################\r\n"
                + "//节日活动\r\n"
                + "define ('USER_CASH', 4001);\r\n"
                + "define ('USER_GOLD', 4002);\r\n"
                + "define ('USER_EXP', 4003);\r\n"
                + "define ('MATERIAL_WITH_STORAGE', 4004);\r\n"
                + "define ('MATERIAL_WITHOUT_STORAGE', 4005);\r\n"
                + "$J7CONFIG['festivalActivity'] = array(\r\n";
        String festivalActivityCfgStrFormat = "    //@todo 只是掉多期%s =>        array(\r\n"
                + "                'condition'           => array(\r\n"
                + "                        'userMinLevel' => %s, //玩家最小等级\r\n"
                + "                        'startTime'    => strtotime('%s'), //活动开始时间\r\n"
                + "                        'endTime'      => strtotime('%s'), //结束开始时间\r\n"
                + "                ),\r\n"
                + "                'playMethod'          => array(\r\n"
                + "                        'scoreId' => %s, //积分id （隶属于某一个节日活动的物品id）\r\n"
                + "                        'items'   => array(\r\n"
                + "%s"
                + "                        ),\r\n"
                + "                        'output'  => '%s', //第一个为奖励ID，第二个为显示ID\r\n"
                + "                ),\r\n"
                + "            //兑换奖品掉落需要种植的花，这些花在收获的时候会掉落scoreId出配置的物品id，1的是低概率，2的是高概率\r\n"
                + "                'exchangeCascadeItem' => '%s',\r\n"
                + "        //@todo 只是掉多期),\r\n";
        String itemsStrFormat = "                                %s => array(\r\n"
                + "                                        'score'        => %s, //需要活动物品个数\r\n"
                + "                                        'currencyNum'  => %s, //购买所属的货币 数量\r\n"
                + "                                        'currencyType' => '%s', //购买货币类型\r\n"
                + "                                ),\r\n";
        for (int row = 1; row < rowCount; row++) {
            String period = festivalActivityCfg[row][0];
            if (!period.isEmpty()) {//不是空行
                String userMinLevel = festivalActivityCfg[row][1];
                String startTime = festivalActivityCfg[row][2];
                String endTime = festivalActivityCfg[row][3];
                String scoreId = festivalActivityCfg[row][4];
                String output = festivalActivityCfg[row][6];
                String exchangeCascadeItem = festivalActivityCfg[row][7];

                String items = festivalActivityCfg[row][5];
                String[] playMethodItemsArr = items.split(",");
                String playMethodItems = "";
                for (String playMethodItemsInfoStr : playMethodItemsArr) {
                    String[] playMethodSingleItemArr = playMethodItemsInfoStr.split("\\|");
                    playMethodItems += String.format(itemsStrFormat, playMethodSingleItemArr[0], playMethodSingleItemArr[1], playMethodSingleItemArr[2], playMethodSingleItemArr[3]);
                }

                festivalActivityCfgStr += String.format(festivalActivityCfgStrFormat, period, userMinLevel,
                        startTime, endTime, scoreId, playMethodItems, output, exchangeCascadeItem);
            } else {//遇到一个空行直接返回了。。。
                break;
            }

        }
        festivalActivityCfgStr += ");\r\n"
                + "//##################################################################################################################\r\n";
        return festivalActivityCfgStr;
    }

    public String buildFinalSimplyTaskSingleInfoStringFromStringArray(String func, int sheetNum, String[][] singleCfg) {
        String singleStr;
        String singleStrFormat = "	%s => array(\r\n"
                + "		'taskId' => %s,\r\n"
                + "		'type' => %s,\r\n"
                + "		'needLog' => %s,\r\n"
                + "		'needDeduct' => %s,\r\n"
                + "		'itemId' => '%s',\r\n"
                + "		'iconPath' => '%s',\r\n"
                + "		'itemType' => '%s',\r\n"
                + "		'number' => '%s',\r\n"
                + "		'jumpRate' => '%s',\r\n"
                + "		'skippable' => '%s',\r\n"
                + "		'go' => '%s',\r\n"
                + "		'goExtra' => '%s',\r\n"
                + "	),\r\n";
        singleStr = "<?php\r\n//##################################################################################################################\r\n"
                + "//简易任务 任务步骤 相关配置项项\r\n"
                + "$J7CONFIG['SimplyTaskSingle'] = array(\r\n";

        String taskId, type, needLog, needDeduct, itemId, iconPath, itemType, number, jumpRate, skippable, go, goExtra, singleId;

        int rowCount = singleCfg.length;
        for (int row = 1; row < rowCount; row++) {
            taskId = singleCfg[row][0];
            singleId = singleCfg[row][1];
            if (!taskId.isEmpty()) {
                type = singleCfg[row][2];
                itemId = singleCfg[row][3];
                itemType = singleCfg[row][4];
                number = singleCfg[row][5];
                jumpRate = singleCfg[row][6];
                skippable = singleCfg[row][7];
                iconPath = singleCfg[row][8];
                go = singleCfg[row][9];
                goExtra = singleCfg[row][10];
                /**
                 * type 相关描述 2000 提供物品（需要扣除） 2001 播種植物 2002 收割植物/收获花艺品 (不扣除)
                 * 2003 出售物品 2005 向好友獲取 （不需要记录log 但是需要扣除） 2006 订购物品 2007 發佈需求獲取
                 * (需要扣除) 2008 做志愿者 2010 提供蜡烛（需要扣除） 2011 喝 咖啡（不扣除） 2013 使用加速劑
                 * 30000 （不扣除） 2021 一键放花盆（不扣除） 2022 一鍵播種（不扣除）2027 某个花艺品升级到指定星级
                 * 2009 將特定物品放置花園 2012 升級底座 2014 一键播种 2015 一键播种 2016 一键收钱 2017
                 * 使用魔杖 2028 使用花雕勋章
                 */
                if (type.equals("2000") || type.equals("2005") || type.equals("2007") || type.equals("2010") || type.equals("2028")) {
                    needLog = "0";
                    needDeduct = "1";
                } else if (type.equals("2027")) {
                    needLog = "0";
                    needDeduct = "0";
                } else {
                    needLog = "1";
                    needDeduct = "0";
                }
                singleStr += String.format(singleStrFormat, singleId, taskId, getTypeStringByTypeId(type), needLog, needDeduct,
                        itemId, iconPath, itemType, number, jumpRate, skippable, go, goExtra);
            } else {
                break;
            }

        }
        singleStr += ");\r\n"
                + "//##################################################################################################################\r\n";
        return singleStr;
    }

    public static String getTypeStringByTypeId(String typeId) {
        Map<String, String> typeMap = getTypeMap();
        String typeStr = typeMap.get(typeId);
        if (null == typeStr) {
            typeStr = typeId;
        }
        return typeStr;
    }

    public static Map<String, String> getTypeMap() {
        Map<String, String> typeMap = new HashMap<String, String>();
        typeMap.put("1001", "staticConst::PER_LEVEL");//要求 等级 数字
        typeMap.put("1002", "staticConst::PRE_TASK");//前置任务
        typeMap.put("1007", "staticConst::PRE_ABTEST");//ABtest 分支要求
        typeMap.put("1008", "staticConst::TASK_START_TIME");//任务开始时间
        typeMap.put("1009", "staticConst::TASK_END_TIME");//任务结束时间
        typeMap.put("4001", "staticConst::REWARD_ITEM_WITHOUT_STORAGE");//不计库存
        typeMap.put("4002", "staticConst::REWARD_ITEM_WITH_STORAGE");//计库存
        typeMap.put("4003", "staticConst::REWARD_UGOLD");//奖励gold
        typeMap.put("4004", "staticConst::REWARD_UCASH");//奖励cash
        typeMap.put("4005", "staticConst::REWARD_UEXP");//奖励经验
        typeMap.put("4006", "staticConst::UNLOCK_COMMON_ITEM");//解锁一般物品
        typeMap.put("4007", "staticConst::UNLOCK_FLOWER_CRAFT");//解锁花艺物品
        typeMap.put("4008", "staticConst::UPGRADE_ITEM");//升级物品
        typeMap.put("4009", "staticConst::CONDITION_REWARD");//有条件的奖励
        typeMap.put("4013", "staticConst::CONDITION_REWARD_RELATIVE_START_TIME");//有条件的奖励 ——开始时间 (相对时间)
        typeMap.put("4011", "staticConst::CONDITION_REWARD_RELATIVE_END_TIME");//有条件的奖励 ——结束时间 (相对时间)
        typeMap.put("4012", "staticConst::BEING_VOLUNTEER");//有条件的奖励 ——结束时间 (按照配置项配置好的死的时间)
        typeMap.put("4010", "staticConst::CONDITION_REWARD_FIXED_START_TIME");//有条件的奖励 ——开始时间 (按照配置项配置好的死的时间)
        typeMap.put("4014", "staticConst::CONDITION_REWARD_FIXED_END_TIME");//有条件的奖励 ——结束时间 (按照配置项配置好的死的时间)
        typeMap.put("4012", "staticConst::CONDITION_REWARD_RELATIVE_TIME_INTERVAL");//有条件的奖励 ——时间间隔 (相对时间 时间间隔)

        typeMap.put("2000", "staticConst::SUPPLY_ITEM");//提供物品（需要扣除）
        typeMap.put("2001", "staticConst::SOW_PLANT");//播種植物
        typeMap.put("2002", "staticConst::REAP_PLANT");//解锁花艺物品
        typeMap.put("2003", "staticConst::SELL_ITEM");//出售物品
        typeMap.put("2005", "staticConst::OBTAIN_ITEM_FROM_FRIEND");//向好友獲取 （不需要记录log 但是需要扣除）
        typeMap.put("2006", "staticConst::ORDER_ITEM");//订购物品
        typeMap.put("2007", "staticConst::SEND_FEED_GET_ITEM");//發佈需求獲取 (需要扣除)
        typeMap.put("2008", "staticConst::BEING_VOLUNTEER");//做志愿者
        typeMap.put("2009", "staticConst::PLACE_DEPOT");//將特定物品放置花園
        typeMap.put("2010", "staticConst::MAKE_CANDLE");//提供蜡烛（需要扣除）
        typeMap.put("2011", "staticConst::DRINK_COFFE");//喝 咖啡（不扣除）
        typeMap.put("2012", "staticConst::UPGRADE_TOTEM");//升級底座（不扣除）
        typeMap.put("2013", "staticConst::USE_ITEM");//使用加速劑 30000 （不扣除）
        typeMap.put("2014", "staticConst::AKEY_SOWING");//一键播种 （不扣除）
        typeMap.put("2015", "staticConst::AKEY_FLOWER");//一键收花 （不扣除）
        typeMap.put("2016", "staticConst::AKEY_CASH");//一键收钱 （不扣除）
        typeMap.put("2017", "staticConst::USER_MAGIC");//使用魔棒 （不扣除）
        typeMap.put("2021", "staticConst::QUICK_PLACE_SLOT");//一键放花盆（不扣除）
        typeMap.put("2022", "staticConst::QUICK_SOW");//一键放花盆（不扣除）
        typeMap.put("2027", "staticConst::SINGLE_FLOWER_CRAFT_STAR_LEVEL");//某一个花艺品勋章数
        typeMap.put("2028", "staticConst::USER_MEDAL");//使用花雕勋章

        return typeMap;
    }

    public String buildFinalUpgradeItemSimplyTaskCommonInfoStringFromStringArray(String func, int sheetNum, String[][] simplyTaskCommonInfoCfg) {
        simplyTaskCommonInfoCfg = arrayPop(simplyTaskCommonInfoCfg);
        String SimplyTaskCommonInfoStr = "";
        String SimplyTaskCommonInfoStrFormat = "        %s => array(\r\n"
                + "                'aliasId' => %s,\r\n"
                + "                'rewards' => array(\r\n"
                + "                        array(\r\n"
                + "                                staticConst::UPGRADE_ITEM,\r\n"
                + "                                %s,//下一级物品ID\r\n"
                + "                                array(\r\n"
                + "                                        staticConst::CONDITION_REWARD_RELATIVE_TIME_INTERVAL,\r\n"
                + "                                        %s, //秒数\r\n"
                + "                                ),\r\n"
                + "                                array(\r\n"
                + "%s"
                + "                                ),\r\n"
                + "                        ),\r\n"
                + "%s"
                + "                ),\r\n"
                + "                'trigger'    => %s,\r\n"
                + "                'autoAccept' => %s,\r\n"
                + "        ),\r\n";

        int rowCount = simplyTaskCommonInfoCfg.length;
        for (int row = 0; row < rowCount; row++) {
            String simplyTaskId = simplyTaskCommonInfoCfg[row][0];
            String commonRewards = "";
            String limitedRewards = "";
            if (!simplyTaskId.isEmpty()) {
                String nextLevelItemId = simplyTaskCommonInfoCfg[row][1];
                String limitedRewardTimeInterval = simplyTaskCommonInfoCfg[row][2];
                String trigger = simplyTaskCommonInfoCfg[row][5];
                String autoAccept = simplyTaskCommonInfoCfg[row][6];

                String origonLimitedRewards = simplyTaskCommonInfoCfg[row][3];
                String origonCommonRewards = simplyTaskCommonInfoCfg[row][4];

                String[] tmpLimitedRewardInfoArr = origonLimitedRewards.split("\\|");
                for (String tmpSingleLimitedRewardInfoStr : tmpLimitedRewardInfoArr) {
                    String[] tmpSingleLimitedRewardInfoArr = tmpSingleLimitedRewardInfoStr.split(",");
                    tmpSingleLimitedRewardInfoArr[0] = getTypeStringByTypeId(tmpSingleLimitedRewardInfoArr[0]);
                    limitedRewards += "                                    array(" + stringJoin(tmpSingleLimitedRewardInfoArr, ", ") + "),\r\n";
                }

                String[] tmpCommonRewardInfoArr = origonCommonRewards.split("\\|");
                for (String tmpSingleCommonRewardInfoStr : tmpCommonRewardInfoArr) {
                    String[] tmpSingleCommonRewardInfoArr = tmpSingleCommonRewardInfoStr.split(",");
                    tmpSingleCommonRewardInfoArr[0] = getTypeStringByTypeId(tmpSingleCommonRewardInfoArr[0]);
                    commonRewards += "                        array(" + stringJoin(tmpSingleCommonRewardInfoArr, ", ") + "),\r\n";
                }

                SimplyTaskCommonInfoStr += String.format(SimplyTaskCommonInfoStrFormat, simplyTaskId,
                        simplyTaskId, nextLevelItemId, limitedRewardTimeInterval, limitedRewards, commonRewards, trigger, autoAccept);
            } else {//simplyTaskId为empty说明是空行，直接无视后面所有的内容（如果还有的话。。）
                break;
            }
        }
        return SimplyTaskCommonInfoStr;
    }

    public String stringJoin(String[] origon, String glue) {
        StringBuffer sb;
        sb = new StringBuffer();
        int origonLength = origon.length;
        for (int i = 0; i < origonLength; i++) {
            sb.append(origon[i]);
            if (i < origonLength - 1) {
                sb.append(glue);
            }
        }
        return sb.toString();
    }

    public String buildFinalSimplyTaskCommonInfoStringFromStringArray(String func, int sheetNum, String[][] simplyTaskCommonInfoCfg) {
        simplyTaskCommonInfoCfg = arrayPop(simplyTaskCommonInfoCfg);
        String SimplyTaskCommonInfoStr;
        String SimplyTaskCommonInfoStrFormat = "        %s => array(\r\n"
                + "                'aliasId'    => '%s',\r\n"
                + "                'rewards'    => array(\r\n"
                + "%s"
                + "                ),\r\n"
                + "                'trigger'    => '%s',\r\n"
                + "                'autoAccept' => %s,\r\n"
                + "        ),\r\n";
        SimplyTaskCommonInfoStr = "\r\n//##################################################################################################################\r\n"
                + "//简易任务\r\n"
                + "$J7CONFIG['SimplyTaskCommon'] = array(\r\n";
        String awardStrFormat = "                        array(\r\n"
                + "                                %s, //当前奖励类型\r\n"
                + "                                %s, //当前物品ID\r\n"
                + "                                %s, //下一级物品ID\r\n"
                + "                                array( //奖励条件\r\n"
                + "                                        %s"
                + "                                ),\r\n"
                + "                                array( //奖励\r\n"
                + "                                        %s"
                + "                                ),\r\n"
                + "                        ),\r\n";
        int rowCount = simplyTaskCommonInfoCfg.length;
        Map<String, String> typeMap = getTypeMap();
        for (int row = 0; row < rowCount; row++) {
            String simplyTaskId = simplyTaskCommonInfoCfg[row][0];
            String rewards = "";
            if (!simplyTaskId.isEmpty()) {
                String trigger = simplyTaskCommonInfoCfg[row][2];
                String autoAccept = simplyTaskCommonInfoCfg[row][3];

                String simplyTaskReward = simplyTaskCommonInfoCfg[row][1];
                String[] tmpRewardInfoArr = simplyTaskReward.split("\\|");
                for (String tmpRewardInfoArr1 : tmpRewardInfoArr) {
                    String[] tmpInfo = tmpRewardInfoArr1.split(",");
                    String type = tmpInfo[0];
                    if (!type.isEmpty()) {
                        if (type.equals("4008")) {//升级物品
                            //eg tmpInfo为 4008,4844,4845,4012:3*24*60*60@4001:2068:1 意思是将物品4844升级为4845，如果再3*24*60*60s内完成升级，还将额外送物品2068
                            String currentItemId = tmpInfo[1];//4844
                            String nextLvItemId = tmpInfo[2];//4845
                            String conditionInfo = tmpInfo[3];//4012:3*24*60*60@4001:2068:1
                            String[] conditionInfoArr = conditionInfo.split("@");//[4012:3*24*60*60, 4001:2068:1] 
                            String condition = conditionInfoArr[0];//4012:3*24*60*60
                            String conditionAwards = conditionInfoArr[1];//4001:2068:1
                            String[] conditionArr = condition.split(":");//[4012,3*24*60*60]
                            String[] conditionAwardsArr = conditionAwards.split(":");//[4001,2068,1]
                            String conditionStr = "";
                            String conditionAwardsStr = "";
                            conditionStr = "array(" + typeMap.get(conditionArr[0]) + ",";
                            for (int i = 1; i < conditionArr.length; i++) {
                                conditionStr += conditionArr[i] + ",";
                            }
                            conditionStr += "),\r\n";

                            conditionAwardsStr = "array(" + typeMap.get(conditionAwardsArr[0]) + ",";
                            for (int i = 1; i < conditionAwardsArr.length; i++) {
                                conditionAwardsStr += conditionAwardsArr[i] + ",";
                            }
                            conditionAwardsStr += "),\r\n";

                            rewards += String.format(awardStrFormat, type, currentItemId, nextLvItemId,
                                    conditionStr, conditionAwardsStr);
                        } else {//其他奖励 
                            rewards += "                        array(" + tmpRewardInfoArr1 + "),\r\n";
                        }
                    }
                }

                SimplyTaskCommonInfoStr += String.format(SimplyTaskCommonInfoStrFormat, simplyTaskId,
                        simplyTaskId, rewards, trigger, autoAccept);
            } else {//simplyTaskId为empty说明是空行，直接无视后面所有的内容（如果还有的话。。）
                break;
            }
        }
        return SimplyTaskCommonInfoStr;
    }

    public String buildFinalDivinationExchangeStringFromStringArray(String[][] content) {
        int rows = content.length;
        int cols = content[0].length < divinationExchangeModel.length ? content[0].length : divinationExchangeModel.length;
        String buildedContent = "<?php\r\n";
        int condition_offset = 3;

        buildedContent += "//******************************************************************************************************************\n"
                + "//占卜兑换相关配置\r\n";
        buildedContent += "$J7CONFIG['divinationExchangeInfo'] = array(\r\n";
        String tmpRewardInfo;
        String[] tmpRewardInfoArr;
        String[] tmpSingleRewardInfoArr;
        for (int rowNum = 0; rowNum < rows; rowNum++) {
            String firstContent = content[rowNum][0];
            int startCol = 0;
            int endCol = cols;
            if (!firstContent.isEmpty()) {//条件
                endCol = condition_offset;
                if (rowNum != 0) {
                    buildedContent += "    ),\r\n";
                }

                buildedContent += "    '" + content[rowNum][0] + "' => array(\r\n";
            } else {
                startCol = condition_offset;
                buildedContent += "        '" + content[rowNum][condition_offset] + "' => array(\r\n";
            }

            for (int colNum = startCol; colNum < endCol; colNum++) {
                if (0 == colNum) {
                } else if (cols == colNum) {
                    buildedContent += "        ),\r\n";
                } else {
                    if ("rewardInfo".equals(divinationExchangeModel[colNum])) {
                        tmpRewardInfoArr = content[rowNum][colNum].split("\\|");
                        tmpRewardInfo = "";
                        for (String tmpRewardInfoArr1 : tmpRewardInfoArr) {
                            tmpSingleRewardInfoArr = tmpRewardInfoArr1.split("=>");
                            tmpRewardInfo += "            '" + tmpSingleRewardInfoArr[0] + "' => '" + tmpSingleRewardInfoArr[1] + "',\r\n";
                        }
                        buildedContent += tmpRewardInfo;
                    } else {
                        if (!"exchangableItemId".equals(divinationExchangeModel[colNum])) {
                            if (firstContent.isEmpty()) {
                                buildedContent += "            '" + divinationExchangeModel[colNum] + "' => '" + content[rowNum][colNum] + "',\r\n";
                            } else {
                                buildedContent += "        '" + divinationExchangeModel[colNum] + "' => '" + content[rowNum][colNum] + "',\r\n";
                            }
                        }

                    }

                }
            }
            if (firstContent.isEmpty()) {
                buildedContent += "        ),\r\n";
            }

            if (rowNum == rows - 1) {
                buildedContent += "    ),\r\n";
            }
        }
        buildedContent += ");";
        return buildedContent;
    }

    public String buildFinalVirtualCurrencyStringFromStringArray(String[][] commonCfg) {
        String virtualCurrencyStr;
        String virtualCurrencyFormat = "    '%s' => '%s', //%s\r\n";
        virtualCurrencyStr = "<?php\r\n//##################################################################################################################\r\n"
                + "//虚拟货币相关配置项\r\n"
                + "$J7CONFIG['virtualCurrency'] = array(\r\n";

        int rowCount = commonCfg.length;
        for (int row = 0; row < rowCount; row++) {
            virtualCurrencyStr += String.format(virtualCurrencyFormat, commonCfg[row][0], commonCfg[row][1], commonCfg[row][2]);
        }
        virtualCurrencyStr += ");\r\n"
                + "//##################################################################################################################\r\n";
        return virtualCurrencyStr;
    }

    public String buildFinalConvertMedalStringFromStringArray(String[][] commonCfg) {
        String commonContentStr;
        String commonContentStrFormat = "    %s => array(\r\n"
                + "        'startTime' => strtotime('%s'),\r\n"
                + "        'endTime' => strtotime('%s'),\r\n"
                + "        'level' => '%s',\r\n"
                + "        'taskId' => '%s',\r\n"
                + "        'awardId' => '%s',\r\n"
                + "    ),\r\n";
        commonContentStr = "<?php\r\n//##################################################################################################################\r\n"
                + "//勋章兑换任务配置\r\n"
                + "$J7CONFIG['convertMedal'] = array(\r\n";

        int rowCount = commonCfg.length;
        for (int row = 1; row < rowCount; row++) {
            commonContentStr += String.format(commonContentStrFormat, commonCfg[row][0],
                    commonCfg[row][1], commonCfg[row][2], commonCfg[row][3], commonCfg[row][4],
                    commonCfg[row][5]);
        }
        commonContentStr += ");\r\n"
                + "//##################################################################################################################\r\n";
        return commonContentStr;
    }

    public String buildFinalDivinationCommonInfoStringFromStringArray(String[][] commonCfg) {
        String commonContentStr;
        String commonContentStrFormat = "    %s => array(\n"
                + "        'id'                                 => '%s',\n"
                + "        'startTime'                          => strtotime('%s'),\n"
                + "        'endTime'                            => strtotime('%s'),\n"
                + "        'currencyType'                       => '%s',//需要与virtualCurrency对应\n"
                + "        'divinationExpandCurrencyNumPerTime' => '%s', //一次占卜需要花费的货币数量\n"
                + "        'needPopWindowAfterLogin'            => '%s', //玩家登陆后是否需要弹窗 0：不弹, 1：弹\n"
                + "        'userMinLevel'                       => '%s', //最小等级\n"
                + "    ),\r\n";
        commonContentStr = "<?php\r\n//##################################################################################################################\r\n"
                + "//占卜相关语言项\r\n"
                + "$J7CONFIG['divinationCommonInfo'] = array(\r\n";

        int rowCount = commonCfg.length;
        for (int row = 0; row < rowCount; row++) {
            commonContentStr += String.format(commonContentStrFormat, commonCfg[row][0],
                    commonCfg[row][0], commonCfg[row][1], commonCfg[row][2], commonCfg[row][3],
                    commonCfg[row][4], commonCfg[row][5], commonCfg[row][6]);
        }
        commonContentStr += ");\r\n"
                + "//##################################################################################################################\r\n";
        return commonContentStr;
    }

    public String[][] getStringArrayByIndex(String[][] content, int[] arrayIndex) {
        int rowCount = content.length;
        int colCount = content[0].length;
        String[][] stringArray = new String[rowCount][arrayIndex.length];
        int arrayIndexValue;
        int j = 0, row, column, arrayIndexLength = arrayIndex.length;
        for (row = 0; row < rowCount; row++) {
            for (column = 0; column < arrayIndexLength; column++) {
                arrayIndexValue = arrayIndex[column];
                stringArray[row][column] = content[row][arrayIndexValue];
            }
        }

        String[][] finalStringArray = new String[j][colCount];
        System.arraycopy(stringArray, 0, finalStringArray, 0, j);
        return finalStringArray;
    }

    public String[][] getStringArrayByField(String[][] content, String value, int index) {
        int rowCount = content.length;
        int colCount = content[0].length;
        String[][] stringArray = new String[rowCount][colCount];
        int j = 0, row, startRow = -1, endRow = -1;

        for (row = 0; row < rowCount; row++) {
            String indexValue = content[row][index];
            if (indexValue.equals(value)) {
                if (startRow == -1) {
                    startRow = row;
                }
                endRow = row;
                stringArray[j++] = content[row];
            }
        }
        String[][] finalStringArray = new String[j][colCount];
        System.arraycopy(stringArray, 0, finalStringArray, 0, j);
        return finalStringArray;
    }

    public String buildFinalSlotGroupConditionStringFromStringArray(String[][] content) {
        String slotGroupConditionStr = "                'conditions' => array(\r\n";

        int rows = content.length;
        for (int row = 0; row < rows; row++) {
            slotGroupConditionStr += buildFinalSlotGroupSingleConditionInfoStringFromStringArray(content[row], row);
        }

        slotGroupConditionStr += "                ),\r\n";
        return slotGroupConditionStr;
    }

    public String buildFinalSlotGroupInfoStringFromStringArray(String[][] groupContent, String[][] groupConditionContent) {
        String slotGroup = "        'group'     => array(\r\n";

        int rows = groupContent.length;
        for (int row = 0; row < rows; row++) {
            String[] currentContent = groupContent[row];
            String currentGroup = currentContent[1];
            slotGroup += "            " + currentContent[1] + " => array(\r\n"
                    + "                'id'         => '" + currentContent[0] + "',\r\n"
                    + "                'groupId'    => '" + currentContent[1] + "',\r\n";
            String[][] currentGroupConditionContent = getStringArrayByField(groupConditionContent, currentGroup, 1);
            slotGroup += buildFinalSlotGroupConditionStringFromStringArray(currentGroupConditionContent);
            slotGroup += "                'reward_id'  => '" + currentContent[2] + "',\r\n"
                    + "                'reward_num' => '" + currentContent[3] + "',\r\n"
                    + "                'index'      => '" + currentContent[4] + "',\r\n"
                    + "            ),\r\n";
        }
        slotGroup += "        ),\r\n";

        return slotGroup;
    }

    public String buildFinalSlotGroupSingleConditionInfoStringFromStringArray(String[] content, int index) {
        String groupConditionStrFormat = "                    %d => array(\r\n"
                + "                        'groupId' => '%s',\r\n"
                + "                        'item_id' => '%s',\r\n"
                + "                        'num'     => '%s',\r\n"
                + "                        'index'   => '%s',\r\n"
                + "                    ),\r\n";

        String groupCondition = "";
        int rowCount = content.length;
        groupCondition += String.format(groupConditionStrFormat, index, content[1], content[2], content[3], content[4]);
        return groupCondition;
    }

    public String buildFinalSlotLotteryInfoStringFromStringArray(String[][] lotteryCfg, String slotId) {
        String lotteryStr;
        String lotteryStrFormat = "            %d  => array(\r\n"
                + "                'id'      => '%s',\r\n"
                + "                'item_id' => '%s',\r\n"
                + "                'num'     => '%s',\r\n"
                + "                'index'   => '%s',\r\n"
                + "            ),\r\n";
        lotteryStr = "        'lottery'   => array(\r\n";

        int rowCount = lotteryCfg.length;
        for (int row = 0; row < rowCount; row++) {
            lotteryStr += String.format(lotteryStrFormat, row, slotId, lotteryCfg[row][1], lotteryCfg[row][2], lotteryCfg[row][3]);
        }
        lotteryStr += "        ),\r\n";
        return lotteryStr;
    }

    public String buildFinalDivinationKeyInfoStringFromStringArray(String[][] content, String key) {
        String currentKeyIndex = "        '" + key + "' => array(\r\n";
        int rows = content.length;
        String keyStrFormat = "            %d  => array(\r\n"
                + "                'id'      => '%s',\r\n"
                + "                'item_id' => '%s',\r\n"
                + "                'num'     => '%s',\r\n"
                + "                'index'   => '%s',\r\n"
                + "            ),\r\n";
        for (int row = 0; row < rows; row++) {
            currentKeyIndex += String.format(keyStrFormat, row, content[row][0], content[row][1], content[row][2], content[row][3]);
        }
        currentKeyIndex += "        ),\r\n";
        return currentKeyIndex;
    }

    public String buildFinalSimplyTaskSingleInfoStringFromStringArray(String[][] content, String key) {
        String currentKeyIndex = "        '" + key + "' => array(\r\n";
        int rows = content.length;
        String keyStrFormat = "            %d  => array(\r\n"
                + "                'id'      => '%s',\r\n"
                + "                'item_id' => '%s',\r\n"
                + "                'num'     => '%s',\r\n"
                + "                'groupId' => '%s',\r\n"
                + "                'index'   => '%s',\r\n"
                + "            ),\r\n";
        for (int row = 0; row < rows; row++) {
            currentKeyIndex += String.format(keyStrFormat, row, content[row][0], content[row][1], content[row][2], content[row][3], content[row][4]);
        }
        currentKeyIndex += "        ),\r\n";
        return currentKeyIndex;
    }

    public String buildFinalSlotKeyInfoStringFromStringArray(String[][] content, String key) {
        String currentKeyIndex = "        '" + key + "' => array(\r\n";
        int rows = content.length;
        String keyStrFormat = "            %d  => array(\r\n"
                + "                'id'      => '%s',\r\n"
                + "                'item_id' => '%s',\r\n"
                + "                'num'     => '%s',\r\n"
                + "                'groupId' => '%s',\r\n"
                + "                'index'   => '%s',\r\n"
                + "            ),\r\n";
        for (int row = 0; row < rows; row++) {
            currentKeyIndex += String.format(keyStrFormat, row, content[row][0], content[row][1], content[row][2], content[row][3], content[row][4]);
        }
        currentKeyIndex += "        ),\r\n";
        return currentKeyIndex;
    }

    public String buildFinalSlotKeyIndexInfoStringFromStringArray(String[] SlotInfo, String key, int index) {
        String[] currentKeyIndexArr = SlotInfo[index].split("\\|");//使用String.split("|")是不正确的。。。
        String currentKeyIndex = "        '" + key + "' => array(\r\n";
        int rows = currentKeyIndexArr.length;
        for (int row = 0; row < rows; row++) {
            currentKeyIndex += "            " + row + " => '" + currentKeyIndexArr[row] + "',\r\n";
        }
        currentKeyIndex += "        ),\r\n";
        return currentKeyIndex;
    }

    public String buildFinalDivinationDisplayInfoStringFromStringArray(String[][] lotteryCfg) {
        String displayContentStr;
        String displayContentStrFormat = "    %s => array(\r\n"
                + "        'popWindowTitle'                       => '%s',\r\n"
                + "        'popWindowDescription'                 => '%s',\r\n"
                + "        'divinationTitle'                      => '%s',\r\n"
                + "        'divinationDescription'                => '%s',\r\n"
                + "        'divinationCountdownLabel'             => '%s',\r\n"
                + "        'divinationTotalCurrencyLabel'         => '%s',\r\n"
                + "        'divinationTotalGetCurrencyLabel'      => '%s',\r\n"
                + "        'divinationActionLabel'                => '%s',\r\n"
                + "        'divinationTips'                       => '%s',\r\n"
                + "        'divinationExchangeTitle'              => '%s',\r\n"
                + "        'divinationExchangeTotalCurrencyLabel' => '%s',\r\n"
                + "        'divinationExchangeDescription'        => '%s',\r\n"
                + "        'divinationExchangeCountdownLabel'     => '%s',\r\n"
                + "        'divinationExchangeExhangeCountPerDay' => '%s',\r\n"
                + "        'divinationExchangeExhangeResult'      => '%s',\r\n"
                + "        'divinationExchangeAction'             => '%s',\r\n"
                + "        'divinationExchangeTips'               => '%s',\r\n"
                + "        'divinationExchangeGoBack'             => '%s',\r\n"
                + "        'divinationClickTips'                  => '%s',\r\n"
                + "        'divinationExchangeGO'                 => '%s',\r\n"
                + "        'divinationNoSelectCraftTips'          => '%s',\r\n"
                + "        'divinationScoreReachMaxTips'          => '%s',\r\n"
                + "        'divinationScoreNotEnoughTips'         => '%s',\r\n"
                + "    ),\r\n";
        displayContentStr = "<?php\r\n//##################################################################################################################\r\n"
                + "//占卜相关语言项\r\n"
                + "$J7CONFIG['divinationDisplayInfo'] = array(\r\n";

        int rowCount = lotteryCfg.length;
        for (int row = 0; row < rowCount; row++) {
            displayContentStr += String.format(displayContentStrFormat, lotteryCfg[row][0], lotteryCfg[row][1],
                    lotteryCfg[row][2], lotteryCfg[row][3], lotteryCfg[row][4], lotteryCfg[row][5],
                    lotteryCfg[row][6], lotteryCfg[row][7], lotteryCfg[row][8], lotteryCfg[row][9],
                    lotteryCfg[row][10], lotteryCfg[row][11], lotteryCfg[row][12], lotteryCfg[row][13],
                    lotteryCfg[row][14], lotteryCfg[row][15], lotteryCfg[row][16], lotteryCfg[row][17],
                    lotteryCfg[row][18], lotteryCfg[row][19], lotteryCfg[row][20], lotteryCfg[row][21], lotteryCfg[row][22], lotteryCfg[row][23]);
        }
        displayContentStr += ");\r\n"
                + "\r\n"
                + "//##################################################################################################################\r\n";
        return displayContentStr;
    }

    public String buildFinalFestivalDisplayInfoStringFromStringArray(String[][] festivalActivityLangCfg) {
        String displayContentStr;
        String displayContentStrFormat = "//@todo 屏蔽多期    %s => array(\r\n"
                + "        'activityTitle'                       => '%s',\r\n"
                + "        'clickTips'                 => '%s',\r\n"
                + "        'materialTips'                      => array(%s),\r\n"
                + "        'guide'                      => array("
                + "\r\n%s"
                + "        ),\r\n"
                + "        'share'                => array(\r\n"
                + "            'title' => '%s',\r\n"
                + "            'desc' => '%s',\r\n"
                + "            'actionName' => '%s',\r\n"
                + "        ),\r\n"
                + "        'exchange'                => array(\r\n"
                + "            'title' => '%s',\r\n"
                + "            'desc' => '%s',\r\n"
                + "            'tips' => '%s',\r\n"
                + "            'actionName'=>'%s',\r\n"
                + "            'feedActionName'=>'%s',\r\n"
                + "            'drawFinalRewardActionName'=>'%s'\r\n"
                + "        ),\r\n"
                + "    //@todo暂时屏蔽多期),\r\n";
        displayContentStr = "<?php\r\n/**\r\n"
                + " * upload    : \r\n"
                + " * uploadFileName    : 节日活动\r\n"
                + " * generate At: " + getCurrentTimeString() + "\r\n"
                + " */\r\n"
                + "$J7CONFIG['festivalActivityLang'] = array(\r\n";
        int rowCount = festivalActivityLangCfg.length;
        int colCount = festivalActivityLangCfg[0].length;

        for (int row = 0; row < rowCount; row++) {
            String guideStr = "";
            int guideCount = 0;
            String materialTipsStr = "";
            String[] materialTipsArr = festivalActivityLangCfg[row][3].split("\\|");

            for (String tmpMaterialTipsStr : materialTipsArr) {
                String[] tmpSingleMaterialTipsArr = tmpMaterialTipsStr.split("\\:");
                if (tmpSingleMaterialTipsArr.length == 2) {
                    materialTipsStr += " " + tmpSingleMaterialTipsArr[0] + " => '" + tmpSingleMaterialTipsArr[1] + "', ";
                }
            }

            String guideStrFormat = "            %s => array( //第%d步\r\n"
                    + "                'guideTitle'      => '%s', //活动名称\r\n"
                    + "                'guideDesc'       => '%s', //活动描述\r\n"
                    + "                'guideActionName' => '%s', //活动按钮名称\r\n"
                    + "            ),\r\n";
            for (int col = 13; col < colCount; col += 3) {
                guideStr += String.format(guideStrFormat, guideCount++, guideCount, festivalActivityLangCfg[row][col], festivalActivityLangCfg[row][col + 1], festivalActivityLangCfg[row][col + 2]);
            }

            displayContentStr += String.format(displayContentStrFormat, festivalActivityLangCfg[row][0], festivalActivityLangCfg[row][1], festivalActivityLangCfg[row][2],
                    materialTipsStr, guideStr, festivalActivityLangCfg[row][4], festivalActivityLangCfg[row][5], festivalActivityLangCfg[row][6],
                    festivalActivityLangCfg[row][7], festivalActivityLangCfg[row][8], festivalActivityLangCfg[row][9], festivalActivityLangCfg[row][10],
                    festivalActivityLangCfg[row][11], festivalActivityLangCfg[row][12]);
        }
        displayContentStr += ");\r\n"
                + "\r\n"
                + "//##################################################################################################################\r\n";
        return displayContentStr;
    }

    public String buildFinalDivinationLotteryInfoStringFromStringArray(String[][] lotteryCfg, String divinationId) {
        String lotteryStr;
        String lotteryStrFormat = "            %d  => array(\r\n"
                + "                'id'      => '%s',\r\n"
                + "                'item_id' => '%s',\r\n"
                + "                'num'     => '%s',\r\n"
                + "                'index'   => '%s',\r\n"
                + "                'color'   => '%s',\r\n"
                + "            ),\r\n";
        lotteryStr = "        'lottery'   => array(\r\n";

        int rowCount = lotteryCfg.length;
        for (int row = 0; row < rowCount; row++) {
            lotteryStr += String.format(lotteryStrFormat, row, divinationId, lotteryCfg[row][1], lotteryCfg[row][2], lotteryCfg[row][3], lotteryCfg[row][4]);
        }
        lotteryStr += "        ),\r\n";
        return lotteryStr;
    }

    public String buildFinalSimplyTaskDisplayInfoStringFromStringArray(String[][] lotteryCfg) {
        //@#####################################
        int rowCount = lotteryCfg.length;
        String latestTaskId = "";
        String simplyTaskDisplayInfoStr = "<?php\r\n"
                + "$J7CONFIG['SimplyTaskLang'] = array(\r\n";
        String singleDisplayInfoFormat = "	'single_%s' => '%s',\r\n";
        String taksTitleDisplayInfoFormat = "	'task_title_%s' => '%s',\r\n";
        String taksDescDisplayInfoFormat = "	'task_desc_%s' => '%s',\r\n";
        String taksBtnNameDisplayInfoFormat = "	'task_btnName_%s' => '%s',\r\n";
        for (int row = 0; row < rowCount; row++) {
            String taskId = lotteryCfg[row][0];
            if (!taskId.isEmpty()) {
                if (!taskId.equals(latestTaskId)) {
                    String taskTitle = lotteryCfg[row][2];
                    simplyTaskDisplayInfoStr += String.format(taksTitleDisplayInfoFormat, taskId, taskTitle);
                    String taskDesc = lotteryCfg[row][3];
                    simplyTaskDisplayInfoStr += String.format(taksDescDisplayInfoFormat, taskId, taskDesc);
                    String taskBtnName = lotteryCfg[row][5];
                    simplyTaskDisplayInfoStr += String.format(taksBtnNameDisplayInfoFormat, taskId, taskBtnName);
                    latestTaskId = taskId;
                }
                String singleId = lotteryCfg[row][1];
                String singleDesc = lotteryCfg[row][4];
                simplyTaskDisplayInfoStr += String.format(singleDisplayInfoFormat, singleId, singleDesc);
            } else {
                break;
            }
        }
        simplyTaskDisplayInfoStr += ");";
        return simplyTaskDisplayInfoStr;

    }

    /**
     * 金币返还 展示
     *
     * @param cascadeAwardCfg
     * @return
     */
    public String buildFinalCascadeAwardDisplayInfoStringFromStringArray(String[][] cascadeAwardCfg) {
        String cascadeAwardStr = "<?php\r\n//##################################################################################################################\r\n"
                + "$ret  = J7Config::instance()->get('commonCascadeAward', 'split_config/cascadeAward.php');\r\n"
                + "$lang = array(\r\n";
        String cascadeAwardStrFormat = "    '%s' => array(\r\n"
                + "        'title'       => '%s', //\r\n"
                + "        'itemexplain' => '%s', //\r\n"
                + "        'gold'        => '%s',//\r\n"
                + "        'tip'         => '%s',//\r\n"
                + "        'goTips'      => '%s',//\r\n"
                + "        'itemTips'    => '%s',//\r\n"
                + "        'item'    => '%s',//\r\n"
                + "    ),\r\n";

        int rowCount = cascadeAwardCfg.length;
        for (int row = 0; row < rowCount; row++) {
            String cascadeAwardName = cascadeAwardCfg[row][0];
            if (!cascadeAwardName.isEmpty()) {
                cascadeAwardStr += String.format(cascadeAwardStrFormat, cascadeAwardCfg[row][0], cascadeAwardCfg[row][1], cascadeAwardCfg[row][2],
                        cascadeAwardCfg[row][3], cascadeAwardCfg[row][4], cascadeAwardCfg[row][5], cascadeAwardCfg[row][6], cascadeAwardCfg[row][7]);
            } else {
                break;
            }

        }
        cascadeAwardStr += ");\r\n"
                + "foreach ($ret as $cascade_award_name => $info) {\r\n"
                + "    if (isset($lang[$cascade_award_name])) {\r\n"
                + "        $ret[$cascade_award_name]['content'] = $lang[$cascade_award_name];\r\n"
                + "    } else {\r\n"
                + "        $ret[$cascade_award_name]['content'] = array();\r\n"
                + "    }\r\n"
                + "}\r\n"
                + "\r\n"
                + "\r\n"
                + "$J7CONFIG['cascadeAward'] = $ret;\r\n"
                + "//##################################################################################################################";
        return cascadeAwardStr;
    }

    /**
     *
     * @param divinationCommonCfg
     * @param divinationLotteryCfg
     * @param divinationInfoCfg
     * @return
     */
    public String buildFinalDivinationInfoStringFromStringArray(String[][] divinationCashCfg, String[][] divinationLotteryCfg, String[][] divinationInfoCfg) {
        String buildedContent = "";
        buildedContent += "<?php\r\n"
                + "$J7CONFIG['divinationInfo'] = array(\r\n";

        int divinationPeriod = divinationInfoCfg.length;
        for (int i = 0; i < divinationPeriod; i++) {
            String[] currentDivinationPeriod = divinationInfoCfg[i];
            String divinationId = currentDivinationPeriod[0];
            String[][] currentDivinationCashCfg = getStringArrayByField(divinationCashCfg, divinationId, 0);
            String[][] currentDivinationLotteryCfg = getStringArrayByField(divinationLotteryCfg, divinationId, 0);
            String currentLotteryStr = buildFinalDivinationLotteryInfoStringFromStringArray(currentDivinationLotteryCfg, divinationId);
            String currentCashIndexStr = buildFinalSlotKeyIndexInfoStringFromStringArray(currentDivinationPeriod, "cashIndex", 5);
            String currentCashStr = buildFinalDivinationKeyInfoStringFromStringArray(currentDivinationCashCfg, "cash");
            buildedContent += "    " + divinationId + " => array(\r\n"
                    + "        'id'        => '" + divinationId + "',\r\n"
                    + "        'startTime'        => strtotime('" + currentDivinationPeriod[1] + "'),\r\n"
                    + "        'endTime'   => strtotime('" + currentDivinationPeriod[2] + "'),\r\n";
            buildedContent += currentCashStr + currentLotteryStr + currentCashIndexStr;
            buildedContent += "    ),\r\n";
        }

        buildedContent += ");";
        return buildedContent;
    }

    public static String getCurrentTimeString() {
        return getCurrentTimeString("yyyy/MM/dd HH:mm:ss");
    }

    public static String getCurrentTimeString(String format) {
        String currentTimeString = "";
        SimpleDateFormat dateFormat = new SimpleDateFormat(format);//可以方便地修改日期格式 
        Date now = new Date();
        currentTimeString = dateFormat.format(now);
        return currentTimeString;
    }

    public static String getTimeString(long nowTimeStamp, String format) {
        String currentTimeString = "";
        SimpleDateFormat dateFormat = new SimpleDateFormat(format);//可以方便地修改日期格式 
        Date now = new Date(nowTimeStamp);
        currentTimeString = dateFormat.format(now);
        return currentTimeString;
    }

    public String buildFinalSlotInfoStringFromStringArray(String[][] slotCashCfg, String[][] slotFreeCfg, String[][] slotGroupCfg, String[][] slotLotteryCfg, String[][] slotInfoCfg, String[][] slotGroupConditionCfg, int freeIndexIndex, int cashIndexIndex) {
        String buildedContent = "";
        buildedContent += "<?php\r\n"
                + "$J7CONFIG['slotInfo'] = array(\r\n";

        int slotPeriod = slotInfoCfg.length;
        for (int i = 0; i < slotPeriod; i++) {
            String[] currentSlotPeriod = slotInfoCfg[i];
            String slotId = currentSlotPeriod[0];
            String[][] currentSlotCashCfg = getStringArrayByField(slotCashCfg, slotId, 0);
            String[][] currentSlotFreeCfg = getStringArrayByField(slotFreeCfg, slotId, 0);
            String[][] currentSlotGroupCfg = getStringArrayByField(slotGroupCfg, slotId, 0);
            String[][] currentSlotLotteryCfg = getStringArrayByField(slotLotteryCfg, slotId, 0);
            String[][] currentSlotGroupConditionCfg = getStringArrayByField(slotGroupConditionCfg, slotId, 0);
            String currentLotteryStr = buildFinalSlotLotteryInfoStringFromStringArray(currentSlotLotteryCfg, slotId);
            String currentFreeIndexStr = buildFinalSlotKeyIndexInfoStringFromStringArray(currentSlotPeriod, "freeIndex", freeIndexIndex);
            String currentCashIndexStr = buildFinalSlotKeyIndexInfoStringFromStringArray(currentSlotPeriod, "cashIndex", cashIndexIndex);
            String currentFreeStr = buildFinalSlotKeyInfoStringFromStringArray(currentSlotFreeCfg, "free");
            String currentCashStr = buildFinalSlotKeyInfoStringFromStringArray(currentSlotCashCfg, "cash");
            String currentGroupStr = buildFinalSlotGroupInfoStringFromStringArray(currentSlotGroupCfg, currentSlotGroupConditionCfg);
            buildedContent += "    " + slotId + " => array(\r\n"
                    + "        'id'        => '" + slotId + "',\r\n"
                    + "        'startTime'   => strtotime('" + currentSlotPeriod[1] + "'),\r\n"
                    + "        'endTime'   => strtotime('" + currentSlotPeriod[2] + "'),\r\n";
            buildedContent += currentGroupStr + currentFreeStr + currentCashStr + currentLotteryStr + currentFreeIndexStr + currentCashIndexStr;
            buildedContent += "    ),\r\n";
        }

        buildedContent += ");";
        return buildedContent;
    }

    /**
     * 物品扩展信息
     *
     * @param func
     * @param sheetNum
     * @param content
     * @return
     */
    public String buildFinalPopWindowOptStringFromStringArray(String func, int sheetNum, String[][] content) {
        int rows = content.length;
        int cols = content[0].length < popWindowOptModel.length ? content[0].length : popWindowOptModel.length;
        String buildedContent = "";
        buildedContent += "//******************************************************************************************************************\r\n"
                + "//弹窗优化相关配置\r\n";

        buildedContent += "$J7CONFIG['popWindow'] = array(\r\n";
        for (int rowNum = 1; rowNum < rows; rowNum++) {
            buildedContent += "    " + (rowNum - 1) + "  =>  array(//" + content[rowNum][0] + "\r\n";
            for (int colNum = 1; colNum < cols; colNum++) {
                if (popWindowOptModel[colNum].endsWith("startTime") || popWindowOptModel[colNum].endsWith("endTime")) {
                    buildedContent += "        '" + popWindowOptModel[colNum] + "' => strtotime('" + content[rowNum][colNum] + "'),\r\n";
                } else if (popWindowOptModel[colNum].endsWith("showDays")) {
                    if (content[rowNum][colNum].trim().isEmpty()) {
                        buildedContent += "        '" + popWindowOptModel[colNum] + "' => array(),\r\n";
                    } else {
                        String[] showDaysArray = content[rowNum][colNum].split("\\,");
                        int showDaysArrayLength = showDaysArray.length;
                        buildedContent += "        '" + popWindowOptModel[colNum] + "' => array(";
                        for (int i = 0; i < showDaysArrayLength; i++) {
                            buildedContent += "strtotime('" + showDaysArray[i] + "'),";
                        }
                        buildedContent += "),\r\n";
                    }
                } else {
                    buildedContent += "        '" + popWindowOptModel[colNum] + "' => '" + content[rowNum][colNum] + "',\r\n";
                }
            }
            buildedContent += "    ),\r\n";
        }
        buildedContent += ");";
        return buildedContent;
    }

    /**
     * 花雕底座
     *
     * @param func
     * @param sheetNum
     * @param content
     * @return
     */
    public String buildFinalFloralSculptureConvertBottomStringFromStringArray(String func, int sheetNum, String[][] content) {
        int rows = content.length;
        int cols = content[0].length < floralSculptureConvertBottomModel.length ? content[0].length : floralSculptureConvertBottomModel.length;
        String buildedContent = "";
        buildedContent += "//******************************************************************************************************************\r\n"
                + "//兑换底座配置相关配置\r\n";

        buildedContent += "$J7CONFIG['convertBottom'] = array(\r\n";
        String convertBottomFormat = "    %s => array(\r\n"
                + "        'id' => %s,\r\n"
                + "        'uLevel' => '%s',//花雕/底座所属标签名称\r\n"
                + "        'uSapphire' => '%s', //兑换底座所需蓝宝石数量 PS：花雕不需要该数据\r\n"
                + "        'unlockCondition' => array(\r\n"
                + "            'unlockLevel' => '%s',//解锁等级\r\n"
                + "            'unlockPreId' => array(%s),//前置解锁物品ID\r\n"
                + "            'unlockMedals' => '%s',//解锁该物品所需勋章数量\r\n"
                + "        ),\r\n"
                + "        'limited' => '%s',//是否为限时活动 PS： 0：不是限时活动 1：是限时活动\r\n"
                + "        'type'  => '%s' // 类型 1底座，2花雕\r\n"
                + "    ),\r\n";
        for (int rowNum = 1; rowNum < rows; rowNum++) {
            String itemId = content[rowNum][0];//物品ID
            String uLevel = content[rowNum][1];//花雕/底座所属标签名称
            String uSapphire = content[rowNum][2];//兑换底座所需蓝宝石数量 PS：花雕不需要该数据
            String unlockLevel = content[rowNum][3];//解锁等级
            String unlockPreId = content[rowNum][4];//前置解锁物品ID
            String unlockMedals = content[rowNum][5];//解锁该物品所需勋章数量
            String limited = content[rowNum][6];//是否为限时活动 PS： 0：不是限时活动 1：是限时活动
            String type = content[rowNum][7];//类型 1底座，2花雕
            if (itemId.isEmpty()) {
                break;
            } else {
                buildedContent += String.format(convertBottomFormat, itemId, itemId, uLevel, uSapphire, unlockLevel, unlockPreId, unlockMedals, limited, type);
            }

        }
        buildedContent += ");";
        return buildedContent;
    }

    /**
     * 花雕底座
     *
     * @param func
     * @param sheetNum
     * @param content
     * @return
     */
    public String buildFinalRewardMachineStringFromStringArray(String func, int sheetNum, String[][] content) {
        int rows = content.length;
        int cols = content[0].length < rewardMachineModel.length ? content[0].length : rewardMachineModel.length;
        String buildedContent = "";
        buildedContent += "//******************************************************************************************************************\r\n"
                + "//免费送机器相关配置相关配置\r\n";

        buildedContent += "$J7CONFIG['rewardMachine'] = array(\r\n";
        String convertBottomFormat = "    %s => array(\r\n"
                + "        'status_key'           => 'is_present_machine_%s',\r\n"
                + "        'show_icon_status_key' => 'is_show_machine_%s',\r\n"
                + "        'condition'            => array(),\r\n"
                + "        'num'                  => '%s',\r\n"
                + "        'text_desc'            => '%s',//文字描述\r\n"
                + "        'title'                => '%s',//弹窗标题\r\n"
                + "        'tip'                  => '%s',//弹窗TIPS相关描述\r\n"
                + "        'ok_text'              => '%s',//弹窗OK\r\n"
                + "    ),\r\n";
        for (int rowNum = 1; rowNum < rows; rowNum++) {
            String itemId = content[rowNum][0];//物品ID
            String number = content[rowNum][1];//送的数量
            String textDesc = content[rowNum][2];//面板内容描述
            String title = content[rowNum][3];//面板标题
            String tip = content[rowNum][4];//弹窗TIPS相关描述
            String okText = content[rowNum][5];//ok_text （领取文字描述）
            buildedContent += String.format(convertBottomFormat, itemId, itemId, itemId, number, textDesc, title, tip, okText);
        }
        buildedContent += ");";
        return buildedContent;
    }

    /**
     * 物品扩展信息
     *
     * @param func
     * @param sheetNum
     * @param content
     * @return
     */
    public String buildFinalFloralSculptureCommonStringFromStringArray(String func, int sheetNum, String[][] content) {
        int rows = content.length;
        int cols = content[0].length < floralSculptureCommonModel.length ? content[0].length : floralSculptureCommonModel.length;
        String buildedContent = "";
        buildedContent += "//******************************************************************************************************************\r\n"
                + "//物品扩展信息相关配置\r\n";

        ArrayList itemIdList = new ArrayList();
        for (int rowNum = 1; rowNum < rows; rowNum++) {
            String[] rowInfo = content[rowNum];
            String itemId = rowInfo[0];
            if (itemId.isEmpty()) {
                break;
            }
            if (itemIdList.contains(itemId)) {
                JOptionPane.showMessageDialog(null, " 第 " + (sheetNum + 1) + " 个sheet " + " 第 " + (rowNum + 1) + "行 物品ID " + itemId + "重复", "转换错误-物品ID重复", JOptionPane.ERROR_MESSAGE, null);
                System.exit(0);
            } else {
                itemIdList.add(itemId);
            }
        }

        buildedContent += "$J7CONFIG['floralSculptureCommon'] = array(\r\n";
        for (int rowNum = 1; rowNum < rows; rowNum++) {
            for (int colNum = 0; colNum < cols; colNum++) {
                if (0 == colNum) {
                    buildedContent += "    '" + content[rowNum][colNum] + "' => array(\r\n";
                } else if (floralSculptureCommonModel[colNum].endsWith("Time")) {
                    if (!content[rowNum][colNum].isEmpty()) {
                        buildedContent += "        '" + floralSculptureCommonModel[colNum] + "' => strtotime('" + content[rowNum][colNum] + "'),\r\n";
                    }
                } else {
                    if (!content[rowNum][colNum].isEmpty()) {
                        buildedContent += "        '" + floralSculptureCommonModel[colNum] + "' => '" + content[rowNum][colNum] + "',\r\n";
                    }
                }
            }
            buildedContent += "    ),\r\n";
        }
        buildedContent += ");";
        return buildedContent;
    }

    /**
     * 物品扩展信息
     *
     * @param func
     * @param sheetNum
     * @param content
     * @return
     */
    public String buildFinalItemExtendStringFromStringArray(String func, int sheetNum, String[][] content) {
        int rows = content.length;
        int cols = content[0].length < itemExtendModel.length ? content[0].length : itemExtendModel.length;
        String buildedContent = "";
        buildedContent += "//******************************************************************************************************************\r\n"
                + "//物品扩展信息相关配置\r\n";

        ArrayList itemIdList = new ArrayList();
        for (int rowNum = 1; rowNum < rows; rowNum++) {
            String[] rowInfo = content[rowNum];
            String itemId = rowInfo[0];
            if (itemIdList.contains(itemId)) {
                JOptionPane.showMessageDialog(null, " 第 " + (sheetNum + 1) + " 个sheet " + " 第 " + (rowNum + 1) + "行 物品ID " + itemId + "重复", "转换错误-物品ID重复", JOptionPane.ERROR_MESSAGE, null);
                System.exit(0);
            } else {
                itemIdList.add(itemId);
            }
        }
        for (String[] rowInfo : content) {

        }

        buildedContent += "$J7CONFIG['itemExtend'] = array(\r\n";
        for (int rowNum = 1; rowNum < rows; rowNum++) {
            for (int colNum = 0; colNum < cols; colNum++) {
                if (0 == colNum) {
                    buildedContent += "    '" + content[rowNum][colNum] + "' => array(\r\n";
                } else if (itemExtendModel[colNum].endsWith("Time")) {
                    if (!content[rowNum][colNum].isEmpty()) {
                        buildedContent += "        '" + itemExtendModel[colNum] + "' => strtotime('" + content[rowNum][colNum] + "'),\r\n";
                    }
                } else if (itemExtendModel[colNum].endsWith("iExtraOutput")) {//进行特殊处理

                    if (!content[rowNum][colNum].trim().isEmpty()) {
                        String[] iExtraOutputArray = content[rowNum][colNum].split("\\|");
                        int iExtraOutputArrayLength = iExtraOutputArray.length;
                        buildedContent += "        '" + itemExtendModel[colNum] + "' => array(\r\n";
                        for (int i = 0; i < iExtraOutputArrayLength; i++) {
                            String[] iExtraOutputInfo = iExtraOutputArray[i].split(",");
                            buildedContent += "            '" + iExtraOutputInfo[0] + "' => array(\r\n";
                            buildedContent += "                'iActiveStartTime' =>  strtotime('" + iExtraOutputInfo[1] + "'),\r\n";
                            buildedContent += "                'iActiveEndTime' =>  strtotime('" + iExtraOutputInfo[2] + "'),\r\n";
                            buildedContent += "                'iRate' =>  " + iExtraOutputInfo[3] + ",\r\n";
                            buildedContent += "                'iOutputNum' =>  " + iExtraOutputInfo[4] + ",\r\n";
                            buildedContent += "            ),\r\n";
                        }
                        buildedContent += "        ),\r\n";
                    }
                } else {
                    if (!content[rowNum][colNum].isEmpty()) {
                        buildedContent += "        '" + itemExtendModel[colNum] + "' => '" + content[rowNum][colNum] + "',\r\n";
                    }
                }
            }
            buildedContent += "    ),\r\n";
        }
        buildedContent += ");";
        return buildedContent;
    }

    /**
     * 后花园扩地
     *
     * @param func
     * @param sheetNum
     * @param content
     * @return
     */
    public String buildFinalGardenExpandStringFromStringArray(String func, int sheetNum, String[][] content) {
        int rows = content.length;
        int cols = content[0].length < gardenExpandModel.length ? content[0].length : gardenExpandModel.length;
        String buildedContent = "";
        int condition_offset = 12;
        buildedContent += "/**\r\n"
                + "* 花园扩地\r\n"
                + "* User: lwy\r\n"
                + "* Date: 2012-12-13\r\n"
                + "* Time: 14:09\r\n"
                + "*  '13' => array(\r\n"
                + "*  'require_item_id' => array(//所需物品ID\r\n"
                + "*          'requireItemId' => 11,//所需物品ID\r\n"
                + "*          'obtainType' => 'reqest',//获得方式 request, feed, storage, unknown\r\n"
                + "*          'requireNum' => 1,//所需数量\r\n"
                + "*      ),\r\n"
                + "*     'expandInfo' => array(\r\n"
                + "*         'expandLv' => 0,\r\n"
                + "*         'map' => '0',\r\n"
                + "*     ),\r\n"
                + "*    'displayOrder' => array(\r\n"
                + "*        '51148' => 0,\r\n"
                + "*        '51149' => 1,\r\n"
                + "*        'uCash' => 2, \r\n"
                + "*        'uSapphire' => 3,\r\n"
                + "*     ),\r\n"
                + "*      'virtual' => array(//其他条件\r\n"
                + "*          'uCash' => 0,//需要另外花费的Cash\r\n"
                + "*          'uGold' => 0,//需要另外花费的Gold\r\n"
                + "*          'uLevel' => 1,//需要达到的等级\r\n"
                + "*          'totalGold' => 30,//快速完成需要的花费的gold数量\r\n"
                + "*          'nextLvItemId' => 14,//下级ID\r\n"
                + "*          'unlock' => array(1572, 1573),//解锁物品id\r\n"
                + "*          'unitPrice' => 2,//解锁单价\r\n"
                + "*          'times'  => 2//倍数\r\n"
                + "*          'jumpSapphireGold'  => 2//跳过蓝宝石需要花费的gold数量\r\n"
                + "*      ),\r\n"
                + "*  ),\r\n"
                + "*/\r\n";

        buildedContent += "$J7CONFIG['gardenExpandCfg'] = array(\r\n";
        for (int rowNum = 1; rowNum < rows; rowNum++) {
            String firstContent = content[rowNum][0];
            int startCol = 0;
            int endCol = cols;
            if ((rowNum > 1 && !firstContent.isEmpty())) {
                buildedContent += "    ),\r\n";
            }
            if (!firstContent.isEmpty()) {//条件
                endCol = condition_offset;
                buildedContent += "    '" + content[rowNum][0] + "' => array(\r\n";
                buildedContent += "        'virtual' => array(\r\n";
            } else {
                startCol = condition_offset;
                buildedContent += "        '" + content[rowNum][condition_offset] + "' => array(\r\n";
            }

            String expandInfo = "";
            String displayOrder = "";

            for (int colNum = startCol; colNum < endCol; colNum++) {
                if (0 == colNum) {
                } else if (cols == colNum) {
                    buildedContent += "        ),\r\n";
                } else {
                    if ("expandInfo".equals(gardenExpandModel[colNum])) {
                        String expandInfoStr = content[rowNum][colNum];
                        String[] expandInfoArray = expandInfoStr.split(",");
                        expandInfo = "        'expandInfo' => array(\r\n"
                                + "            'expandLv' => " + expandInfoArray[0] + ",\r\n"
                                + "            'map' => '" + expandInfoArray[1] + "',\r\n"
                                + "        ),\r\n";
                    } else if ("displayOrder".equals(gardenExpandModel[colNum])) {
                        String displayOrderStr = content[rowNum][colNum];
                        String[] displayOrderArray = displayOrderStr.split(",");
                        displayOrder = "        'displayOrder' => array(\r\n";
                        for (int i = 0; i < displayOrderArray.length; i++) {
                            displayOrder += "            '" + displayOrderArray[i] + "' => " + i + ",\r\n";
                        }
                        displayOrder += "        ),\r\n";
                    } else if ("unlock".equals(gardenExpandModel[colNum])) {
                        buildedContent += "            '" + gardenExpandModel[colNum] + "' => array(" + content[rowNum][colNum] + "),\r\n";
                    } else {
                        buildedContent += "            '" + gardenExpandModel[colNum] + "' => '" + content[rowNum][colNum] + "',\r\n";
                    }
                }
            }
            buildedContent += "        ),\r\n";

            buildedContent += expandInfo;
            buildedContent += displayOrder;

            if (rowNum == rows - 1) {
                buildedContent += "    ),\r\n";
            }
        }
        buildedContent += ");";

        return buildedContent;
    }

    /**
     * 花艺制作台制作清单
     *
     * @param func
     * @param sheetNum
     * @param content
     * @return
     */
    public String buildFinalFloralSculptureMakeListStringFromStringArray(String func, int sheetNum, String[][] content) {
        int rows = content.length;
        int cols = content[0].length < floralSculptureMakeListModel.length ? content[0].length : floralSculptureMakeListModel.length;
        String buildedContent = "";
        int first_condition_offset = 3;
        int second_condition_offset = 9;
        buildedContent += "/**\r\n"
                + "* 花雕制作台制作清单相关配置\r\n"
                + "* User: lwy\r\n"
                + "* Date: 2012-12-13\r\n"
                + "* Time: 14:09\r\n"
                + "*  '1' => array(\r\n"
                + "*  'require_item_id' => array(//所需物品ID\r\n"
                + "*          'requireItemId' => 11,//所需物品ID\r\n"
                + "*          'obtainType' => 'reqest',//获得方式 request, feed, storage, unknown\r\n"
                + "*          'requireNum' => 1,//所需数量\r\n"
                + "*          'requireItemCash' => 1,//补足该物品所需花费的cash(单价)\r\n"
                + "*          'requireItemGold' => 1,//补足该物品所需花费的gold(单价)\r\n"
                + "*          'order' => 0,//显示顺序\r\n"
                + "*      ),\r\n"
                + "*      'virtual' => array(//其他条件\r\n"
                + "*          'totalGold' => 30,//快速完成需要的花费的gold数量\r\n"
                + "*          'expendNutritionWater' => 5,//需要另外花费营养水的数量\r\n"
                + "*          'uStarLevel' => 0,//用户总星级数\r\n"
                + "*          'floralBenchLevel' => 1,//制作台等级\r\n"
                + "*          'isHiden' => 2,//是否隐藏\r\n"
                + "*          'displayOrder' => 0,//显示顺序\r\n"
                + "*      ),\r\n"
                + "*  ),\r\n"
                + "*/\r\n";

        buildedContent += "$J7CONFIG['floralSculptureMakeList'] = array(\r\n";

        boolean first_item = true;
        boolean new_group = true;
        String formatString = "    ";
        String singleString = "    ";
        for (int rowNum = 1; rowNum < rows; rowNum++) {
            int startCol = 0;
            int endCol = cols;
            String firstLevelContent = content[rowNum][0];//第一个层级的开始内容
            String secondLevelContent = content[rowNum][3];//第二个层级的开始内容
            String thirdLevelContent = content[rowNum][10];//第三个层级的开始内容

            if (rowNum > 1 && !firstLevelContent.isEmpty()) {//新的一组 为
                formatString = singleString;
                buildedContent += singleString + singleString + singleString + singleString + "),//latest material item end\r\n";
                buildedContent += singleString + singleString + singleString + "),//latest material end\r\n";
                buildedContent += singleString + singleString + "),//latest flower craft end\r\n";
                buildedContent += formatString + "),//latest group end\r\n";
            }

            if (rowNum > 1 && firstLevelContent.isEmpty() && !secondLevelContent.isEmpty() && !first_item && !new_group) {
                formatString = singleString + singleString + singleString;
                first_item = true;
                buildedContent += singleString + singleString + singleString + singleString + "),//material item end\r\n";
                buildedContent += singleString + singleString + singleString + "),//material end\r\n";
                buildedContent += singleString + singleString + "),//flower craft end\r\n";
            }

            if (rowNum > 1 && firstLevelContent.isEmpty() && secondLevelContent.isEmpty() && !thirdLevelContent.isEmpty() && !first_item) {
                formatString = singleString + singleString + singleString + singleString;
                buildedContent += formatString + "),//material item 2\r\n";
            }

            if (!firstLevelContent.isEmpty()) {//一个分组开始
                startCol = 0;
                endCol = first_condition_offset;
                buildedContent += formatString + firstLevelContent + " => array(//分组" + firstLevelContent + "配置项开始\r\n";
                new_group = true;
                first_item = true;
            } else if (!secondLevelContent.isEmpty()) {
                startCol = first_condition_offset;
                endCol = second_condition_offset;
                formatString = singleString + singleString;
                buildedContent += formatString + secondLevelContent + " => array(//花艺品" + secondLevelContent + "配置开始\r\n";
                formatString = singleString + singleString + singleString;
                buildedContent += formatString + "'virtual' => array(\r\n";
                new_group = false;
            } else if (!thirdLevelContent.isEmpty() && first_item) {
                startCol = second_condition_offset;
                endCol = cols;
                buildedContent += singleString + singleString + singleString + "),\r\n";
                buildedContent += singleString + singleString + singleString + "'material' => array(\r\n";
                formatString = singleString + singleString + singleString + singleString;
                buildedContent += formatString + thirdLevelContent + " => array(//原材料" + thirdLevelContent + "配置开始\r\n";
                first_item = false;
                new_group = false;
            } else {
                startCol = second_condition_offset;
                endCol = cols;
                buildedContent += formatString + thirdLevelContent + " => array(//原材料" + thirdLevelContent + "配置开始\r\n";
                formatString = singleString + singleString + singleString + singleString;
                new_group = false;
            }

            for (int colNum = startCol; colNum < endCol; colNum++) {
                if (0 == colNum) {
                } else if (cols == colNum) {
                    buildedContent += formatString + "),\r\n";
                } else if ("flowerCraftId".equals(floralBenchMakeListModel[colNum])) {
                } else {
                    buildedContent += formatString + singleString + "'" + floralBenchMakeListModel[colNum] + "' => '" + content[rowNum][colNum] + "',\r\n";
                }
            }
//            buildedContent += "        ),\r\n";
            if (rowNum == rows - 1) {
                buildedContent += singleString + singleString + singleString + singleString + "),\r\n";
                buildedContent += singleString + singleString + singleString + "),\r\n";
                buildedContent += singleString + singleString + "),\r\n";
                buildedContent += singleString + "),//分组结束\r\n";
            }
        }
        buildedContent += ");";
        return buildedContent;
    }

    /**
     * 花艺制作台制作清单
     *
     * @param func
     * @param sheetNum
     * @param content
     * @return
     */
    public String buildFinalFloralBenchMakeListStringFromStringArray(String func, int sheetNum, String[][] content) {
        int rows = content.length;
        int cols = content[0].length < floralBenchMakeListModel.length ? content[0].length : floralBenchMakeListModel.length;
        String buildedContent = "";
        int first_condition_offset = 3;
        int second_condition_offset = 9;
        buildedContent += "/**\r\n"
                + "* 花艺制作台制作清单相关配置\r\n"
                + "* User: lwy\r\n"
                + "* Date: 2012-12-13\r\n"
                + "* Time: 14:09\r\n"
                + "*  '1' => array(\r\n"
                + "*  'require_item_id' => array(//所需物品ID\r\n"
                + "*          'requireItemId' => 11,//所需物品ID\r\n"
                + "*          'obtainType' => 'reqest',//获得方式 request, feed, storage, unknown\r\n"
                + "*          'requireNum' => 1,//所需数量\r\n"
                + "*          'requireItemCash' => 1,//补足该物品所需花费的cash(单价)\r\n"
                + "*          'requireItemGold' => 1,//补足该物品所需花费的gold(单价)\r\n"
                + "*          'order' => 0,//显示顺序\r\n"
                + "*      ),\r\n"
                + "*      'virtual' => array(//其他条件\r\n"
                + "*          'totalGold' => 30,//快速完成需要的花费的gold数量\r\n"
                + "*          'expendNutritionWater' => 5,//需要另外花费营养水的数量\r\n"
                + "*          'uStarLevel' => 0,//用户总星级数\r\n"
                + "*          'floralBenchLevel' => 1,//制作台等级\r\n"
                + "*          'isHiden' => 2,//是否隐藏\r\n"
                + "*          'displayOrder' => 0,//显示顺序\r\n"
                + "*      ),\r\n"
                + "*  ),\r\n"
                + "*/\r\n";

        buildedContent += "$J7CONFIG['floralBenchGroupMakeList'] = array(\r\n";

        boolean first_item = true;
        boolean new_group = true;
        String formatString = "    ";
        String singleString = "    ";
        for (int rowNum = 1; rowNum < rows; rowNum++) {
            int startCol = 0;
            int endCol = cols;
            String firstLevelContent = content[rowNum][0];//第一个层级的开始内容
            String secondLevelContent = content[rowNum][3];//第二个层级的开始内容
            String thirdLevelContent = content[rowNum][10];//第三个层级的开始内容

            if (rowNum > 1 && !firstLevelContent.isEmpty()) {//新的一组 为
                formatString = singleString;
                buildedContent += singleString + singleString + singleString + singleString + "),//latest material item end\r\n";
                buildedContent += singleString + singleString + singleString + "),//latest material end\r\n";
                buildedContent += singleString + singleString + "),//latest flower craft end\r\n";
                buildedContent += formatString + "),//latest group end\r\n";
            }

            if (rowNum > 1 && firstLevelContent.isEmpty() && !secondLevelContent.isEmpty() && !first_item && !new_group) {
                formatString = singleString + singleString + singleString;
                first_item = true;
                buildedContent += singleString + singleString + singleString + singleString + "),//material item end\r\n";
                buildedContent += singleString + singleString + singleString + "),//material end\r\n";
                buildedContent += singleString + singleString + "),//flower craft end\r\n";
            }

            if (rowNum > 1 && firstLevelContent.isEmpty() && secondLevelContent.isEmpty() && !thirdLevelContent.isEmpty() && !first_item) {
                formatString = singleString + singleString + singleString + singleString;
                buildedContent += formatString + "),//material item 2\r\n";
            }

            if (!firstLevelContent.isEmpty()) {//一个分组开始
                startCol = 0;
                endCol = first_condition_offset;
                buildedContent += formatString + firstLevelContent + " => array(//分组" + firstLevelContent + "配置项开始\r\n";
                new_group = true;
                first_item = true;
            } else if (!secondLevelContent.isEmpty()) {
                startCol = first_condition_offset;
                endCol = second_condition_offset;
                formatString = singleString + singleString;
                buildedContent += formatString + secondLevelContent + " => array(//花艺品" + secondLevelContent + "配置开始\r\n";
                formatString = singleString + singleString + singleString;
                buildedContent += formatString + "'virtual' => array(\r\n";
                new_group = false;
            } else if (!thirdLevelContent.isEmpty() && first_item) {
                startCol = second_condition_offset;
                endCol = cols;
                buildedContent += singleString + singleString + singleString + "),\r\n";
                buildedContent += singleString + singleString + singleString + "'material' => array(\r\n";
                formatString = singleString + singleString + singleString + singleString;
                buildedContent += formatString + thirdLevelContent + " => array(//原材料" + thirdLevelContent + "配置开始\r\n";
                first_item = false;
                new_group = false;
            } else {
                startCol = second_condition_offset;
                endCol = cols;
                buildedContent += formatString + thirdLevelContent + " => array(//原材料" + thirdLevelContent + "配置开始\r\n";
                formatString = singleString + singleString + singleString + singleString;
                new_group = false;
            }

            for (int colNum = startCol; colNum < endCol; colNum++) {
                if (0 == colNum) {
                } else if (cols == colNum) {
                    buildedContent += formatString + "),\r\n";
                } else if ("flowerCraftId".equals(floralBenchMakeListModel[colNum])) {
                } else {
                    buildedContent += formatString + singleString + "'" + floralBenchMakeListModel[colNum] + "' => '" + content[rowNum][colNum] + "',\r\n";
                }
            }
//            buildedContent += "        ),\r\n";
            if (rowNum == rows - 1) {
                buildedContent += singleString + singleString + singleString + singleString + "),\r\n";
                buildedContent += singleString + singleString + singleString + "),\r\n";
                buildedContent += singleString + singleString + "),\r\n";
                buildedContent += singleString + "),//分组结束\r\n";
            }
        }
        buildedContent += ");";
        return buildedContent;
    }

    /**
     * 花艺制作台分组revert
     *
     * @param func
     * @param sheetNum
     * @param content
     * @return
     */
    public String buildFinalFloralBenchGroupRevertStringFromStringArray(String func, int sheetNum, String[][] content) {
        int rows = content.length;
        String buildedContent = "";
        buildedContent += "//******************************************************************************************************************\r\n"
                + "//花艺品制作台分组revert相关配置\r\n"
                + "//以分组为index，方便查找升级后的物品id\r\n";

        buildedContent += "$J7CONFIG['floralBenchGroupRevert'] = array(\r\n";
        boolean lastestRowIsItem = false;
        for (int rowNum = 1; rowNum < rows; rowNum++) {
            String firstContent = content[rowNum][0];
            if (!firstContent.isEmpty()) {
                if (lastestRowIsItem) {
                    buildedContent += "    ),\r\n";
                }
                lastestRowIsItem = false;
                buildedContent += "    '" + content[rowNum][0] + "' => array(\r\n";
                continue;
            } else {
                lastestRowIsItem = true;
            }

            buildedContent += "        " + content[rowNum][1] + " => array(" + content[rowNum][2] + "),// 花台等级 - 1 => array(道具Id => 解锁需求的总星数, 道具Id => 解锁需求的总星数, ...)\r\n";
        }
        buildedContent += "    ),\r\n";

        buildedContent += ");";
        return buildedContent;
    }

    /**
     * 花艺制作台分组
     *
     * @param func
     * @param sheetNum
     * @param content
     */
    public String buildFinalFloralBenchGroupStringFromStringArray(String func, int sheetNum, String[][] content) {
        int rows = content.length;
        int cols = content[0].length < floralBenchGroupModel.length ? content[0].length : floralBenchGroupModel.length;
        String buildedContent = "";
        buildedContent += "//******************************************************************************************************************\r\n"
                + "//花艺品制作台分组相关配置\r\n"
                + "//同一个制作台只能隶属于一个分组 一个分组共享同一个制作物品清单\r\n";

        buildedContent += "$J7CONFIG['floralBenchGroup'] = array(\r\n";
        for (int rowNum = 1; rowNum < rows; rowNum++) {
            for (int colNum = 0; colNum < cols; colNum++) {
                if (0 == colNum) {
                    buildedContent += "    '" + content[rowNum][colNum] + "' => array(\r\n";
                } else {
                    buildedContent += "        '" + floralBenchGroupModel[colNum] + "' => '" + content[rowNum][colNum] + "',\r\n";
                }
            }
            buildedContent += "    ),\r\n";

        }

        buildedContent += ");";
        return buildedContent;
    }

    /**
     * 解锁花艺品
     *
     * @param func
     * @param sheetNum
     * @param content
     */
    public String buildFinalUnlockFlowerCraftStringFromStringArray(String func, int sheetNum, String[][] content) {
        int rows = content.length;
        int cols = content[0].length < flowerCraftModel.length ? content[0].length : flowerCraftModel.length;
        String buildedContent = "";
        buildedContent += "//******************************************************************************************************************\r\n"
                + "//解锁花艺品相关配置\r\n";

        buildedContent += "$J7CONFIG['unlockFlowerCraft'] = array(\r\n";
        for (int rowNum = 1; rowNum < rows; rowNum++) {
            buildedContent += "    " + content[rowNum][0] + " => " + content[rowNum][1] + ",//解锁" + content[rowNum][0] + "需要" + content[rowNum][1] + "个金块\r\n";
        }

        buildedContent += ");";
        return buildedContent;
    }

    /**
     * 花艺制作台升级
     *
     * @param func
     * @param sheetNum
     * @param content
     */
    public String buildFinalFloralBenchUpgradeStringDisplayFromStringArray(String func, int sheetNum, String[][] content) {
        int rows = content.length;
        int cols = content[0].length < floralBenchUpgradeModel.length ? content[0].length : floralBenchUpgradeModel.length;
        String buildedContent = "";
        int condition_offset = 10;
        if (0 == sheetNum) {//建筑升级相关配置
            buildedContent += "/**\r\n"
                    + "* 花艺品制作台升级相关配置\r\n"
                    + "* User: lwy\r\n"
                    + "* Date: 2012-12-13\r\n"
                    + "* Time: 14:09\r\n"
                    + "*  '13' => array(\r\n"
                    + "*  'require_item_id' => array(//所需物品ID\r\n"
                    + "*          'requireItemId' => 11,//所需物品ID\r\n"
                    + "*          'obtainType' => 'reqest',//获得方式 request, feed, storage, unknown\r\n"
                    + "*          'requireNum' => 1,//所需数量\r\n"
                    + "*      ),\r\n"
                    + "*      'virtual' => array(//其他条件\r\n"
                    + "*          'uCash' => 0,//需要另外花费的Cash\r\n"
                    + "*          'uGold' => 0,//需要另外花费的Gold\r\n"
                    + "*          'uLevel' => 1,//需要达到的等级\r\n"
                    + "*          'totalGold' => 30,//快速完成需要的花费的gold数量\r\n"
                    + "*          'nextLvItemId' => 14,//下级ID\r\n"
                    + "*          'unlock' => array(1572, 1573),//解锁物品id"
                    + "*          'unitPrice' => 2,//解锁单价"
                    + "*          'times'  => 2//倍数"
                    + "*      ),\r\n"
                    + "*  ),\r\n"
                    + "*/\r\n";

            buildedContent += "$J7CONFIG['floralBenchUpgrade'] = array(\r\n";
            for (int rowNum = 1; rowNum < rows; rowNum++) {
                String firstContent = content[rowNum][0];
                int startCol = 0;
                int endCol = cols;
                if ((rowNum > 1 && !firstContent.isEmpty())) {
                    buildedContent += "    ),\r\n";
                }
                if (!firstContent.isEmpty()) {//条件
                    endCol = condition_offset;
                    buildedContent += "    '" + content[rowNum][0] + "' => array(\r\n";
                    buildedContent += "        'virtual' => array(\r\n";
                } else {
                    startCol = condition_offset;
                    buildedContent += "        '" + content[rowNum][condition_offset] + "' => array(\r\n";
                }
                for (int colNum = startCol; colNum < endCol; colNum++) {
                    if (0 == colNum) {
                    } else if (cols == colNum) {
                        buildedContent += "        ),\r\n";
                    } else {
                        if ("unlock".equals(floralBenchUpgradeModel[colNum])) {
                            buildedContent += "            '" + floralBenchUpgradeModel[colNum] + "' => array(" + content[rowNum][colNum] + "),\r\n";
                        } else {
                            buildedContent += "            '" + floralBenchUpgradeModel[colNum] + "' => '" + content[rowNum][colNum] + "',\r\n";
                        }

                    }
                }
                buildedContent += "        ),\r\n";
                if (rowNum == rows - 1) {
                    buildedContent += "    ),\r\n";
                }
            }
            buildedContent += ");";
        }
        return buildedContent;
    }

    /**
     * 登录弹窗内容解析
     *
     * @param func
     * @param sheetNum
     * @param content
     * @return
     */
    public String buildFinalLoginPopWindowContentStringFromStringArray(String func, int sheetNum, String[][] content) {
        int rows = content.length;
        String buildedContent = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><root>\n<loginPop>";
        String tpl = "<info period=\"%s\" %s=\"%s|%s|%s|%s\"/> \r\n";
        String period = "1";
        for (int rowNum = 1; rowNum < rows; rowNum++) {
            if (!content[rowNum][0].isEmpty()) {
                if (!period.isEmpty()) {
                    period = content[rowNum][0];
                }
                buildedContent += String.format(tpl, period, content[rowNum][1], content[rowNum][2], content[rowNum][3], content[rowNum][4], content[rowNum][5]);
            }
        }
        buildedContent += "</loginPop></root>";
        return buildedContent;
    }

    /**
     * 物品扩展语言项
     *
     * @param func
     * @param sheetNum
     * @param content
     * @return
     */
    public String buildFinalItemExtendStringDisplayFromStringArray(String func, int sheetNum, String[][] content) {
        int rows = content.length;
        String[] itemExtendLangModel = getModelFromStringArray(content);
        int cols = content[0].length < itemExtendLangModel.length ? content[0].length : itemExtendLangModel.length;
        String buildedContent = "";
        buildedContent += "//******************************************************************************************************************\r\n"
                + "//物品语言项相关配置\r\n";

        buildedContent += "$J7CONFIG['itemExtendLang'] = array(\r\n";
        for (int rowNum = 1; rowNum < rows; rowNum++) {
            for (int colNum = 0; colNum < cols; colNum++) {
                if (0 == colNum) {
                    buildedContent += "    '" + content[rowNum][colNum] + "' => array(\r\n";
                } else {
                    buildedContent += "        '" + itemExtendLangModel[colNum] + "' => '" + content[rowNum][colNum] + "',\r\n";
                }
            }
            buildedContent += "    ),\r\n";
        }
        buildedContent += ");\r\n";
        return buildedContent;
    }

    public String[] getModelFromStringArray(String[][] content) {
        String[] model;
        int i = 0;
        for (; i < content[0].length; i++) {
            if (content[0][i].isEmpty()) {
                break;
            }
        }
        model = new String[i];
        System.arraycopy(content[0], 0, model, 0, i);
        return model;
    }

    public int getFirstIndexFromArray(String[] content, String findMe) {
        int firstIndex = -1;
        String currentContent;
        int contentLength = content.length;
        for (int i = 0; i < contentLength; i++) {
            currentContent = content[i];
            if (currentContent.equals(findMe)) {
                firstIndex = i;
                break;
            }
        }
        return firstIndex;
    }

    public int getLastIndexFromArray(String[] content, String findMe) {
        int lastIndex = -1;
        String currentContent;
        int contentLength = content.length;
        for (int i = contentLength; i > 0; i--) {
            currentContent = content[i];
            if (currentContent.equals(findMe)) {
                lastIndex = i;
                break;
            }
        }
        return lastIndex;
    }

    /**
     * 花艺品展示
     *
     * @param func
     * @param sheetNum
     * @param content
     */
    public String buildFinalFlowerCraftStringDisplayFromStringArray(String func, int sheetNum, String[][] content) {
        int rows = content.length;
        int cols = content[0].length < flowerCraftDisplayModel.length ? content[0].length : flowerCraftDisplayModel.length;
        String buildedContent = "";
        buildedContent += "//******************************************************************************************************************\r\n"
                + "//花艺品相关配置\r\n";

        buildedContent += "$ret  = J7Config::instance()->get('flowerCraftCommon', 'floriculture/flowerCraftCommon.php');\r\n";
        buildedContent += "$lang = array(\r\n";
        for (int rowNum = 1; rowNum < rows; rowNum++) {
            for (int colNum = 0; colNum < cols; colNum++) {
                if (0 == colNum) {
                    buildedContent += "    '" + content[rowNum][colNum] + "' => array(\r\n";
                } else {
                    buildedContent += "        '" + flowerCraftDisplayModel[colNum] + "' => '" + content[rowNum][colNum] + "',\r\n";
                }
            }
            buildedContent += "    ),\r\n";

        }

        buildedContent += ");\r\n";

        buildedContent += "foreach ($ret as $period => $exchange_cfg) {\r\n"
                + "    if (isset($lang[$period])) {\r\n"
                + "        $current_info = $lang[$period];\r\n"
                + "        foreach ($current_info as $k => $v) {\r\n"
                + "            $ret[$period][$k] = $v;\r\n"
                + "        }\r\n"
                + "    }\r\n"
                + "}\r\n"
                + "$J7CONFIG['flowerCraft'] = $ret;\r\n";
        return buildedContent;
    }

    /**
     * 花艺品
     *
     * @param func
     * @param sheetNum
     * @param content
     */
    public String buildFinalFlowerCraftStringFromStringArray(String func, int sheetNum, String[][] content) {
        int rows = content.length;
        int cols = content[0].length < flowerCraftModel.length ? content[0].length : flowerCraftModel.length;
        String buildedContent = "";
        buildedContent += "//******************************************************************************************************************\r\n"
                + "//花艺品相关配置\r\n";

        buildedContent += "$J7CONFIG['flowerCraftCommon'] = array(\r\n";
        for (int rowNum = 1; rowNum < rows; rowNum++) {
            for (int colNum = 0; colNum < cols; colNum++) {
                if (0 == colNum) {
                    buildedContent += "    '" + content[rowNum][colNum] + "' => array(\r\n";
                } else if ("upgradeStarRule".equals(flowerCraftModel[colNum])) {
                    buildedContent += "        '" + flowerCraftModel[colNum] + "' => array(" + content[rowNum][colNum] + "),\r\n";
                } else {
                    buildedContent += "        '" + flowerCraftModel[colNum] + "' => '" + content[rowNum][colNum] + "',\r\n";
                }
            }
            buildedContent += "    ),\r\n";

        }

        buildedContent += ");";
        return buildedContent;
    }

    public String buildFinalSapphireExchangeDisplayStringFromStringArray(String func, int sheetNum, String[][] content) {
        int rows = content.length;
        int cols = content[0].length < flowerCraftDisplayModel.length ? content[0].length : flowerCraftDisplayModel.length;
        String buildedContent = "";
        buildedContent += "//******************************************************************************************************************\r\n"
                + "//宝石兑换相关配置\r\n";

        buildedContent += "$ret  = J7Config::instance()->get('sapphireExchangeCommon', 'split_config/sapphireExchangeCommon.php');\r\n";
        buildedContent += "$lang = array(\r\n";
        boolean lastestRowIsItem = false;
        for (int rowNum = 1; rowNum < rows; rowNum++) {
            String firstContent = content[rowNum][0];
            if (!firstContent.isEmpty()) {
                if (lastestRowIsItem) {
                    buildedContent += "    ),\r\n";
                }
                lastestRowIsItem = false;
                buildedContent += "    '" + content[rowNum][0] + "' => array(\r\n";
            } else {
                lastestRowIsItem = true;
            }

            for (int colNum = 1; colNum < cols; colNum++) {
                if (colNum == 1) {
                    buildedContent += "        'displayContent' => array(\r\n";
                }
                buildedContent += "            '" + sapphireExchangeDisplayModel[colNum] + "' => '" + content[rowNum][colNum] + "',\r\n";
            }
            buildedContent += "        ),\r\n";
        }
        buildedContent += "    ),\r\n";

        buildedContent += ");\r\n";

        buildedContent += "foreach ($ret as $period => $exchange_cfg) {\r\n"
                + "    if (isset($lang[$period])) {\r\n"
                + "        $current_info = $lang[$period];\r\n"
                + "        foreach ($current_info as $k => $v) {\r\n"
                + "            $ret[$period][$k] = $v;\r\n"
                + "        }\r\n"
                + "    }\r\n"
                + "}\r\n"
                + "$J7CONFIG['sapphireExchange'] = $ret;\r\n";
        return buildedContent;
    }

    /**
     * 宝石兑换
     *
     * @param func
     * @param sheetNum
     * @param content
     */
    public String buildFinalSapphireExchangeStringFromStringArray(String func, int sheetNum, String[][] content) {
        int rows = content.length;
        int cols = content[0].length < sapphireExchangeCommonModel.length ? content[0].length : sapphireExchangeCommonModel.length;
        String buildedContent = "";
        buildedContent += "//******************************************************************************************************************\r\n"
                + "//宝石兑换相关配置\r\n";

        buildedContent += "$J7CONFIG['sapphireExchangeCommon'] = array(\r\n";
        boolean lastestRowIsItem = false;
        for (int rowNum = 1; rowNum < rows; rowNum++) {
            String firstContent = content[rowNum][0];
            if (!firstContent.isEmpty()) {
                if (lastestRowIsItem) {
                    buildedContent += "    ),\r\n";
                }
                lastestRowIsItem = false;
                buildedContent += "    '" + content[rowNum][0] + "' => array(\r\n";

                continue;
            } else {
                lastestRowIsItem = true;
            }

            for (int colNum = 1; colNum < cols; colNum++) {
                if (1 == colNum) {
                    buildedContent += "        '" + content[rowNum][colNum] + "' => array(\r\n";
                }
                buildedContent += "            '" + sapphireExchangeCommonModel[colNum] + "' => '" + content[rowNum][colNum] + "',\r\n";

            }
            buildedContent += "        ),\r\n";

        }
        buildedContent += "    ),\r\n";

        buildedContent += ");";
        return buildedContent;
    }

    /**
     * 花店推广 （送东西）
     *
     * @param func
     * @param sheetNum
     * @param content
     */
    public String buildFinalFsAdsGeneralizeStringFromStringArray(String func, int sheetNum, String[][] content) {
        int rows = content.length;
        int cols = content[0].length;
        String buildedContent = "";
        buildedContent += "//##################################################################################################################\r\n"
                + "//小语种花店推广相关配置\r\n";
        buildedContent += "$J7CONFIG['fs_ads_generalize'] = array(\r\n";
        String cfgFormat = "    'start_time'            => strtotime('%s'), //花店推广开始时间\r\n"
                + "    'end_time'              => strtotime('%s'), //花店推广结束时间\r\n"
                + "    'ads_status_key'        => 'fs_ads_status', //flash 用于显示弹窗的字段 PS 每当有新的东西需要上线的时候 都需要在game.php中添加对应的对应信息\r\n"
                + "    'ads_banner_status_key' => 'fs_ads_status_banner', //banner是否显示的字段 0:显示 1:不显示 PS 每当有新的东西需要上线的时候 都需要在game.php中添加对应的对应信息\r\n"
                + "    'always_show_banner' => %s,//是否一直显示banner\r\n"
                + "    'condition'             => array(\r\n"
                + "        'ads_condition'             => array(\r\n"
                + "            'uLevel' => %s,\r\n"
                + "         ),\r\n"
                + "        'ads_banner_show_link_cond' => array(\r\n"
                + "            'uLevel' => %s,\r\n"
                + "        ),\r\n"
                + "    ),\r\n"
                + "    'info'                  => array(\r\n"
                + "        'fs_ads_banner_img_path'              => '%s',//banner 路径\r\n"
                + "        'fs_ads_banner_img_click_param' => '%s', //banner 链接地址\r\n"
                + "        'text_desc'                        => '%s',//文字描述\r\n"
                + "        'title'                        => '%s',//弹窗标题\r\n"
                + "        'tip'                        => '%s',//弹窗TIPS相关描述\r\n"
                + "        'ok_text'                        => '%s',//弹窗OK\r\n"
                + "    ),\r\n"
                + "    'reward' => array(\r\n";
        int condition_offset = 6;
        for (int rowNum = 1; rowNum < rows; rowNum++) {
            String firstContent = content[rowNum][0];
            int startCol = 0;
            int endCol = cols;
            if (!firstContent.isEmpty()) {
                if (rowNum > 1) {
                    buildedContent += "    ),\r\n";
                }
                buildedContent += String.format(cfgFormat, content[rowNum][0],
                        content[rowNum][1], content[rowNum][2], content[rowNum][3],
                        content[rowNum][3], content[rowNum][4], content[rowNum][5],
                        content[rowNum][6], content[rowNum][7], content[rowNum][8], content[rowNum][9]);
                continue;
            } else {
                startCol = condition_offset;
            }

            for (int colNum = startCol; colNum < endCol; colNum++) {
                if (7 == colNum) {
                    buildedContent += "        " + content[rowNum][7] + " => ";
                } else if (8 == colNum) {
                    buildedContent += content[rowNum][8] + ",\r\n";
                }
            }
            if (rowNum == rows - 1) {
                buildedContent += "    ),\r\n";
            }
        }
        buildedContent += ");";
        buildedContent += "\r\n//##################################################################################################################\r\n";
        return buildedContent;
    }

    /**
     * 小语种推广 (跳转到第三方网站)
     *
     * @param func
     * @param sheetNum
     * @param content
     */
    public String buildFinalAdsGeneralizeStringFromStringArray(String func, int sheetNum, String[][] content) {
        int rows = content.length;
        int cols = content[0].length;
        String buildedContent = "";
        buildedContent += "//##################################################################################################################\r\n"
                + "//小语种广告推广相关配置\r\n";
        buildedContent += "$J7CONFIG['ads_generalize'] = array(\r\n";
        String cfgFormat = "    'start_time'            => strtotime('%s'), //广告推广开始时间\r\n"
                + "    'end_time'              => strtotime('%s'), //广告推广结束时间\r\n"
                + "    'ads_status_key'        => 'ads_status', //flash 用于显示弹窗的字段 PS 每当有新的东西需要上线的时候 都需要在game.php中添加对应的对应信息\r\n"
                + "    'ads_banner_status_key' => 'ads_status_banner', //banner是否显示的字段 0:显示 1:不显示 PS 每当有新的东西需要上线的时候 都需要在game.php中添加对应的对应信息\r\n"
                + "    'always_show_banner' => %s,//是否一直显示banner\r\n"
                + "    'always_hide_flash_alert' => %s,//是否总是隐藏flash弹窗\r\n"
                + "    'condition'             => array(\r\n"
                + "        'ads_condition'             => array(\r\n"
                + "            'uLevel' => %s,\r\n"
                + "         ),\r\n"
                + "        'ads_banner_show_link_cond' => array(\r\n"
                + "            'uLevel' => %s,\r\n"
                + "        ),\r\n"
                + "    ),\r\n"
                + "    'info'                  => array(\r\n"
                + "        'ads_banner_img_path'              => '%s',//banner 路径\r\n"
                + "        'ads_banner_img_path_external_url' => '%s', //banner 链接地址\r\n"
                + "        'text_desc'                        => '%s',//文字描述\r\n"
                + "        'title'                        => '%s',//弹窗标题\r\n"
                + "        'tip'                        => '%s',//弹窗TIPS相关描述\r\n"
                + "        'ok_text'                        => '%s',//弹窗OK\r\n"
                + "    ),\r\n";
        for (int rowNum = 1; rowNum < rows; rowNum++) {
            buildedContent += String.format(cfgFormat, content[rowNum][0],
                    content[rowNum][1], content[rowNum][2], content[rowNum][3], content[rowNum][4],
                    content[rowNum][4], content[rowNum][5], content[rowNum][6],
                    content[rowNum][7], content[rowNum][8], content[rowNum][9], content[rowNum][10]);
        }
        buildedContent += ");";
        buildedContent += "\r\n//##################################################################################################################\r\n";
        return buildedContent;
    }

    public String buildFinalKeyMappingStringFromStringArray(String func, int sheetNum, String[][] content) {
        int rows = content.length;
        int cols = content[0].length < keyMappingModel.length ? content[0].length : keyMappingModel.length;
        String buildedContent = "";
        buildedContent += "//******************************************************************************************************************\r\n"
                + "//key mapping相关配置\r\n";

        int condition_offset = 1;
        if (0 == sheetNum) {//捆绑购买相关配置
            buildedContent += "$J7CONFIG['mapping_keys'] = array(\r\n";
            for (int rowNum = 1; rowNum < rows; rowNum++) {
                String firstContent = content[rowNum][0];
                int startCol = 0;
                int endCol = cols;
                if ((rowNum > 1 && !firstContent.isEmpty())) {
                    if ("iId".equals(firstContent)) {
                        continue;
                    } else {
                        buildedContent += "    ),\r\n";
                    }
                }
                if (!firstContent.isEmpty()) {//条件
                    endCol = condition_offset;
                    buildedContent += "     '" + content[rowNum][0] + "' => array(\r\n";
                } else {
                    startCol = condition_offset;
                }
                for (int colNum = startCol; colNum < endCol; colNum++) {
                    if (startCol == colNum) {
                        if (firstContent.isEmpty()) {//条件
                            buildedContent += "         '" + content[rowNum][colNum] + "' => array(\r\n";
                        }
                    } else {
                        if ("start_time".equals(keyMappingModel[colNum]) || "end_time".equals(keyMappingModel[colNum])) {
                            buildedContent += "            '" + keyMappingModel[colNum] + "' => strtotime('" + content[rowNum][colNum] + "'),\r\n";
                        } else if ("true".equalsIgnoreCase(content[rowNum][colNum]) || "false".equalsIgnoreCase(content[rowNum][colNum])) {
                            buildedContent += "            '" + keyMappingModel[colNum] + "' => " + content[rowNum][colNum] + ",\r\n";
                        } else {
                            buildedContent += "            '" + keyMappingModel[colNum] + "' => '" + content[rowNum][colNum] + "',\r\n";
                        }

                        if (cols - 1 == colNum) {
                            buildedContent += "        ),\r\n";
                        }
                    }
                }
                if (rowNum == rows - 1) {
                    buildedContent += "    ),\r\n";
                }
            }
            buildedContent += ");\r\n";
        }
        buildedContent += "//******************************************************************************************************************\r\n";
        return buildedContent;
    }

    public String buildFinalActivityExchangeStringFromStringArray(String func, int sheetNum, String[][] content) {
        int rows = content.length;
        int cols = content[0].length < activityExchangeModel.length ? content[0].length : activityExchangeModel.length;
        String buildedContent = "";
        if (0 == sheetNum) {//物品兑换 
            buildedContent += "//******************************************************************************************************************\r\n"
                    + "//物品兑换相关配置\r\n";
            buildedContent += "$J7CONFIG['activityExchange'] = array(\r\n";
            int condition_offset = 9;
            boolean lastFirstColContentIsNotEmpty = true;
            for (int rowNum = 1; rowNum < rows; rowNum++) {
                String firstContent = content[rowNum][0];
                int startCol = 0;
                int endCol = cols;
                if ((rowNum > 1 && !firstContent.isEmpty())) {
                    buildedContent += "        ),\r\n";
                    if (!lastFirstColContentIsNotEmpty) {
                        buildedContent += "    ),\r\n";
                    }
                }
                if (!firstContent.isEmpty()) {//条件
                    endCol = condition_offset;
                    buildedContent += "     '" + content[rowNum][0] + "' => array(\r\n";
                } else {
                    startCol = condition_offset;
                    if (lastFirstColContentIsNotEmpty) {
                        buildedContent += "         'exchangeItems' => array(\r\n";
                    }
                }
                for (int colNum = startCol; colNum < endCol; colNum++) {
                    if (0 == colNum) {
                    } else if ("uCash".equals(activityExchangeModel[colNum])) {
                        buildedContent += "         'exchangeReward' => array(\r\n";
                        buildedContent += "            '" + activityExchangeModel[colNum] + "' => '" + content[rowNum][colNum] + "',\r\n";
                    } else if ("uExp".equals(activityExchangeModel[colNum])) {
                        buildedContent += "            '" + activityExchangeModel[colNum] + "' => '" + content[rowNum][colNum] + "',\r\n";
                        buildedContent += "         ),\r\n";
                    } else if ("requireItemId".equals(activityExchangeModel[colNum])) {
                        buildedContent += "            '" + content[rowNum][colNum] + "' => '";
                    } else if ("requireItemNumber".equals(activityExchangeModel[colNum])) {
                        buildedContent += content[rowNum][colNum] + "',\r\n";
                    } else if ("startTime".equals(activityExchangeModel[colNum]) || "endTime".equals(activityExchangeModel[colNum])) {
//                        System.out.println("time:" + content[rowNum][colNum]);
                        buildedContent += "         '" + activityExchangeModel[colNum] + "' => strtotime('" + content[rowNum][colNum] + "'),\r\n";
                    } else if (cols == colNum) {
                        buildedContent += "        ),\r\n";
                    } else {
                        if ("true".equalsIgnoreCase(content[rowNum][colNum]) || "false".equalsIgnoreCase(content[rowNum][colNum])) {
                            buildedContent += "         '" + activityExchangeModel[colNum] + "' => " + content[rowNum][colNum] + ",\r\n";
                        } else {
                            buildedContent += "         '" + activityExchangeModel[colNum] + "' => '" + content[rowNum][colNum] + "',\r\n";
                        }
                    }
                }
                if (rowNum == rows - 1) {
                    buildedContent += "        ),\r\n";
                    buildedContent += "    ),\r\n";
                }
                lastFirstColContentIsNotEmpty = !firstContent.isEmpty();
            }
            buildedContent += ");";
        } else if (1 == sheetNum) {//兑换任务 

            buildedContent += "//##################################################################################################################\r\n"
                    + "//兑换任务相关配置\r\n";
            buildedContent += "$J7CONFIG['exchange_task'] = array(\r\n";
            String cfgFormat = "    '%s' => array(\r\n"
                    + "        'start_time' => strtotime('%s'),\r\n"
                    + "        'end_time' => strtotime('%s'),\r\n"
                    + "        'status_key' => 'exchangeTaskHasSentItemStatus', \r\n"
                    + "        'disable_status_key' => 'exchangeTaskHideIconStatus',\r\n"
                    + "        'rewards' => array(\r\n"
                    + "            'material' => array(\r\n"
                    + "                %s => %s,\r\n"
                    + "            ),\r\n"
                    + "            'virtual' => array(\r\n"
                    + "                'cash' => %s,\r\n"
                    + "                'gold' => %s,\r\n"
                    + "                'exp' => %s,\r\n"
                    + "            ),\r\n"
                    + "            'condition' => array(\r\n"
                    + "                'uLevel' => %s,\r\n"
                    + "            ),\r\n"
                    + "            'sent_times' => %s,\r\n"
                    + "            'sent_auto' => %s, \r\n"
                    + "        ),\r\n"
                    + "        'exchange_info' => array(\r\n"
                    + "            'item_id' => %s,\r\n"
                    + "            'item_num' => $J7CONFIG['activityExchange']['%s']['exchangeNum'],\r\n"
                    + "            'exchange_detail' => $J7CONFIG['activityExchange']['%s'],\r\n"
                    + "        ),\r\n"
                    + "    ),\r\n";
            for (int rowNum = 1; rowNum < rows; rowNum++) {
                buildedContent += String.format(cfgFormat, content[rowNum][0],
                        content[rowNum][3], content[rowNum][4], content[rowNum][10],
                        content[rowNum][11], content[rowNum][7], content[rowNum][8],
                        content[rowNum][9], content[rowNum][2], content[rowNum][5],
                        content[rowNum][6], content[rowNum][1], content[rowNum][1], content[rowNum][1]);
            }
            buildedContent += ");";
            buildedContent += "\r\n//##################################################################################################################\r\n";
        }
        return buildedContent;
    }

    public String buildFinalTigerItemInfoStringFromStringArray(String func, int sheetNum, String[][] content) {
        int rows = content.length;
        int cols = content[0].length < tigerItemInfoModel.length ? content[0].length : tigerItemInfoModel.length;
        String buildedContent = "";
        buildedContent += "//******************************************************************************************************************\r\n"
                + "//实验室种子机相关配置\r\n";

        buildedContent += "$J7CONFIG['tigerItemsInfoCommon'] = array(\r\n";
        boolean lastestRowIsItem = false;
        for (int rowNum = 1; rowNum < rows; rowNum++) {
            String firstContent = content[rowNum][0];
            if (!firstContent.isEmpty()) {
                if (lastestRowIsItem) {
                    buildedContent += "    ),\r\n";
                }
                lastestRowIsItem = false;
                buildedContent += "    '" + content[rowNum][0] + "' => array(\r\n";
                buildedContent += "        '" + tigerItemInfoModel[1] + "' => strtotime('" + content[rowNum][1] + "'),\r\n";
                buildedContent += "        '" + tigerItemInfoModel[2] + "' => strtotime('" + content[rowNum][2] + "'),\r\n";
                continue;
            } else {
                lastestRowIsItem = true;
            }

            for (int colNum = 3; colNum < cols; colNum++) {
                if (3 == colNum) {
                    buildedContent += "        '" + content[rowNum][colNum] + "' => array(\r\n";
                } else {
                    buildedContent += "            '" + tigerItemInfoModel[colNum] + "' => '" + content[rowNum][colNum] + "',\r\n";
                }
            }
            buildedContent += "        ),\r\n";

        }
        buildedContent += "    ),\r\n";

        buildedContent += ");";
        return buildedContent;
    }

    public String buildFinalFlowerlandSpinStringFromStringArray(String func, int sheetNum, String[][] content) {
        int rows = content.length;
        int cols = content[0].length;
        String buildedContent = "";
        buildedContent += "//******************************************************************************************************************\r\n"
                + "//游乐场老虎机相关配置\r\n";

        buildedContent += "$J7CONFIG['flowerland_spin'] = array(\r\n";
        for (int rowNum = 1; rowNum < rows; rowNum++) {
            for (int colNum = 0; colNum < cols; colNum++) {
                if (0 == colNum) {
                    buildedContent += "    '" + content[rowNum][colNum] + "' => array(\r\n";
                } else if (1 == colNum) {
                    buildedContent += "        'name' => '" + content[rowNum][colNum] + "', \r\n";
                    buildedContent += "        'items' => array(\r\n";
                } else if (colNum >= 2 && colNum <= 6) {
                    buildedContent += "            " + content[rowNum][colNum] + ", \r\n";
                    if (6 == colNum) {
                        buildedContent += "        ),\r\n";
                    }
                } else if (cols == colNum) {
                    buildedContent += "    ),\r\n";
                } else {
                    buildedContent += "        'output' => '" + content[rowNum][colNum] + "', \r\n";
                }
            }
            buildedContent += "    ),\r\n";
        }
        buildedContent += ");\r\n";
        buildedContent += "//******************************************************************************************************************\r\n";
        return buildedContent;
    }

    public String buildFinalBundleingSaleStringFromStringArray(String func, int sheetNum, String[][] content) {
        int rows = content.length;
        int cols = content[0].length < bundleingSaleModel.length ? content[0].length : bundleingSaleModel.length;
        String buildedContent = "";
        int condition_offset = 4;
        if (0 == sheetNum) {//捆绑购买相关配置
            buildedContent += "/**\r\n"
                    + "* 大礼包\r\n"
                    + "* User: lwy\r\n"
                    + "* Date: 2012-12-13\r\n"
                    + "* Time: 14:09\r\n"
                    + "*/\r\n";

            buildedContent += "$J7CONFIG['bundleingSale'] = array(\r\n";
            boolean lastFirstColContentIsNotEmpty = true;
            for (int rowNum = 1; rowNum < rows; rowNum++) {
                boolean breakFlag = false;
                String firstContent = content[rowNum][0];
                int startCol = 0;
                int endCol = cols;
                if ((rowNum > 1 && !firstContent.isEmpty())) {
                    if ("iId".equals(firstContent)) {
                        continue;
                    } else {
                        buildedContent += "            ),\r\n";
                        buildedContent += "    ),\r\n";
                    }
                }
                if (!firstContent.isEmpty()) {//条件
                    endCol = condition_offset;
                    buildedContent += "    '" + content[rowNum][0] + "' => array(\r\n";
                } else {
                    startCol = condition_offset;
                }
                if (lastFirstColContentIsNotEmpty && firstContent.isEmpty()) {
                    buildedContent += "            'itemArr' =>  array(\r\n";
                }
                for (int colNum = startCol; colNum <= endCol; colNum++) {
                    if (startCol == colNum) {
                    } else if (cols == colNum) {
                    } else {
                        if ("itemId".equals(bundleingSaleModel[colNum])) {
                            String s = "";
                            buildedContent += "                '" + content[rowNum][colNum] + "' => '";
                        } else if ("itemNumber".equals(bundleingSaleModel[colNum])) {
                            buildedContent += content[rowNum][colNum] + "',\r\n";
                        } else if ("startTime".equals(bundleingSaleModel[colNum])) {//
                            if (content[rowNum][colNum].trim().isEmpty() && "startTime".equals(bundleingSaleModel[colNum])) {//开始时间不能为空 结束时间为空
                                JOptionPane.showMessageDialog(null, " 第 " + (sheetNum + 1) + " 个sheet " + " 第 " + rowNum + "行 第 " + colNum + " 列 数据不能为空(startTime)", "转换错误-数据错误", JOptionPane.ERROR_MESSAGE, null);
                                breakFlag = true;
                                break;
                            } else {
                                buildedContent += "            '" + bundleingSaleModel[colNum] + "' => strtotime('" + content[rowNum][colNum] + "'),\r\n";
                            }
                        } else if ("endTime".equals(bundleingSaleModel[colNum])) {
                            if (content[rowNum][colNum].trim().isEmpty() && "startTime".equals(bundleingSaleModel[colNum])) {//结束时间不能为空 结束时间为空
                                JOptionPane.showMessageDialog(null, " 第 " + (sheetNum + 1) + " 个sheet " + " 第 " + rowNum + "行 第 " + colNum + " 列 数据不能为空(endTime)", "转换错误-数据错误", JOptionPane.ERROR_MESSAGE, null);
                                breakFlag = true;
                            } else {
                                buildedContent += "            '" + bundleingSaleModel[colNum] + "' => strtotime('" + content[rowNum][colNum] + "'),\r\n";
                            }
                        } else {
                            buildedContent += "            '" + bundleingSaleModel[colNum] + "' => '" + content[rowNum][colNum] + "',\r\n";
                        }
                    }
                }
                if (breakFlag) {
                    System.exit(0);
                }
                if (rowNum == rows - 1) {
                    buildedContent += "        ),\r\n";
                    buildedContent += "    ),\r\n";
                }
                lastFirstColContentIsNotEmpty = !firstContent.isEmpty();
            }
            buildedContent += ");";
        }
        return buildedContent;
    }

    public String buildFinalUpgradeBuildingStringFromStringArray(String func, int sheetNum, String[][] content) {
        int rows = content.length;
        int cols = content[0].length < upgradeBuildingModel.length ? content[0].length : upgradeBuildingModel.length;
        String buildedContent = "";
        int condition_offset = 14;
        if (0 == sheetNum) {//建筑升级相关配置
            buildedContent += "/**\r\n"
                    + "* 可升级建筑相关配置\r\n"
                    + "* User: lwy\r\n"
                    + "* Date: 2012-12-13\r\n"
                    + "* Time: 14:09\r\n"
                    + "*  '13' => array(\r\n"
                    + "*  'require_item_id' => array(//所需物品ID\r\n"
                    + "*          'requireItemId' => 11,//所需物品ID\r\n"
                    + "*          'obtainType' => 'reqest',//获得方式 request, feed, storage, unknown\r\n"
                    + "*          'requireNum' => 1,//所需数量\r\n"
                    + "*      ),\r\n"
                    + "*      'virtual' => array(//其他条件\r\n"
                    + "*          'uCash' => 0,//需要另外花费的Cash\r\n"
                    + "*          'uGold' => 0,//需要另外花费的Gold\r\n"
                    + "*          'uLevel' => 1,//需要达到的等级\r\n"
                    + "*          'totalGold' => 30,//快速完成需要的花费的gold数量\r\n"
                    + "*          'nextLvItemId' => 14,//下级ID\r\n"
                    + "*          'unlock' => array(1572, 1573),//解锁物品id"
                    + "*          'unitPrice' => 2,//解锁单价"
                    + "*          'times'  => 2//倍数"
                    + "*      ),\r\n"
                    + "*  ),\r\n"
                    + "*/\r\n";

            buildedContent += "$J7CONFIG['upgradeBuildingCfg'] = array(\r\n";
            for (int rowNum = 1; rowNum < rows; rowNum++) {
                String firstContent = content[rowNum][0];
                int startCol = 0;
                int endCol = cols;
                if ((rowNum > 1 && !firstContent.isEmpty())) {
                    buildedContent += "    ),\r\n";
                }
                if (!firstContent.isEmpty()) {//条件
                    endCol = condition_offset;
                    buildedContent += "    '" + content[rowNum][0] + "' => array(\r\n";
                    buildedContent += "        'virtual' => array(\r\n";
                } else {
                    startCol = condition_offset;
                    buildedContent += "        '" + content[rowNum][condition_offset] + "' => array(\r\n";
                }
                for (int colNum = startCol; colNum < endCol; colNum++) {
                    if (0 == colNum) {
                    } else if (cols == colNum) {
                        buildedContent += "        ),\r\n";
                    } else {
                        if ("unlock".equals(upgradeBuildingModel[colNum])) {
                            buildedContent += "            '" + upgradeBuildingModel[colNum] + "' => array(" + content[rowNum][colNum] + "),\r\n";
                        } else if ("requireItemSkipable".equals(upgradeBuildingModel[colNum]) || "skipPriceCountMethod".equals(upgradeBuildingModel[colNum]) || "needDeductAfterSkipped".equals(upgradeBuildingModel[colNum])) {
                            if (!content[rowNum][colNum].isEmpty()) {
                                buildedContent += "            '" + upgradeBuildingModel[colNum] + "' => '" + content[rowNum][colNum] + "',\r\n";
                            }
                        } else {
                            buildedContent += "            '" + upgradeBuildingModel[colNum] + "' => '" + content[rowNum][colNum] + "',\r\n";
                        }

                    }
                }
                buildedContent += "        ),\r\n";
                if (rowNum == rows - 1) {
                    buildedContent += "    ),\r\n";
                }
            }
            buildedContent += ");";
        }
        return buildedContent;
    }

    public String buildFinalTotemStringFromStringArray(String func, int sheetNum, String[][] content) {
        int rows = content.length;
        int cols = content[0].length < totemItemModel.length ? content[0].length : totemItemModel.length;
        String buildedContent = "";
        if (0 == sheetNum) {//图腾植物
            buildedContent += "//******************************************************************************************************************\r\n"
                    + "//图腾类增益物品（植物或者装饰物等） 配置数据\r\n";
            buildedContent += "/**\r\n";
            buildedContent += "2120 => array(\r\n"
                    + "'iId'         => 2120, //ID 白色雪絨花种子\r\n"
                    + "'iExp'        => 0, //增益经验数量\r\n"
                    + "'iCash'       => 0, //增益cash数量\r\n"
                    + "'iOutputSize' => 10, //增益收割数量\r\n"
                    + "'iTime'       => 0, //增益时间数\r\n"
                    + "'iRate'       => 100, //触发概率\r\n"
                    + "'iLimit'      => 4, //可生效次数\r\n"
                    + "'iCategory'   => 3, //增益效果分类\r\n"
                    + "),**/\r\n";

            buildedContent += "$J7CONFIG['TotemItem'] = array(\r\n";
            for (int rowNum = 1; rowNum < rows; rowNum++) {
                for (int colNum = 0; colNum < cols; colNum++) {
                    if (0 == colNum) {
                        buildedContent += "    '" + content[rowNum][colNum] + "' => array(\r\n";
                    }

                    if (cols == colNum) {
                        buildedContent += "    ),\r\n";
                    } else {
                        buildedContent += "        '" + totemItemModel[colNum] + "' => '" + content[rowNum][colNum] + "',\r\n";
                    }
                }
                buildedContent += "    ),\r\n";
            }
            buildedContent += ");\r\n";
            buildedContent += "//******************************************************************************************************************\r\n";
        } else if (1 == sheetNum) {//图腾装饰物
            buildedContent += "//##################################################################################################################\r\n"
                    + "//图腾类装饰物相关配置\r\n"
                    + "//刷新生效次数时间间隔（每多长时间刷新一次生效次数    自然天数）\r\n";
            buildedContent += "/**\r\n";
            buildedContent += "1570 => array(\r\n"
                    + "'iId'         => 1570, //ID 白色雪絨花种子\r\n"
                    + "'iExp'        => 0, //增益经验数量\r\n"
                    + "'iCash'       => 0, //增益cash数量 或 多卖鲜花获得的cash\r\n"
                    + "'iOutputSize' => 10, //增益收割数量 或 多卖鲜花数量\r\n"
                    + "'iTime'       => 0, //增益时间数\r\n"
                    + "'iRate'       => 100, //触发概率\r\n"
                    + "'iLimit'      => 4, //可生效次数\r\n"
                    + "'iCategory'   => 3, //增益效果分类\r\n"
                    + "'timeInterval' => 60 * 60 * 24, // 1天\r\n"
                    + "),**/\r\n";
            buildedContent += "$J7CONFIG['TotemOrnament'] = array(\r\n";
            for (int rowNum = 1; rowNum < rows; rowNum++) {
                for (int colNum = 0; colNum < cols; colNum++) {
                    if (0 == colNum) {
                        buildedContent += "    '" + content[rowNum][colNum] + "' => array(\r\n";
                    }
                    if (cols == colNum) {
                        buildedContent += "    ),\r\n";
                    } else {
                        buildedContent += "        '" + totemOrnamentModel[colNum] + "' => '" + content[rowNum][colNum] + "',\r\n";
                    }
                }
                buildedContent += "    ),\r\n";
            }
            buildedContent += ");";
            buildedContent += "\r\n//##################################################################################################################\r\n";
        }
        return buildedContent;
    }

    public String buildStringFromStringArray(String func, int sheetNum, String[][] content) {
        String buildedContent = "";
        if ("TOTEM".equals(func)) {//图腾相关配置
            buildedContent += buildFinalTotemStringFromStringArray(func, sheetNum, content);
        } else if ("UPGRADE_BUILDING".equals(func)) {//建筑升级相关配置
            buildedContent += buildFinalUpgradeBuildingStringFromStringArray(func, sheetNum, content);
        } else if ("BIGPACK".equals(func)) {//捆绑购买
            buildedContent += buildFinalBundleingSaleStringFromStringArray(func, sheetNum, content);
        } else if ("FLOWERLAND_SPIN".equals(func)) {//游乐场老虎机
            buildedContent += buildFinalFlowerlandSpinStringFromStringArray(func, sheetNum, content);
        } else if ("TIGERITEMINFO".equals(func)) {//实验室种子机
            buildedContent += buildFinalTigerItemInfoStringFromStringArray(func, sheetNum, content);
        } else if ("EXCHANGE".equals(func)) {//兑换任务
            buildedContent += buildFinalActivityExchangeStringFromStringArray(func, sheetNum, content);
        } else if ("KEYMAPPING".equals(func)) {//key mapping
            buildedContent += buildFinalKeyMappingStringFromStringArray(func, sheetNum, content);
        } else if ("ADSGENERALIZE".equals(func)) {//小语种广告推广
            buildedContent += buildFinalAdsGeneralizeStringFromStringArray(func, sheetNum, content);
        } else if ("FSGENERALIZE".equals(func)) {//小语种花店推广
            buildedContent += buildFinalFsAdsGeneralizeStringFromStringArray(func, sheetNum, content);
        } else if ("SAPPHIREEXCHANGE".equals(func)) {//宝石兑换
            buildedContent += buildFinalSapphireExchangeStringFromStringArray(func, sheetNum, content);
        } else if ("SAPPHIREEXCHANGEDISPLAY".equals(func)) {//宝石兑换显示相关
            buildedContent += buildFinalSapphireExchangeDisplayStringFromStringArray(func, sheetNum, content);
        } else if ("FLOWERCRAFT".equals(func)) {//花艺品
            buildedContent += buildFinalFlowerCraftStringFromStringArray(func, sheetNum, content);
        } else if ("FLOWERCARFTDISPLAY".equals(func)) {//花艺品显示相关
            buildedContent += buildFinalFlowerCraftStringDisplayFromStringArray(func, sheetNum, content);
        } else if ("FLORALBENCHUPRADE".equals(func)) {//花艺制作台升级
            buildedContent += buildFinalFloralBenchUpgradeStringDisplayFromStringArray(func, sheetNum, content);
        } else if ("UNLOCKFLOWERCRAFT".equals(func)) {//解锁花艺品
            buildedContent += buildFinalUnlockFlowerCraftStringFromStringArray(func, sheetNum, content);
        } else if ("FLORALBENCHGROUP".equals(func)) {//花艺制作台分组(分组) 
            buildedContent += buildFinalFloralBenchGroupStringFromStringArray(func, sheetNum, content);
        } else if ("FLORALBENCHGROUPREVERT".equals(func)) {//花艺制作台分组(分组 revert) 
            buildedContent += buildFinalFloralBenchGroupRevertStringFromStringArray(func, sheetNum, content);
        } else if ("FLORALBENCHMAKELIST".equals(func)) {//花艺制作台制作清单
            buildedContent += buildFinalFloralBenchMakeListStringFromStringArray(func, sheetNum, content);
        } else if ("GARDENEXPAND".equals(func)) {//后花园扩地
            buildedContent += buildFinalGardenExpandStringFromStringArray(func, sheetNum, content);
        } else if ("ITEMEXTEND".equals(func)) {//物品扩展信息
            buildedContent += buildFinalItemExtendStringFromStringArray(func, sheetNum, content);
        } else if ("ITEMEXTENDLANG".equals(func)) {//物品扩展语言项相关信息
            buildedContent += buildFinalItemExtendStringDisplayFromStringArray(func, sheetNum, content);
        } else if ("SIMPLY_TASK".equals(func)) {//简易任务 普通简易任务
            buildedContent += buildFinalSimplyTaskCommonInfoStringFromStringArray(func, sheetNum, content);
        } else if ("CONVER_MEDAL".equals(func)) {//简易任务 勋章兑换任务分组
            buildedContent += buildFinalConvertMedalStringFromStringArray(content);
        } else if ("UPGRADE_ITEM_SIMPLY_TASK".equals(func)) {//简易任务 简易升级物品简易任务
            buildedContent += buildFinalUpgradeItemSimplyTaskCommonInfoStringFromStringArray(func, sheetNum, content);
        } else if ("FESTIVAL_ACTIVITY".equals(func)) {//节日任务 
            buildedContent += buildFinalFestivalActivityFromStringArray(func, sheetNum, content);
        } else if ("LOGIN_POP_CONTENT".equals(func)) {//登录弹窗内容 
            buildedContent += buildFinalLoginPopWindowContentStringFromStringArray(func, sheetNum, content);
        } else if ("SIMPLY_TASK_SINGLE".equals(func)) {//简易任务-步骤
            buildedContent += buildFinalSimplyTaskSingleInfoStringFromStringArray(func, sheetNum, content);
        } else if ("POPWINDOWOPT".equals(func)) {//弹窗优化
            buildedContent += buildFinalPopWindowOptStringFromStringArray(func, sheetNum, content);
        } else if ("CASCA_AWARD".equals(func)) {//金币返还
            buildedContent += buildFinalCascadeAwardFromStringArray(func, sheetNum, content);
        } else if ("FLORALSCULPTURECHMAKELIST".equals(func)) {//花雕制作清单
            buildedContent += buildFinalFloralSculptureMakeListStringFromStringArray(func, sheetNum, content);
        } else if ("FLORALSCULPTURE".equals(func)) {//花雕底座配置&花雕解锁
            buildedContent += buildFinalFloralSculptureConvertBottomStringFromStringArray(func, sheetNum, content);
        } else if ("REWARD_MACHINE".equals(func)) {//免费送机器
            buildedContent += buildFinalRewardMachineStringFromStringArray(func, sheetNum, content);
        } else if ("FLORALSCULPTURECOMMON".equals(func)) {//花雕产品
            buildedContent += buildFinalFloralSculptureCommonStringFromStringArray(func, sheetNum, content);
        }
        return buildedContent;
    }

    public void writeToFile(String contents, File descFile) throws UnsupportedEncodingException, FileNotFoundException, IOException {
        writeToFile(contents, descFile, "UTF-8");
    }

    public void writeToFile(String contents, File descFile, String encoding) throws UnsupportedEncodingException, FileNotFoundException, IOException {
        if (!descFile.getParentFile().exists()) {
            if (!descFile.getParentFile().mkdirs()) {
                JOptionPane.showMessageDialog(null, "创建目录文件所在的目录失败", "信息提示", JOptionPane.ERROR_MESSAGE);
                System.out.println("创建目录文件所在的目录失败！");
            }
        }
        if (!descFile.exists()) {
            descFile.createNewFile();
        }
        Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(descFile), encoding));
        writer.write(contents);
        writer.flush();
        writer.close();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        fileMapping = new HashMap< Object, Object>();
        fileMapping.put("TOTEM", "t图腾.xls");
        fileMapping.put("UPGRADE_BUILDING", "j建筑升级.xls");
        fileMapping.put("BIGPACK", "d大礼包.xls");
        fileMapping.put("EXCHANGE", "e活动兑换--兑换任务.xls");
        fileMapping.put("TIGERITEMINFO", "y游乐场老虎机--实验室种子机.xls");
        fileMapping.put("FLOWERLAND_SPIN", "y游乐场老虎机--实验室种子机.xls");
        fileMapping.put("KEYMAPPING", "key mapping.xls");
        fileMapping.put("ADSGENERALIZE", "x小语种广告推广.xls");
        fileMapping.put("FSGENERALIZE", "x小语种花店推广.xls");
        fileMapping.put("SAPPHIREEXCHANGE", "b宝石兑换.xls");
        fileMapping.put("FLOWERCRAFT", "h花艺品.xls");
        fileMapping.put("FLORALBENCHUPRADE", "h花艺制作台升级.xls");
        fileMapping.put("UNLOCKFLOWERCRAFT", "h花艺品解锁.xls");
        fileMapping.put("FLORALBENCHGROUP", "h花艺制作台分组.xls");
        fileMapping.put("FLORALBENCHMAKELIST", "h花艺制作台制作清单.xls");
        fileMapping.put("GARDENEXPAND", "h后花园扩地.xls");
        fileMapping.put("ITEMEXTEND", "w物品扩展.xls");
        fileMapping.put("SLOTINFO", "l拉霸.xls");
        fileMapping.put("DIVINATION_INFO", "p评比占卜.xls");
        fileMapping.put("DIVINATION_EXCHANGE_INFO", "p评比兑换.xls");
        fileMapping.put("DIVINATION_COMMON_INFO", "p评比占卜通用信息.xls");
        fileMapping.put("VIRTUAL_CURRENCY", "x虚拟货币.xls");
        fileMapping.put("SIMPLY_TASK", "j简易任务.xls");
        fileMapping.put("FESTIVAL_ACTIVITY", "j节日活动.xls");
        fileMapping.put("LOGIN_POP_CONTENT", "d登陆弹窗内容.xls");
        fileMapping.put("ITEM", "w物品表.xls");
        fileMapping.put("POPWINDOWOPT", "t弹窗优化.xls");
        fileMapping.put("CASCA_AWARD", "j金币返还.xls");
        fileMapping.put("FLORALSCULPTURECHMAKELIST", "h花雕制作清单.xls");
        fileMapping.put("FLORALSCULPTURE", "h花雕底座配置&花雕解锁.xls");
        fileMapping.put("REWARD_MACHINE", "m免费送机器.xls");
        fileMapping.put("FLORALSCULPTURECOMMON", "h花雕产品.xls");

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TotemConfigParseJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
            showMessageDialogMessage(ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());

                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(TotemConfigParseJFrame.class
                            .getName()).log(Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                    Logger.getLogger(TotemConfigParseJFrame.class
                            .getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(TotemConfigParseJFrame.class
                            .getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(TotemConfigParseJFrame.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
                JFrame totemCfgFrame = new TotemConfigParseJFrame();
                totemCfgFrame.setLocationRelativeTo(null);
                totemCfgFrame.setVisible(true);
//                WindowsCenter.center(totemCfgFrame);
            }
        });
    }

    public static String[][] parseXls(String filePath) throws IOException, BiffException {
        //通过Workbook的静态方法getWorkbook选取Excel文件
        WorkbookSettings workbookSettings = getWorkbookSettings();
        Workbook workbook = Workbook.getWorkbook(new File(filePath), workbookSettings);
        int sheetTotal = workbook.getNumberOfSheets();
        Sheet sheet;
        int rows, cols;
        Cell cells[][];
        String[][] finalContents = {};
        String[][] tmpContents;
        //通过Workbook的getSheet方法选择第一个工作簿（从0开始）
        for (int sheetNum = 0; sheetNum < sheetTotal; sheetNum++) {
            sheet = workbook.getSheet(sheetNum);
            rows = sheet.getRows();
            cols = sheet.getColumns();
            cells = new Cell[cols][rows];
            tmpContents = new String[rows][cols];
            for (int i = 0; i < cols; i++) {
                for (int j = 0; j < rows; j++) {
                    cells[i][j] = sheet.getCell(i, j);
                    if (cells[i][j].getType() == CellType.DATE) {//对日期数据进行特殊处理，如果不处理的话 默认24h制会变成12小时制
                        tmpContents[j][i] = TotemConfigParseJFrame.formatTime(cells[i][j]);
                    } else {
                        String tmpContent = cells[i][j].getContents();
                        tmpContent = tmpContent.replace("\\'", "\'");//防止单引号已经被转义了 如果没有这一步骤的话 被转义的单引号就会出现问题
                        tmpContent = tmpContent.replace("\'", "\\'");//将所有的单引号进行转义
                        tmpContents[j][i] = tmpContent;
                    }
                }
            }
            if (finalContents.length > 0) {
                finalContents = unite(finalContents, tmpContents);//合并到最终的数组中
            } else {
                finalContents = tmpContents;
            }
        }

        workbook.close();
        return finalContents;
    }

    public static String[][] parseXls(String filePath, int sheetNum, boolean escapeSlash) throws IOException, BiffException {
        String[][] finalContents = TotemConfigParseJFrame.parseXls(filePath, sheetNum, true, escapeSlash);
        return finalContents;
    }

    public static WorkbookSettings getWorkbookSettings() {
        return getWorkbookSettings("ISO-8859-1");
    }

    public static WorkbookSettings getWorkbookSettings(String encoding) {
        WorkbookSettings workbookSettings = new WorkbookSettings();
        workbookSettings.setEncoding(encoding); //关键代码，解决乱码
        return workbookSettings;
    }

    public static String[][] parseXls(String filePath, int sheetNum, boolean reverse, boolean escapeSlash) throws IOException, BiffException {
        //通过Workbook的静态方法getWorkbook选取Excel文件
        WorkbookSettings workbookSettings = getWorkbookSettings();
        Workbook workbook = Workbook.getWorkbook(new File(filePath), workbookSettings);
        //通过Workbook的getSheet方法选择第一个工作簿（从0开始）
        Sheet sheet = workbook.getSheet(sheetNum);
        int rows = sheet.getRows();
        int cols = sheet.getColumns();
        Cell cells[][] = new Cell[cols][rows];
        String[][] finalContents;
        if (reverse) {
            finalContents = new String[rows][cols];
            for (int i = 0; i < cols; i++) {
                for (int j = 0; j < rows; j++) {
                    finalContents[j][i] = getTmpContent(sheet, i, j, escapeSlash);
                }
            }
        } else {
            finalContents = new String[cols][rows];
            for (int i = 0; i < cols; i++) {
                for (int j = 0; j < rows; j++) {
                    finalContents[i][j] = getTmpContent(sheet, i, j, escapeSlash);
                }
            }
        }

        workbook.close();
        return finalContents;
    }

    public static String getTmpContent(Sheet sheet, int i, int j, boolean escapeSlash) {
        Cell cells = sheet.getCell(i, j);
        String finalContents;
        if (cells.getType() == CellType.DATE) {//对日期数据进行特殊处理，如果不处理的话 默认24h制会变成12小时制
            finalContents = TotemConfigParseJFrame.formatTime(sheet.getCell(i, j));
        } else {
            String tmpContent = sheet.getCell(i, j).getContents();
            if (!isNumeric(tmpContent) && escapeSlash) {
                tmpContent = tmpContent.replace("\\'", "\'");//防止单引号已经被转义了 如果没有这一步骤的话 被转义的单引号就会出现问题
                tmpContent = tmpContent.replace("\'", "\\'");
            }
            finalContents = tmpContent;
        }
        return finalContents;
    }

    public static boolean isNumeric(String str) {
        for (int i = str.length(); --i >= 0;) {
            int chr = str.charAt(i);
            if (chr < 48 || chr > 57) {
                return false;
            }
        }
        return true;
    }

    public static String formatTime(Cell formatCell) {
        java.util.Date date = null;
        DateCell dateCell = (DateCell) formatCell;
        date = dateCell.getDate();
        //long time = (date.getTime() / 1000) - 60 * 60 * 8;
        TimeZone gmtZone = TimeZone.getTimeZone("GMT");
        //date.setTime(time * 1000);
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        formatter.setTimeZone(gmtZone);
        return formatter.format(date);

    }

    public static String getSheetNameBySheetIndex(String filePath, int sheetIndex) throws IOException, BiffException {
        Workbook workbook = Workbook.getWorkbook(new File(filePath));
        String[] sheetNames = workbook.getSheetNames();
        String sheetName = sheetNames[sheetIndex];
        return sheetName;
    }

    public static int getSheetIndexBySheetName(String filePath, String sheetName) throws IOException, BiffException {
        int sheetIndex = 0;
        Workbook workbook = Workbook.getWorkbook(new File(filePath));
        String[] sheetNames = workbook.getSheetNames();
        for (int index = 0; index < sheetNames.length; index++) {
            String currentSheetName = sheetNames[index];
            if (sheetName.equals(currentSheetName)) {
                sheetIndex = index;
                break;
            }
        }
        return sheetIndex;
    }

    public static int getSheetNumber(String filePath) throws IOException, BiffException {
        Workbook workbook = Workbook.getWorkbook(new File(filePath));
        int sheetNumber = workbook.getNumberOfSheets();
        return sheetNumber;
    }

    private void loadSetting(String file_path) {
        File f = new File(file_path);
        if (f.exists()) {
            Properties prop = new Properties();
            FileInputStream fis;
            try {
                fis = new FileInputStream(file_path);
                try {
                    prop.load(fis);

                } catch (IOException ex) {
                    Logger.getLogger(TotemConfigParseJFrame.class
                            .getName()).log(Level.SEVERE, null, ex);
                    showMessageDialogMessage(ex);
                }
                if (!prop.getProperty("configBaseDir", "").isEmpty()) {
                    try {
                        configBaseDir = new String(prop.getProperty("configBaseDir").getBytes("ISO-8859-1"), "UTF-8");
//                        System.out.println(configBaseDir);

                    } catch (UnsupportedEncodingException ex) {
                        Logger.getLogger(TotemConfigParseJFrame.class
                                .getName()).log(Level.SEVERE, null, ex);
                        showMessageDialogMessage(ex);
                    }

                }
                if (!prop.getProperty("outputDirectory", "").isEmpty()) {
                    try {
                        outputDirectory = new String(prop.getProperty("outputDirectory").getBytes("ISO-8859-1"), "UTF-8");
//                        System.out.println(outputDirectory);
                    } catch (UnsupportedEncodingException ex) {
                        showMessageDialogMessage(ex);
                        Logger
                                .getLogger(TotemConfigParseJFrame.class
                                        .getName()).log(Level.SEVERE, null, ex);
                    }

                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(TotemConfigParseJFrame.class
                        .getName()).log(Level.SEVERE, null, ex);
                showMessageDialogMessage(ex);
            }
        }
    }

    private static void showMessageDialogMessage(Exception ex) {
        String exMsg = ex.toString();
        JOptionPane.showMessageDialog(null, exMsg + new Throwable().getStackTrace()[1].toString(), "错误信息提示", JOptionPane.ERROR_MESSAGE);
    }

    public static String replace(String strSource, String strFrom, String strTo) {
        if (strSource == null) {
            return null;
        }
        int i = 0;
        if ((i = strSource.indexOf(strFrom, i)) >= 0) {
            char[] cSrc = strSource.toCharArray();
            char[] cTo = strTo.toCharArray();
            int len = strFrom.length();
            StringBuilder buf = new StringBuilder(cSrc.length);
            buf.append(cSrc, 0, i).append(cTo);
            i += len;
            int j = i;
            while ((i = strSource.indexOf(strFrom, i)) > 0) {
                buf.append(cSrc, j, i - j).append(cTo);
                i += len;
                j = i;
            }
            buf.append(cSrc, j, cSrc.length - j);
            return buf.toString();
        }
        return strSource;
    }

    // 二维数组纵向合并  
    private static String[][] unite(String[][] content1, String[][] content2) {
        String[][] newArrey = new String[][]{};
        List<String[]> list = new ArrayList<String[]>();
        list.addAll(Arrays.<String[]>asList(content1));
        list.addAll(Arrays.<String[]>asList(content2));
        return list.toArray(newArrey);
    }
    private static Map< Object, Object> fileMapping;
    private String configBaseDir;
    private String outputDirectory;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton adsGeneralizejRadioButton;
    private javax.swing.JRadioButton bigPackjRadioButton;
    private javax.swing.JButton closejButton;
    private javax.swing.JButton configFilejButton;
    private javax.swing.JLabel configFilejLabel;
    private javax.swing.JTextField configFilejTextField;
    private javax.swing.JRadioButton divinationCommonInfojRadioButton;
    private javax.swing.JRadioButton divinationExchangeInfojRadioButton;
    private javax.swing.JRadioButton divinationInfojRadioButton;
    private javax.swing.JMenu editjMenu;
    private javax.swing.JRadioButton exchangejRadioButton;
    private javax.swing.JRadioButton festivalActivityjRadioButton;
    private javax.swing.JMenu filejMenu;
    private javax.swing.JRadioButton floralBenchGroupMakeListjRadioButton;
    private javax.swing.JRadioButton floralBenchGroupjRadioButton;
    private javax.swing.JRadioButton floralBenchUpgradejRadioButton;
    private javax.swing.JRadioButton floralSculptureCommonjRadioButton1;
    private javax.swing.JRadioButton floralSculptureMakeListjRadioButton;
    private javax.swing.JRadioButton floralSculpturejRadioButton;
    private javax.swing.JRadioButton flowerCraftjRadioButton;
    private javax.swing.JRadioButton flowerlandSpinjRadioButton;
    private javax.swing.JRadioButton fsGeneralizejRadioButton;
    private javax.swing.ButtonGroup funcbuttonGroup;
    private javax.swing.JPanel funjPanel;
    private javax.swing.JRadioButton gardenExpandjRadioButton;
    private javax.swing.JRadioButton itemExtendjRadioButton;
    private javax.swing.JRadioButton itemjRadioButton;
    private javax.swing.JLayeredPane jLayeredPane;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton keyMappingjRadioButton;
    private javax.swing.JRadioButton logPopContentjRadioButton;
    private javax.swing.JPanel operationjPanel;
    private javax.swing.JButton outputjButton;
    private javax.swing.JLabel outputjLabel;
    private javax.swing.JTextField outputjTextField;
    private javax.swing.JButton parsejButton;
    private javax.swing.JRadioButton popWindowOptjRadioButton;
    private javax.swing.JRadioButton rewardMachinejRadioButton;
    private javax.swing.JRadioButton sapphireExchangejRadioButton;
    private javax.swing.JPanel selectConfgFilejPanel;
    private javax.swing.JMenuItem settingjMenuItem;
    private javax.swing.JRadioButton simplyTaskjRadioButton;
    private javax.swing.JRadioButton slotInfojRadioButton;
    private javax.swing.JRadioButton tigerItemInfojRadioButton;
    private javax.swing.JRadioButton totemjRadioButton;
    private javax.swing.JRadioButton unockFlowerCraftjRadioButton;
    private javax.swing.JRadioButton upgradeBuildingjRadioButton;
    private javax.swing.JRadioButton virtualCurrencyjRadioButton;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
